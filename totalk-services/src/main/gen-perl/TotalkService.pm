#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use Types;

# HELPER FUNCTIONS AND STRUCTURES

package TotalkService_hello_args;
use base qw(Class::Accessor);
TotalkService_hello_args->mk_accessors( qw( arg ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{arg} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{arg}) {
      $self->{arg} = $vals->{arg};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_hello_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{arg});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_hello_args');
  if (defined $self->{arg}) {
    $xfer += $output->writeFieldBegin('arg', TType::STRING, 1);
    $xfer += $output->writeString($self->{arg});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_hello_result;
use base qw(Class::Accessor);
TotalkService_hello_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{authenticationRequiredException} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{authenticationRequiredException}) {
      $self->{authenticationRequiredException} = $vals->{authenticationRequiredException};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_hello_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authenticationRequiredException} = new AuthenticationRequiredException();
        $xfer += $self->{authenticationRequiredException}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_hello_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authenticationRequiredException}) {
    $xfer += $output->writeFieldBegin('authenticationRequiredException', TType::STRUCT, 1);
    $xfer += $self->{authenticationRequiredException}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_ping_args;
use base qw(Class::Accessor);
TotalkService_ping_args->mk_accessors( qw( arg ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{arg} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{arg}) {
      $self->{arg} = $vals->{arg};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_ping_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{arg});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_ping_args');
  if (defined $self->{arg}) {
    $xfer += $output->writeFieldBegin('arg', TType::STRING, 1);
    $xfer += $output->writeString($self->{arg});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_ping_result;
use base qw(Class::Accessor);
TotalkService_ping_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authenticationRequiredException} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authenticationRequiredException}) {
      $self->{authenticationRequiredException} = $vals->{authenticationRequiredException};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_ping_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authenticationRequiredException} = new AuthenticationRequiredException();
        $xfer += $self->{authenticationRequiredException}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_ping_result');
  if (defined $self->{authenticationRequiredException}) {
    $xfer += $output->writeFieldBegin('authenticationRequiredException', TType::STRUCT, 1);
    $xfer += $self->{authenticationRequiredException}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getReviewById_args;
use base qw(Class::Accessor);
TotalkService_getReviewById_args->mk_accessors( qw( id ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getReviewById_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getReviewById_args');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getReviewById_result;
use base qw(Class::Accessor);
TotalkService_getReviewById_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{noReviewException} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{noReviewException}) {
      $self->{noReviewException} = $vals->{noReviewException};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getReviewById_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Review();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{noReviewException} = new NoReviewException();
        $xfer += $self->{noReviewException}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getReviewById_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noReviewException}) {
    $xfer += $output->writeFieldBegin('noReviewException', TType::STRUCT, 1);
    $xfer += $self->{noReviewException}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByCreatedAt_args;
use base qw(Class::Accessor);
TotalkService_getByCreatedAt_args->mk_accessors( qw( country categoryId offset limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{country} = undef;
  $self->{categoryId} = 0;
  $self->{offset} = 0;
  $self->{limit} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
    if (defined $vals->{categoryId}) {
      $self->{categoryId} = $vals->{categoryId};
    }
    if (defined $vals->{offset}) {
      $self->{offset} = $vals->{offset};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByCreatedAt_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{categoryId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{offset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByCreatedAt_args');
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', TType::I32, 1);
    $xfer += $output->writeI32($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{categoryId}) {
    $xfer += $output->writeFieldBegin('categoryId', TType::I32, 2);
    $xfer += $output->writeI32($self->{categoryId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{offset}) {
    $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
    $xfer += $output->writeI32($self->{offset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByCreatedAt_result;
use base qw(Class::Accessor);
TotalkService_getByCreatedAt_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByCreatedAt_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{success} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $elem5 = new Review();
            $xfer += $elem5->read($input);
            push(@{$self->{success}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByCreatedAt_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter6 (@{$self->{success}}) 
        {
          $xfer += ${iter6}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByPopularity_args;
use base qw(Class::Accessor);
TotalkService_getByPopularity_args->mk_accessors( qw( country categoryId offset limit arg3 ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{country} = undef;
  $self->{categoryId} = 0;
  $self->{offset} = 0;
  $self->{limit} = 0;
  $self->{arg3} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
    if (defined $vals->{categoryId}) {
      $self->{categoryId} = $vals->{categoryId};
    }
    if (defined $vals->{offset}) {
      $self->{offset} = $vals->{offset};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
    if (defined $vals->{arg3}) {
      $self->{arg3} = $vals->{arg3};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByPopularity_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{categoryId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{offset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{arg3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByPopularity_args');
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', TType::I32, 1);
    $xfer += $output->writeI32($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{categoryId}) {
    $xfer += $output->writeFieldBegin('categoryId', TType::I32, 2);
    $xfer += $output->writeI32($self->{categoryId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{offset}) {
    $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
    $xfer += $output->writeI32($self->{offset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{arg3}) {
    $xfer += $output->writeFieldBegin('arg3', TType::I64, 5);
    $xfer += $output->writeI64($self->{arg3});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByPopularity_result;
use base qw(Class::Accessor);
TotalkService_getByPopularity_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByPopularity_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size7 = 0;
          $self->{success} = [];
          my $_etype10 = 0;
          $xfer += $input->readListBegin(\$_etype10, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $elem12 = undef;
            $elem12 = new Review();
            $xfer += $elem12->read($input);
            push(@{$self->{success}},$elem12);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByPopularity_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter13 (@{$self->{success}}) 
        {
          $xfer += ${iter13}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getSubscription_args;
use base qw(Class::Accessor);
TotalkService_getSubscription_args->mk_accessors( qw( userId categoryId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{userId} = undef;
  $self->{categoryId} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{userId}) {
      $self->{userId} = $vals->{userId};
    }
    if (defined $vals->{categoryId}) {
      $self->{categoryId} = $vals->{categoryId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getSubscription_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{userId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{categoryId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getSubscription_args');
  if (defined $self->{userId}) {
    $xfer += $output->writeFieldBegin('userId', TType::STRING, 1);
    $xfer += $output->writeString($self->{userId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{categoryId}) {
    $xfer += $output->writeFieldBegin('categoryId', TType::I32, 2);
    $xfer += $output->writeI32($self->{categoryId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getSubscription_result;
use base qw(Class::Accessor);
TotalkService_getSubscription_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getSubscription_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size14 = 0;
          $self->{success} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $elem19 = new Review();
            $xfer += $elem19->read($input);
            push(@{$self->{success}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getSubscription_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter20 (@{$self->{success}}) 
        {
          $xfer += ${iter20}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getComments_args;
use base qw(Class::Accessor);
TotalkService_getComments_args->mk_accessors( qw( reviewId offset limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reviewId} = undef;
  $self->{offset} = 0;
  $self->{limit} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reviewId}) {
      $self->{reviewId} = $vals->{reviewId};
    }
    if (defined $vals->{offset}) {
      $self->{offset} = $vals->{offset};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getComments_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{reviewId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{offset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getComments_args');
  if (defined $self->{reviewId}) {
    $xfer += $output->writeFieldBegin('reviewId', TType::STRING, 1);
    $xfer += $output->writeString($self->{reviewId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{offset}) {
    $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
    $xfer += $output->writeI32($self->{offset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getComments_result;
use base qw(Class::Accessor);
TotalkService_getComments_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{noReviewException} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{noReviewException}) {
      $self->{noReviewException} = $vals->{noReviewException};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getComments_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size21 = 0;
          $self->{success} = [];
          my $_etype24 = 0;
          $xfer += $input->readListBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $elem26 = new Comment();
            $xfer += $elem26->read($input);
            push(@{$self->{success}},$elem26);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{noReviewException} = new NoReviewException();
        $xfer += $self->{noReviewException}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getComments_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter27 (@{$self->{success}}) 
        {
          $xfer += ${iter27}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noReviewException}) {
    $xfer += $output->writeFieldBegin('noReviewException', TType::STRUCT, 1);
    $xfer += $self->{noReviewException}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByEntity_args;
use base qw(Class::Accessor);
TotalkService_getByEntity_args->mk_accessors( qw( entityType entityId reviewType offset limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{entityType} = undef;
  $self->{entityId} = undef;
  $self->{reviewType} = undef;
  $self->{offset} = 0;
  $self->{limit} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{entityType}) {
      $self->{entityType} = $vals->{entityType};
    }
    if (defined $vals->{entityId}) {
      $self->{entityId} = $vals->{entityId};
    }
    if (defined $vals->{reviewType}) {
      $self->{reviewType} = $vals->{reviewType};
    }
    if (defined $vals->{offset}) {
      $self->{offset} = $vals->{offset};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByEntity_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{entityType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{entityId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{reviewType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{offset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByEntity_args');
  if (defined $self->{entityType}) {
    $xfer += $output->writeFieldBegin('entityType', TType::I32, 1);
    $xfer += $output->writeI32($self->{entityType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{entityId}) {
    $xfer += $output->writeFieldBegin('entityId', TType::STRING, 2);
    $xfer += $output->writeString($self->{entityId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reviewType}) {
    $xfer += $output->writeFieldBegin('reviewType', TType::I32, 3);
    $xfer += $output->writeI32($self->{reviewType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{offset}) {
    $xfer += $output->writeFieldBegin('offset', TType::I32, 4);
    $xfer += $output->writeI32($self->{offset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', TType::I32, 5);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_getByEntity_result;
use base qw(Class::Accessor);
TotalkService_getByEntity_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_getByEntity_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size28 = 0;
          $self->{success} = [];
          my $_etype31 = 0;
          $xfer += $input->readListBegin(\$_etype31, \$_size28);
          for (my $_i32 = 0; $_i32 < $_size28; ++$_i32)
          {
            my $elem33 = undef;
            $elem33 = new Review();
            $xfer += $elem33->read($input);
            push(@{$self->{success}},$elem33);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_getByEntity_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter34 (@{$self->{success}}) 
        {
          $xfer += ${iter34}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_setVote_args;
use base qw(Class::Accessor);
TotalkService_setVote_args->mk_accessors( qw( reviewId yes ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reviewId} = undef;
  $self->{yes} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reviewId}) {
      $self->{reviewId} = $vals->{reviewId};
    }
    if (defined $vals->{yes}) {
      $self->{yes} = $vals->{yes};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_setVote_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{reviewId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{yes});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_setVote_args');
  if (defined $self->{reviewId}) {
    $xfer += $output->writeFieldBegin('reviewId', TType::STRING, 1);
    $xfer += $output->writeString($self->{reviewId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{yes}) {
    $xfer += $output->writeFieldBegin('yes', TType::BOOL, 2);
    $xfer += $output->writeBool($self->{yes});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_setVote_result;
use base qw(Class::Accessor);
TotalkService_setVote_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{noReviewException} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{noReviewException}) {
      $self->{noReviewException} = $vals->{noReviewException};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_setVote_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{noReviewException} = new NoReviewException();
        $xfer += $self->{noReviewException}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_setVote_result');
  if (defined $self->{noReviewException}) {
    $xfer += $output->writeFieldBegin('noReviewException', TType::STRUCT, 1);
    $xfer += $self->{noReviewException}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_addReview_args;
use base qw(Class::Accessor);
TotalkService_addReview_args->mk_accessors( qw( review ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{review} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{review}) {
      $self->{review} = $vals->{review};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_addReview_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{review} = new Review();
        $xfer += $self->{review}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_addReview_args');
  if (defined $self->{review}) {
    $xfer += $output->writeFieldBegin('review', TType::STRUCT, 1);
    $xfer += $self->{review}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_addReview_result;
use base qw(Class::Accessor);
TotalkService_addReview_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_addReview_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Review();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_addReview_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_addComment_args;
use base qw(Class::Accessor);
TotalkService_addComment_args->mk_accessors( qw( comment ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{comment} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{comment}) {
      $self->{comment} = $vals->{comment};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_addComment_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{comment} = new Comment();
        $xfer += $self->{comment}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_addComment_args');
  if (defined $self->{comment}) {
    $xfer += $output->writeFieldBegin('comment', TType::STRUCT, 1);
    $xfer += $self->{comment}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkService_addComment_result;
use base qw(Class::Accessor);
TotalkService_addComment_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TotalkService_addComment_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Comment();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TotalkService_addComment_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TotalkServiceIf;

use strict;


sub hello{
  my $self = shift;
  my $arg = shift;

  die 'implement interface';
}

sub ping{
  my $self = shift;
  my $arg = shift;

  die 'implement interface';
}

sub getReviewById{
  my $self = shift;
  my $id = shift;

  die 'implement interface';
}

sub getByCreatedAt{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;

  die 'implement interface';
}

sub getByPopularity{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;
  my $arg3 = shift;

  die 'implement interface';
}

sub getSubscription{
  my $self = shift;
  my $userId = shift;
  my $categoryId = shift;

  die 'implement interface';
}

sub getComments{
  my $self = shift;
  my $reviewId = shift;
  my $offset = shift;
  my $limit = shift;

  die 'implement interface';
}

sub getByEntity{
  my $self = shift;
  my $entityType = shift;
  my $entityId = shift;
  my $reviewType = shift;
  my $offset = shift;
  my $limit = shift;

  die 'implement interface';
}

sub setVote{
  my $self = shift;
  my $reviewId = shift;
  my $yes = shift;

  die 'implement interface';
}

sub addReview{
  my $self = shift;
  my $review = shift;

  die 'implement interface';
}

sub addComment{
  my $self = shift;
  my $comment = shift;

  die 'implement interface';
}

package TotalkServiceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub hello{
  my ($self, $request) = @_;

  my $arg = ($request->{'arg'}) ? $request->{'arg'} : undef;
  return $self->{impl}->hello($arg);
}

sub ping{
  my ($self, $request) = @_;

  my $arg = ($request->{'arg'}) ? $request->{'arg'} : undef;
  return $self->{impl}->ping($arg);
}

sub getReviewById{
  my ($self, $request) = @_;

  my $id = ($request->{'id'}) ? $request->{'id'} : undef;
  return $self->{impl}->getReviewById($id);
}

sub getByCreatedAt{
  my ($self, $request) = @_;

  my $country = ($request->{'country'}) ? $request->{'country'} : undef;
  my $categoryId = ($request->{'categoryId'}) ? $request->{'categoryId'} : undef;
  my $offset = ($request->{'offset'}) ? $request->{'offset'} : undef;
  my $limit = ($request->{'limit'}) ? $request->{'limit'} : undef;
  return $self->{impl}->getByCreatedAt($country, $categoryId, $offset, $limit);
}

sub getByPopularity{
  my ($self, $request) = @_;

  my $country = ($request->{'country'}) ? $request->{'country'} : undef;
  my $categoryId = ($request->{'categoryId'}) ? $request->{'categoryId'} : undef;
  my $offset = ($request->{'offset'}) ? $request->{'offset'} : undef;
  my $limit = ($request->{'limit'}) ? $request->{'limit'} : undef;
  my $arg3 = ($request->{'arg3'}) ? $request->{'arg3'} : undef;
  return $self->{impl}->getByPopularity($country, $categoryId, $offset, $limit, $arg3);
}

sub getSubscription{
  my ($self, $request) = @_;

  my $userId = ($request->{'userId'}) ? $request->{'userId'} : undef;
  my $categoryId = ($request->{'categoryId'}) ? $request->{'categoryId'} : undef;
  return $self->{impl}->getSubscription($userId, $categoryId);
}

sub getComments{
  my ($self, $request) = @_;

  my $reviewId = ($request->{'reviewId'}) ? $request->{'reviewId'} : undef;
  my $offset = ($request->{'offset'}) ? $request->{'offset'} : undef;
  my $limit = ($request->{'limit'}) ? $request->{'limit'} : undef;
  return $self->{impl}->getComments($reviewId, $offset, $limit);
}

sub getByEntity{
  my ($self, $request) = @_;

  my $entityType = ($request->{'entityType'}) ? $request->{'entityType'} : undef;
  my $entityId = ($request->{'entityId'}) ? $request->{'entityId'} : undef;
  my $reviewType = ($request->{'reviewType'}) ? $request->{'reviewType'} : undef;
  my $offset = ($request->{'offset'}) ? $request->{'offset'} : undef;
  my $limit = ($request->{'limit'}) ? $request->{'limit'} : undef;
  return $self->{impl}->getByEntity($entityType, $entityId, $reviewType, $offset, $limit);
}

sub setVote{
  my ($self, $request) = @_;

  my $reviewId = ($request->{'reviewId'}) ? $request->{'reviewId'} : undef;
  my $yes = ($request->{'yes'}) ? $request->{'yes'} : undef;
  return $self->{impl}->setVote($reviewId, $yes);
}

sub addReview{
  my ($self, $request) = @_;

  my $review = ($request->{'review'}) ? $request->{'review'} : undef;
  return $self->{impl}->addReview($review);
}

sub addComment{
  my ($self, $request) = @_;

  my $comment = ($request->{'comment'}) ? $request->{'comment'} : undef;
  return $self->{impl}->addComment($comment);
}

package TotalkServiceClient;


use base qw(TotalkServiceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub hello{
  my $self = shift;
  my $arg = shift;

    $self->send_hello($arg);
  return $self->recv_hello();
}

sub send_hello{
  my $self = shift;
  my $arg = shift;

  $self->{output}->writeMessageBegin('TotalkService:hello', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_hello_args();
  $args->{arg} = $arg;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_hello{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_hello_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{authenticationRequiredException}) {
    die $result->{authenticationRequiredException};
  }
  die "hello failed: unknown result";
}
sub ping{
  my $self = shift;
  my $arg = shift;

    $self->send_ping($arg);
  $self->recv_ping();
}

sub send_ping{
  my $self = shift;
  my $arg = shift;

  $self->{output}->writeMessageBegin('TotalkService:ping', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_ping_args();
  $args->{arg} = $arg;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_ping{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_ping_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{authenticationRequiredException}) {
    die $result->{authenticationRequiredException};
  }
  return;
}
sub getReviewById{
  my $self = shift;
  my $id = shift;

    $self->send_getReviewById($id);
  return $self->recv_getReviewById();
}

sub send_getReviewById{
  my $self = shift;
  my $id = shift;

  $self->{output}->writeMessageBegin('TotalkService:getReviewById', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getReviewById_args();
  $args->{id} = $id;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getReviewById{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getReviewById_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{noReviewException}) {
    die $result->{noReviewException};
  }
  die "getReviewById failed: unknown result";
}
sub getByCreatedAt{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;

    $self->send_getByCreatedAt($country, $categoryId, $offset, $limit);
  return $self->recv_getByCreatedAt();
}

sub send_getByCreatedAt{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;

  $self->{output}->writeMessageBegin('TotalkService:getByCreatedAt', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getByCreatedAt_args();
  $args->{country} = $country;
  $args->{categoryId} = $categoryId;
  $args->{offset} = $offset;
  $args->{limit} = $limit;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getByCreatedAt{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getByCreatedAt_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "getByCreatedAt failed: unknown result";
}
sub getByPopularity{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;
  my $arg3 = shift;

    $self->send_getByPopularity($country, $categoryId, $offset, $limit, $arg3);
  return $self->recv_getByPopularity();
}

sub send_getByPopularity{
  my $self = shift;
  my $country = shift;
  my $categoryId = shift;
  my $offset = shift;
  my $limit = shift;
  my $arg3 = shift;

  $self->{output}->writeMessageBegin('TotalkService:getByPopularity', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getByPopularity_args();
  $args->{country} = $country;
  $args->{categoryId} = $categoryId;
  $args->{offset} = $offset;
  $args->{limit} = $limit;
  $args->{arg3} = $arg3;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getByPopularity{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getByPopularity_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "getByPopularity failed: unknown result";
}
sub getSubscription{
  my $self = shift;
  my $userId = shift;
  my $categoryId = shift;

    $self->send_getSubscription($userId, $categoryId);
  return $self->recv_getSubscription();
}

sub send_getSubscription{
  my $self = shift;
  my $userId = shift;
  my $categoryId = shift;

  $self->{output}->writeMessageBegin('TotalkService:getSubscription', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getSubscription_args();
  $args->{userId} = $userId;
  $args->{categoryId} = $categoryId;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getSubscription{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getSubscription_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "getSubscription failed: unknown result";
}
sub getComments{
  my $self = shift;
  my $reviewId = shift;
  my $offset = shift;
  my $limit = shift;

    $self->send_getComments($reviewId, $offset, $limit);
  return $self->recv_getComments();
}

sub send_getComments{
  my $self = shift;
  my $reviewId = shift;
  my $offset = shift;
  my $limit = shift;

  $self->{output}->writeMessageBegin('TotalkService:getComments', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getComments_args();
  $args->{reviewId} = $reviewId;
  $args->{offset} = $offset;
  $args->{limit} = $limit;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getComments{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getComments_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{noReviewException}) {
    die $result->{noReviewException};
  }
  die "getComments failed: unknown result";
}
sub getByEntity{
  my $self = shift;
  my $entityType = shift;
  my $entityId = shift;
  my $reviewType = shift;
  my $offset = shift;
  my $limit = shift;

    $self->send_getByEntity($entityType, $entityId, $reviewType, $offset, $limit);
  return $self->recv_getByEntity();
}

sub send_getByEntity{
  my $self = shift;
  my $entityType = shift;
  my $entityId = shift;
  my $reviewType = shift;
  my $offset = shift;
  my $limit = shift;

  $self->{output}->writeMessageBegin('TotalkService:getByEntity', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_getByEntity_args();
  $args->{entityType} = $entityType;
  $args->{entityId} = $entityId;
  $args->{reviewType} = $reviewType;
  $args->{offset} = $offset;
  $args->{limit} = $limit;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getByEntity{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_getByEntity_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "getByEntity failed: unknown result";
}
sub setVote{
  my $self = shift;
  my $reviewId = shift;
  my $yes = shift;

    $self->send_setVote($reviewId, $yes);
  $self->recv_setVote();
}

sub send_setVote{
  my $self = shift;
  my $reviewId = shift;
  my $yes = shift;

  $self->{output}->writeMessageBegin('TotalkService:setVote', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_setVote_args();
  $args->{reviewId} = $reviewId;
  $args->{yes} = $yes;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_setVote{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_setVote_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{noReviewException}) {
    die $result->{noReviewException};
  }
  return;
}
sub addReview{
  my $self = shift;
  my $review = shift;

    $self->send_addReview($review);
  return $self->recv_addReview();
}

sub send_addReview{
  my $self = shift;
  my $review = shift;

  $self->{output}->writeMessageBegin('TotalkService:addReview', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_addReview_args();
  $args->{review} = $review;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_addReview{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_addReview_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "addReview failed: unknown result";
}
sub addComment{
  my $self = shift;
  my $comment = shift;

    $self->send_addComment($comment);
  return $self->recv_addComment();
}

sub send_addComment{
  my $self = shift;
  my $comment = shift;

  $self->{output}->writeMessageBegin('TotalkService:addComment', TMessageType::CALL, $self->{seqid});
  my $args = new TotalkService_addComment_args();
  $args->{comment} = $comment;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_addComment{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new TotalkService_addComment_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "addComment failed: unknown result";
}
package TotalkServiceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub method_exists {
    my $self   = shift;
    my $methodname = shift;
    return 1 if defined &$methodname;
    return 0;
  }

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_hello {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_hello_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_hello_result();
    eval {
      $result->{success} = $self->{handler}->hello($args->arg);
    }; if( UNIVERSAL::isa($@,'AuthenticationRequiredException') ){ 
      $result->{authenticationRequiredException} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('hello', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('hello', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_ping {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_ping_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_ping_result();
    eval {
      $self->{handler}->ping($args->arg);
    }; if( UNIVERSAL::isa($@,'AuthenticationRequiredException') ){ 
      $result->{authenticationRequiredException} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('ping', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getReviewById {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getReviewById_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getReviewById_result();
    eval {
      $result->{success} = $self->{handler}->getReviewById($args->id);
    }; if( UNIVERSAL::isa($@,'NoReviewException') ){ 
      $result->{noReviewException} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('getReviewById', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('getReviewById', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getByCreatedAt {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getByCreatedAt_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getByCreatedAt_result();
    $result->{success} = $self->{handler}->getByCreatedAt($args->country, $args->categoryId, $args->offset, $args->limit);
    $output->writeMessageBegin('getByCreatedAt', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getByPopularity {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getByPopularity_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getByPopularity_result();
    $result->{success} = $self->{handler}->getByPopularity($args->country, $args->categoryId, $args->offset, $args->limit, $args->arg3);
    $output->writeMessageBegin('getByPopularity', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getSubscription {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getSubscription_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getSubscription_result();
    $result->{success} = $self->{handler}->getSubscription($args->userId, $args->categoryId);
    $output->writeMessageBegin('getSubscription', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getComments {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getComments_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getComments_result();
    eval {
      $result->{success} = $self->{handler}->getComments($args->reviewId, $args->offset, $args->limit);
    }; if( UNIVERSAL::isa($@,'NoReviewException') ){ 
      $result->{noReviewException} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('getComments', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('getComments', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_getByEntity {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_getByEntity_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_getByEntity_result();
    $result->{success} = $self->{handler}->getByEntity($args->entityType, $args->entityId, $args->reviewType, $args->offset, $args->limit);
    $output->writeMessageBegin('getByEntity', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_setVote {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_setVote_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_setVote_result();
    eval {
      $self->{handler}->setVote($args->reviewId, $args->yes);
    }; if( UNIVERSAL::isa($@,'NoReviewException') ){ 
      $result->{noReviewException} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('setVote', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('setVote', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_addReview {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_addReview_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_addReview_result();
    $result->{success} = $self->{handler}->addReview($args->review);
    $output->writeMessageBegin('addReview', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_addComment {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new TotalkService_addComment_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new TotalkService_addComment_result();
    $result->{success} = $self->{handler}->addComment($args->comment);
    $output->writeMessageBegin('addComment', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
