//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

totalk.thrift.TotalkService_hello_args = function(args) {
  this.arg = null;
  if (args) {
    if (args.arg !== undefined && args.arg !== null) {
      this.arg = args.arg;
    }
  }
};
totalk.thrift.TotalkService_hello_args.prototype = {};
totalk.thrift.TotalkService_hello_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.arg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_hello_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_hello_args');
  if (this.arg !== null && this.arg !== undefined) {
    output.writeFieldBegin('arg', Thrift.Type.STRING, 1);
    output.writeString(this.arg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_hello_result = function(args) {
  this.success = null;
  this.authenticationRequiredException = null;
  if (args instanceof totalk.thrift.AuthenticationRequiredException) {
    this.authenticationRequiredException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.authenticationRequiredException !== undefined && args.authenticationRequiredException !== null) {
      this.authenticationRequiredException = args.authenticationRequiredException;
    }
  }
};
totalk.thrift.TotalkService_hello_result.prototype = {};
totalk.thrift.TotalkService_hello_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authenticationRequiredException = new totalk.thrift.AuthenticationRequiredException();
        this.authenticationRequiredException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_hello_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_hello_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.authenticationRequiredException !== null && this.authenticationRequiredException !== undefined) {
    output.writeFieldBegin('authenticationRequiredException', Thrift.Type.STRUCT, 1);
    this.authenticationRequiredException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_ping_args = function(args) {
  this.arg = null;
  if (args) {
    if (args.arg !== undefined && args.arg !== null) {
      this.arg = args.arg;
    }
  }
};
totalk.thrift.TotalkService_ping_args.prototype = {};
totalk.thrift.TotalkService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.arg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_ping_args');
  if (this.arg !== null && this.arg !== undefined) {
    output.writeFieldBegin('arg', Thrift.Type.STRING, 1);
    output.writeString(this.arg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_ping_result = function(args) {
  this.authenticationRequiredException = null;
  if (args instanceof totalk.thrift.AuthenticationRequiredException) {
    this.authenticationRequiredException = args;
    return;
  }
  if (args) {
    if (args.authenticationRequiredException !== undefined && args.authenticationRequiredException !== null) {
      this.authenticationRequiredException = args.authenticationRequiredException;
    }
  }
};
totalk.thrift.TotalkService_ping_result.prototype = {};
totalk.thrift.TotalkService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authenticationRequiredException = new totalk.thrift.AuthenticationRequiredException();
        this.authenticationRequiredException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_ping_result');
  if (this.authenticationRequiredException !== null && this.authenticationRequiredException !== undefined) {
    output.writeFieldBegin('authenticationRequiredException', Thrift.Type.STRUCT, 1);
    this.authenticationRequiredException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getReviewById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
totalk.thrift.TotalkService_getReviewById_args.prototype = {};
totalk.thrift.TotalkService_getReviewById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getReviewById_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getReviewById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getReviewById_result = function(args) {
  this.success = null;
  this.noReviewException = null;
  if (args instanceof totalk.thrift.NoReviewException) {
    this.noReviewException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new totalk.thrift.Review(args.success);
    }
    if (args.noReviewException !== undefined && args.noReviewException !== null) {
      this.noReviewException = args.noReviewException;
    }
  }
};
totalk.thrift.TotalkService_getReviewById_result.prototype = {};
totalk.thrift.TotalkService_getReviewById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new totalk.thrift.Review();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.noReviewException = new totalk.thrift.NoReviewException();
        this.noReviewException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getReviewById_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getReviewById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.noReviewException !== null && this.noReviewException !== undefined) {
    output.writeFieldBegin('noReviewException', Thrift.Type.STRUCT, 1);
    this.noReviewException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByCreatedAt_args = function(args) {
  this.country = null;
  this.categoryId = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
totalk.thrift.TotalkService_getByCreatedAt_args.prototype = {};
totalk.thrift.TotalkService_getByCreatedAt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.country = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByCreatedAt_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByCreatedAt_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.I32, 1);
    output.writeI32(this.country);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 2);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByCreatedAt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [totalk.thrift.Review]);
    }
  }
};
totalk.thrift.TotalkService_getByCreatedAt_result.prototype = {};
totalk.thrift.TotalkService_getByCreatedAt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new totalk.thrift.Review();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByCreatedAt_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByCreatedAt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByPopularity_args = function(args) {
  this.country = null;
  this.categoryId = null;
  this.offset = null;
  this.limit = null;
  this.arg3 = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.arg3 !== undefined && args.arg3 !== null) {
      this.arg3 = args.arg3;
    }
  }
};
totalk.thrift.TotalkService_getByPopularity_args.prototype = {};
totalk.thrift.TotalkService_getByPopularity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.country = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.arg3 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByPopularity_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByPopularity_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.I32, 1);
    output.writeI32(this.country);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 2);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.arg3 !== null && this.arg3 !== undefined) {
    output.writeFieldBegin('arg3', Thrift.Type.I64, 5);
    output.writeI64(this.arg3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByPopularity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [totalk.thrift.Review]);
    }
  }
};
totalk.thrift.TotalkService_getByPopularity_result.prototype = {};
totalk.thrift.TotalkService_getByPopularity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new totalk.thrift.Review();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByPopularity_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByPopularity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getSubscription_args = function(args) {
  this.userId = null;
  this.categoryId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
  }
};
totalk.thrift.TotalkService_getSubscription_args.prototype = {};
totalk.thrift.TotalkService_getSubscription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getSubscription_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getSubscription_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 2);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getSubscription_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [totalk.thrift.Review]);
    }
  }
};
totalk.thrift.TotalkService_getSubscription_result.prototype = {};
totalk.thrift.TotalkService_getSubscription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new totalk.thrift.Review();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getSubscription_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getSubscription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getComments_args = function(args) {
  this.reviewId = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.reviewId !== undefined && args.reviewId !== null) {
      this.reviewId = args.reviewId;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
totalk.thrift.TotalkService_getComments_args.prototype = {};
totalk.thrift.TotalkService_getComments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reviewId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getComments_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getComments_args');
  if (this.reviewId !== null && this.reviewId !== undefined) {
    output.writeFieldBegin('reviewId', Thrift.Type.STRING, 1);
    output.writeString(this.reviewId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getComments_result = function(args) {
  this.success = null;
  this.noReviewException = null;
  if (args instanceof totalk.thrift.NoReviewException) {
    this.noReviewException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [totalk.thrift.Comment]);
    }
    if (args.noReviewException !== undefined && args.noReviewException !== null) {
      this.noReviewException = args.noReviewException;
    }
  }
};
totalk.thrift.TotalkService_getComments_result.prototype = {};
totalk.thrift.TotalkService_getComments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new totalk.thrift.Comment();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.noReviewException = new totalk.thrift.NoReviewException();
        this.noReviewException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getComments_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getComments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.noReviewException !== null && this.noReviewException !== undefined) {
    output.writeFieldBegin('noReviewException', Thrift.Type.STRUCT, 1);
    this.noReviewException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByEntity_args = function(args) {
  this.entityType = null;
  this.entityId = null;
  this.reviewType = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.entityType !== undefined && args.entityType !== null) {
      this.entityType = args.entityType;
    }
    if (args.entityId !== undefined && args.entityId !== null) {
      this.entityId = args.entityId;
    }
    if (args.reviewType !== undefined && args.reviewType !== null) {
      this.reviewType = args.reviewType;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
totalk.thrift.TotalkService_getByEntity_args.prototype = {};
totalk.thrift.TotalkService_getByEntity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.entityType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.reviewType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByEntity_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByEntity_args');
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.I32, 1);
    output.writeI32(this.entityType);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 2);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.reviewType !== null && this.reviewType !== undefined) {
    output.writeFieldBegin('reviewType', Thrift.Type.I32, 3);
    output.writeI32(this.reviewType);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 4);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 5);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_getByEntity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [totalk.thrift.Review]);
    }
  }
};
totalk.thrift.TotalkService_getByEntity_result.prototype = {};
totalk.thrift.TotalkService_getByEntity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new totalk.thrift.Review();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_getByEntity_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_getByEntity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_setVote_args = function(args) {
  this.reviewId = null;
  this.yes = null;
  if (args) {
    if (args.reviewId !== undefined && args.reviewId !== null) {
      this.reviewId = args.reviewId;
    }
    if (args.yes !== undefined && args.yes !== null) {
      this.yes = args.yes;
    }
  }
};
totalk.thrift.TotalkService_setVote_args.prototype = {};
totalk.thrift.TotalkService_setVote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reviewId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.yes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_setVote_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_setVote_args');
  if (this.reviewId !== null && this.reviewId !== undefined) {
    output.writeFieldBegin('reviewId', Thrift.Type.STRING, 1);
    output.writeString(this.reviewId);
    output.writeFieldEnd();
  }
  if (this.yes !== null && this.yes !== undefined) {
    output.writeFieldBegin('yes', Thrift.Type.BOOL, 2);
    output.writeBool(this.yes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_setVote_result = function(args) {
  this.noReviewException = null;
  if (args instanceof totalk.thrift.NoReviewException) {
    this.noReviewException = args;
    return;
  }
  if (args) {
    if (args.noReviewException !== undefined && args.noReviewException !== null) {
      this.noReviewException = args.noReviewException;
    }
  }
};
totalk.thrift.TotalkService_setVote_result.prototype = {};
totalk.thrift.TotalkService_setVote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.noReviewException = new totalk.thrift.NoReviewException();
        this.noReviewException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_setVote_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_setVote_result');
  if (this.noReviewException !== null && this.noReviewException !== undefined) {
    output.writeFieldBegin('noReviewException', Thrift.Type.STRUCT, 1);
    this.noReviewException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_addReview_args = function(args) {
  this.review = null;
  if (args) {
    if (args.review !== undefined && args.review !== null) {
      this.review = new totalk.thrift.Review(args.review);
    }
  }
};
totalk.thrift.TotalkService_addReview_args.prototype = {};
totalk.thrift.TotalkService_addReview_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.review = new totalk.thrift.Review();
        this.review.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_addReview_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_addReview_args');
  if (this.review !== null && this.review !== undefined) {
    output.writeFieldBegin('review', Thrift.Type.STRUCT, 1);
    this.review.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_addReview_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new totalk.thrift.Review(args.success);
    }
  }
};
totalk.thrift.TotalkService_addReview_result.prototype = {};
totalk.thrift.TotalkService_addReview_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new totalk.thrift.Review();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_addReview_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_addReview_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_addComment_args = function(args) {
  this.comment = null;
  if (args) {
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = new totalk.thrift.Comment(args.comment);
    }
  }
};
totalk.thrift.TotalkService_addComment_args.prototype = {};
totalk.thrift.TotalkService_addComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.comment = new totalk.thrift.Comment();
        this.comment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_addComment_args.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_addComment_args');
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRUCT, 1);
    this.comment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkService_addComment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new totalk.thrift.Comment(args.success);
    }
  }
};
totalk.thrift.TotalkService_addComment_result.prototype = {};
totalk.thrift.TotalkService_addComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new totalk.thrift.Comment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.TotalkService_addComment_result.prototype.write = function(output) {
  output.writeStructBegin('TotalkService_addComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.TotalkServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
totalk.thrift.TotalkServiceClient.prototype = {};
totalk.thrift.TotalkServiceClient.prototype.hello = function(arg, callback) {
  this.send_hello(arg, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_hello = function(arg, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:hello', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_hello_args();
  args.arg = arg;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_hello(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_hello = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_hello_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.authenticationRequiredException) {
    throw result.authenticationRequiredException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'hello failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.ping = function(arg, callback) {
  this.send_ping(arg, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_ping = function(arg, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:ping', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_ping_args();
  args.arg = arg;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_ping(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_ping = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_ping_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.authenticationRequiredException) {
    throw result.authenticationRequiredException;
  }
  return;
};
totalk.thrift.TotalkServiceClient.prototype.getReviewById = function(id, callback) {
  this.send_getReviewById(id, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getReviewById = function(id, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getReviewById', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getReviewById_args();
  args.id = id;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getReviewById(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getReviewById = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getReviewById_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.noReviewException) {
    throw result.noReviewException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReviewById failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.getByCreatedAt = function(country, categoryId, offset, limit, callback) {
  this.send_getByCreatedAt(country, categoryId, offset, limit, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getByCreatedAt = function(country, categoryId, offset, limit, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getByCreatedAt', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getByCreatedAt_args();
  args.country = country;
  args.categoryId = categoryId;
  args.offset = offset;
  args.limit = limit;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getByCreatedAt(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getByCreatedAt = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getByCreatedAt_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getByCreatedAt failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.getByPopularity = function(country, categoryId, offset, limit, arg3, callback) {
  this.send_getByPopularity(country, categoryId, offset, limit, arg3, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getByPopularity = function(country, categoryId, offset, limit, arg3, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getByPopularity', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getByPopularity_args();
  args.country = country;
  args.categoryId = categoryId;
  args.offset = offset;
  args.limit = limit;
  args.arg3 = arg3;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getByPopularity(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getByPopularity = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getByPopularity_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getByPopularity failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.getSubscription = function(userId, categoryId, callback) {
  this.send_getSubscription(userId, categoryId, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getSubscription = function(userId, categoryId, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getSubscription', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getSubscription_args();
  args.userId = userId;
  args.categoryId = categoryId;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getSubscription(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getSubscription = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getSubscription_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSubscription failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.getComments = function(reviewId, offset, limit, callback) {
  this.send_getComments(reviewId, offset, limit, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getComments = function(reviewId, offset, limit, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getComments', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getComments_args();
  args.reviewId = reviewId;
  args.offset = offset;
  args.limit = limit;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getComments(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getComments = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getComments_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.noReviewException) {
    throw result.noReviewException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getComments failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.getByEntity = function(entityType, entityId, reviewType, offset, limit, callback) {
  this.send_getByEntity(entityType, entityId, reviewType, offset, limit, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_getByEntity = function(entityType, entityId, reviewType, offset, limit, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:getByEntity', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_getByEntity_args();
  args.entityType = entityType;
  args.entityId = entityId;
  args.reviewType = reviewType;
  args.offset = offset;
  args.limit = limit;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_getByEntity(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_getByEntity = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_getByEntity_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getByEntity failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.setVote = function(reviewId, yes, callback) {
  this.send_setVote(reviewId, yes, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_setVote = function(reviewId, yes, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:setVote', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_setVote_args();
  args.reviewId = reviewId;
  args.yes = yes;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_setVote(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_setVote = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_setVote_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.noReviewException) {
    throw result.noReviewException;
  }
  return;
};
totalk.thrift.TotalkServiceClient.prototype.addReview = function(review, callback) {
  this.send_addReview(review, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_addReview = function(review, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:addReview', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_addReview_args();
  args.review = review;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_addReview(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_addReview = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_addReview_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addReview failed: unknown result';
};
totalk.thrift.TotalkServiceClient.prototype.addComment = function(comment, callback) {
  this.send_addComment(comment, callback); 
};

totalk.thrift.TotalkServiceClient.prototype.send_addComment = function(comment, callback) {
  var seqId = Thrift.AsyncManager.getInstance().getNextSeqId();
  var outTransport = new Thrift.TMemoryOutputTransport();
  var outProtocol = new Thrift.Protocol(outTransport);
  outProtocol.writeMessageBegin('TotalkService:addComment', Thrift.MessageType.CALL, seqId);
  var args = new totalk.thrift.TotalkService_addComment_args();
  args.comment = comment;
  args.write(outProtocol);
  outProtocol.writeMessageEnd();
  var packet = outTransport.getPayload();
  var self = this;
  if (callback) {
    Thrift.AsyncManager.getInstance().put(seqId, function (responsePacket) {
      var inputTransport = new Thrift.TMemoryInputTransport(responsePacket);
      var inputProtocol = new Thrift.Protocol(inputTransport);
      var result = null;
      try {
        result = self.recv_addComment(inputProtocol);
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  }
  this.output.getTransport().write(packet);
  this.output.getTransport().flush();
};

totalk.thrift.TotalkServiceClient.prototype.recv_addComment = function(inputProtocol) {
  var ret = inputProtocol.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(inputProtocol);
    inputProtocol.readMessageEnd();
    throw x;
  }
  var result = new totalk.thrift.TotalkService_addComment_result();
  result.read(inputProtocol);
  inputProtocol.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addComment failed: unknown result';
};
