//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof totalk === 'undefined') {
  totalk = {};
}
if (typeof totalk.thrift === 'undefined') {
  totalk.thrift = {};
}
totalk.thrift.ReviewType = {
  'OPINION' : 0,
  'REVIEW' : 1
};
totalk.thrift.EntityType = {
  'ADV' : 0
};
totalk.thrift.Country = {
  'RU' : 0,
  'CN' : 1
};
totalk.thrift.Comment = function(args) {
  this.id = null;
  this.reviewId = null;
  this.deleted = null;
  this.deletedAt = null;
  this.creatorId = null;
  this.createdAt = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reviewId !== undefined && args.reviewId !== null) {
      this.reviewId = args.reviewId;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.deletedAt !== undefined && args.deletedAt !== null) {
      this.deletedAt = args.deletedAt;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
  }
};
totalk.thrift.Comment.prototype = {};
totalk.thrift.Comment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reviewId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deletedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.Comment.prototype.write = function(output) {
  output.writeStructBegin('Comment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reviewId !== null && this.reviewId !== undefined) {
    output.writeFieldBegin('reviewId', Thrift.Type.STRING, 2);
    output.writeString(this.reviewId);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleted);
    output.writeFieldEnd();
  }
  if (this.deletedAt !== null && this.deletedAt !== undefined) {
    output.writeFieldBegin('deletedAt', Thrift.Type.I64, 4);
    output.writeI64(this.deletedAt);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 5);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 6);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

totalk.thrift.Review = function(args) {
  this.id = null;
  this.type = null;
  this.deleted = null;
  this.deletedAt = null;
  this.entityType = null;
  this.entityId = null;
  this.categoryId = null;
  this.country = null;
  this.creatorId = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.commentsAllowed = null;
  this.title = null;
  this.body = null;
  this._votesYes = null;
  this.votesYes = null;
  this.votesNo = null;
  this.comments = null;
  this.reviewsCount = null;
  this.myVote = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.deletedAt !== undefined && args.deletedAt !== null) {
      this.deletedAt = args.deletedAt;
    }
    if (args.entityType !== undefined && args.entityType !== null) {
      this.entityType = args.entityType;
    }
    if (args.entityId !== undefined && args.entityId !== null) {
      this.entityId = args.entityId;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.commentsAllowed !== undefined && args.commentsAllowed !== null) {
      this.commentsAllowed = args.commentsAllowed;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args._votesYes !== undefined && args._votesYes !== null) {
      this._votesYes = args._votesYes;
    }
    if (args.votesYes !== undefined && args.votesYes !== null) {
      this.votesYes = args.votesYes;
    }
    if (args.votesNo !== undefined && args.votesNo !== null) {
      this.votesNo = args.votesNo;
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = Thrift.copyList(args.comments, [totalk.thrift.Comment]);
    }
    if (args.reviewsCount !== undefined && args.reviewsCount !== null) {
      this.reviewsCount = args.reviewsCount;
    }
    if (args.myVote !== undefined && args.myVote !== null) {
      this.myVote = args.myVote;
    }
  }
};
totalk.thrift.Review.prototype = {};
totalk.thrift.Review.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deletedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.entityType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.country = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.createdAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.updatedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.commentsAllowed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this._votesYes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.votesYes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.votesNo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.comments = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new totalk.thrift.Comment();
          elem6.read(input);
          this.comments.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.reviewsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.myVote = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

totalk.thrift.Review.prototype.write = function(output) {
  output.writeStructBegin('Review');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleted);
    output.writeFieldEnd();
  }
  if (this.deletedAt !== null && this.deletedAt !== undefined) {
    output.writeFieldBegin('deletedAt', Thrift.Type.I64, 4);
    output.writeI64(this.deletedAt);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.I32, 5);
    output.writeI32(this.entityType);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 6);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 7);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.I32, 8);
    output.writeI32(this.country);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 9);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.I64, 10);
    output.writeI64(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.I64, 11);
    output.writeI64(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.commentsAllowed !== null && this.commentsAllowed !== undefined) {
    output.writeFieldBegin('commentsAllowed', Thrift.Type.BOOL, 12);
    output.writeBool(this.commentsAllowed);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 13);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 14);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this._votesYes !== null && this._votesYes !== undefined) {
    output.writeFieldBegin('_votesYes', Thrift.Type.I32, 16);
    output.writeI32(this._votesYes);
    output.writeFieldEnd();
  }
  if (this.votesYes !== null && this.votesYes !== undefined) {
    output.writeFieldBegin('votesYes', Thrift.Type.I64, 21);
    output.writeI64(this.votesYes);
    output.writeFieldEnd();
  }
  if (this.votesNo !== null && this.votesNo !== undefined) {
    output.writeFieldBegin('votesNo', Thrift.Type.I32, 17);
    output.writeI32(this.votesNo);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
    for (var iter7 in this.comments)
    {
      if (this.comments.hasOwnProperty(iter7))
      {
        iter7 = this.comments[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reviewsCount !== null && this.reviewsCount !== undefined) {
    output.writeFieldBegin('reviewsCount', Thrift.Type.I32, 19);
    output.writeI32(this.reviewsCount);
    output.writeFieldEnd();
  }
  if (this.myVote !== null && this.myVote !== undefined) {
    output.writeFieldBegin('myVote', Thrift.Type.BOOL, 20);
    output.writeBool(this.myVote);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

