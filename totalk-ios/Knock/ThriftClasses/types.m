/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"
#import "TAsyncRegister.h"
#import "TMemoryBuffer.h"
#import "TBinaryProtocol.h"
#import "TExceptionRegister.h"


#import "types.h"

@implementation THComment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id reviewId: (NSString *) reviewId deleted: (BOOL) deleted deletedAt: (int64_t) deletedAt creatorId: (NSString *) creatorId createdAt: (NSString *) createdAt
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __reviewId = [reviewId retain_stub];
  __reviewId_isset = YES;
  __deleted = deleted;
  __deleted_isset = YES;
  __deletedAt = deletedAt;
  __deletedAt_isset = YES;
  __creatorId = [creatorId retain_stub];
  __creatorId_isset = YES;
  __createdAt = [createdAt retain_stub];
  __createdAt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewId"])
  {
    __reviewId = [[decoder decodeObjectForKey: @"reviewId"] retain_stub];
    __reviewId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deleted"])
  {
    __deleted = [decoder decodeBoolForKey: @"deleted"];
    __deleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedAt"])
  {
    __deletedAt = [decoder decodeInt64ForKey: @"deletedAt"];
    __deletedAt_isset = YES;
  }
  if ([decoder containsValueForKey: @"creatorId"])
  {
    __creatorId = [[decoder decodeObjectForKey: @"creatorId"] retain_stub];
    __creatorId_isset = YES;
  }
  if ([decoder containsValueForKey: @"createdAt"])
  {
    __createdAt = [[decoder decodeObjectForKey: @"createdAt"] retain_stub];
    __createdAt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__reviewId_isset)
  {
    [encoder encodeObject: __reviewId forKey: @"reviewId"];
  }
  if (__deleted_isset)
  {
    [encoder encodeBool: __deleted forKey: @"deleted"];
  }
  if (__deletedAt_isset)
  {
    [encoder encodeInt64: __deletedAt forKey: @"deletedAt"];
  }
  if (__creatorId_isset)
  {
    [encoder encodeObject: __creatorId forKey: @"creatorId"];
  }
  if (__createdAt_isset)
  {
    [encoder encodeObject: __createdAt forKey: @"createdAt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __reviewId_isset ? 2654435761 : 0;
  if (__reviewId_isset)
  {
    hash = (hash * 31) ^ [__reviewId hash];
  }
  hash = (hash * 31) ^ __deleted_isset ? 2654435761 : 0;
  if (__deleted_isset)
  {
    hash = (hash * 31) ^ [@(__deleted) hash];
  }
  hash = (hash * 31) ^ __deletedAt_isset ? 2654435761 : 0;
  if (__deletedAt_isset)
  {
    hash = (hash * 31) ^ [@(__deletedAt) hash];
  }
  hash = (hash * 31) ^ __creatorId_isset ? 2654435761 : 0;
  if (__creatorId_isset)
  {
    hash = (hash * 31) ^ [__creatorId hash];
  }
  hash = (hash * 31) ^ __createdAt_isset ? 2654435761 : 0;
  if (__createdAt_isset)
  {
    hash = (hash * 31) ^ [__createdAt hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THComment class]]) {
    return NO;
  }
  THComment *other = (THComment *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__reviewId_isset != other->__reviewId_isset) ||
      (__reviewId_isset && ((__reviewId || other->__reviewId) && ![__reviewId isEqual:other->__reviewId]))) {
    return NO;
  }
  if ((__deleted_isset != other->__deleted_isset) ||
      (__deleted_isset && (__deleted != other->__deleted))) {
    return NO;
  }
  if ((__deletedAt_isset != other->__deletedAt_isset) ||
      (__deletedAt_isset && (__deletedAt != other->__deletedAt))) {
    return NO;
  }
  if ((__creatorId_isset != other->__creatorId_isset) ||
      (__creatorId_isset && ((__creatorId || other->__creatorId) && ![__creatorId isEqual:other->__creatorId]))) {
    return NO;
  }
  if ((__createdAt_isset != other->__createdAt_isset) ||
      (__createdAt_isset && ((__createdAt || other->__createdAt) && ![__createdAt isEqual:other->__createdAt]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__reviewId release_stub];
  [__creatorId release_stub];
  [__createdAt release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) reviewId {
  return [[__reviewId retain_stub] autorelease_stub];
}

- (void) setReviewId: (NSString *) reviewId {
  [reviewId retain_stub];
  [__reviewId release_stub];
  __reviewId = reviewId;
  __reviewId_isset = YES;
}

- (BOOL) reviewIdIsSet {
  return __reviewId_isset;
}

- (void) unsetReviewId {
  [__reviewId release_stub];
  __reviewId = nil;
  __reviewId_isset = NO;
}

- (BOOL) deleted {
  return __deleted;
}

- (void) setDeleted: (BOOL) deleted {
  __deleted = deleted;
  __deleted_isset = YES;
}

- (BOOL) deletedIsSet {
  return __deleted_isset;
}

- (void) unsetDeleted {
  __deleted_isset = NO;
}

- (int64_t) deletedAt {
  return __deletedAt;
}

- (void) setDeletedAt: (int64_t) deletedAt {
  __deletedAt = deletedAt;
  __deletedAt_isset = YES;
}

- (BOOL) deletedAtIsSet {
  return __deletedAt_isset;
}

- (void) unsetDeletedAt {
  __deletedAt_isset = NO;
}

- (NSString *) creatorId {
  return [[__creatorId retain_stub] autorelease_stub];
}

- (void) setCreatorId: (NSString *) creatorId {
  [creatorId retain_stub];
  [__creatorId release_stub];
  __creatorId = creatorId;
  __creatorId_isset = YES;
}

- (BOOL) creatorIdIsSet {
  return __creatorId_isset;
}

- (void) unsetCreatorId {
  [__creatorId release_stub];
  __creatorId = nil;
  __creatorId_isset = NO;
}

- (NSString *) createdAt {
  return [[__createdAt retain_stub] autorelease_stub];
}

- (void) setCreatedAt: (NSString *) createdAt {
  [createdAt retain_stub];
  [__createdAt release_stub];
  __createdAt = createdAt;
  __createdAt_isset = YES;
}

- (BOOL) createdAtIsSet {
  return __createdAt_isset;
}

- (void) unsetCreatedAt {
  [__createdAt release_stub];
  __createdAt = nil;
  __createdAt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeletedAt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreatorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreatedAt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Comment"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewId_isset) {
    if (__reviewId != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __reviewId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deleted_isset) {
    [outProtocol writeFieldBeginWithName: @"deleted" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __deleted];
    [outProtocol writeFieldEnd];
  }
  if (__deletedAt_isset) {
    [outProtocol writeFieldBeginWithName: @"deletedAt" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __deletedAt];
    [outProtocol writeFieldEnd];
  }
  if (__creatorId_isset) {
    if (__creatorId != nil) {
      [outProtocol writeFieldBeginWithName: @"creatorId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __creatorId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createdAt_isset) {
    if (__createdAt != nil) {
      [outProtocol writeFieldBeginWithName: @"createdAt" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __createdAt];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THComment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",reviewId:"];
  [ms appendFormat: @"\"%@\"", __reviewId];
  [ms appendString: @",deleted:"];
  [ms appendFormat: @"%i", __deleted];
  [ms appendString: @",deletedAt:"];
  [ms appendFormat: @"%qi", __deletedAt];
  [ms appendString: @",creatorId:"];
  [ms appendFormat: @"\"%@\"", __creatorId];
  [ms appendString: @",createdAt:"];
  [ms appendFormat: @"\"%@\"", __createdAt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation THReview

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id type: (int) type deleted: (BOOL) deleted deletedAt: (int64_t) deletedAt entityType: (int) entityType entityId: (NSString *) entityId categoryId: (int32_t) categoryId country: (int) country creatorId: (NSString *) creatorId createdAt: (int64_t) createdAt updatedAt: (int64_t) updatedAt commentsAllowed: (BOOL) commentsAllowed title: (NSString *) title body: (NSString *) body _votesYes: (int32_t) _votesYes votesYes: (int64_t) votesYes votesNo: (int32_t) votesNo comments: (NSMutableArray *) comments reviewsCount: (int32_t) reviewsCount myVote: (BOOL) myVote
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __deleted = deleted;
  __deleted_isset = YES;
  __deletedAt = deletedAt;
  __deletedAt_isset = YES;
  __entityType = entityType;
  __entityType_isset = YES;
  __entityId = [entityId retain_stub];
  __entityId_isset = YES;
  __categoryId = categoryId;
  __categoryId_isset = YES;
  __country = country;
  __country_isset = YES;
  __creatorId = [creatorId retain_stub];
  __creatorId_isset = YES;
  __createdAt = createdAt;
  __createdAt_isset = YES;
  __updatedAt = updatedAt;
  __updatedAt_isset = YES;
  __commentsAllowed = commentsAllowed;
  __commentsAllowed_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  ___votesYes = _votesYes;
  ___votesYes_isset = YES;
  __votesYes = votesYes;
  __votesYes_isset = YES;
  __votesNo = votesNo;
  __votesNo_isset = YES;
  __comments = [comments retain_stub];
  __comments_isset = YES;
  __reviewsCount = reviewsCount;
  __reviewsCount_isset = YES;
  __myVote = myVote;
  __myVote_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"deleted"])
  {
    __deleted = [decoder decodeBoolForKey: @"deleted"];
    __deleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedAt"])
  {
    __deletedAt = [decoder decodeInt64ForKey: @"deletedAt"];
    __deletedAt_isset = YES;
  }
  if ([decoder containsValueForKey: @"entityType"])
  {
    __entityType = [decoder decodeIntForKey: @"entityType"];
    __entityType_isset = YES;
  }
  if ([decoder containsValueForKey: @"entityId"])
  {
    __entityId = [[decoder decodeObjectForKey: @"entityId"] retain_stub];
    __entityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [decoder decodeIntForKey: @"country"];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"creatorId"])
  {
    __creatorId = [[decoder decodeObjectForKey: @"creatorId"] retain_stub];
    __creatorId_isset = YES;
  }
  if ([decoder containsValueForKey: @"createdAt"])
  {
    __createdAt = [decoder decodeInt64ForKey: @"createdAt"];
    __createdAt_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatedAt"])
  {
    __updatedAt = [decoder decodeInt64ForKey: @"updatedAt"];
    __updatedAt_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentsAllowed"])
  {
    __commentsAllowed = [decoder decodeBoolForKey: @"commentsAllowed"];
    __commentsAllowed_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"_votesYes"])
  {
    ___votesYes = [decoder decodeInt32ForKey: @"_votesYes"];
    ___votesYes_isset = YES;
  }
  if ([decoder containsValueForKey: @"votesYes"])
  {
    __votesYes = [decoder decodeInt64ForKey: @"votesYes"];
    __votesYes_isset = YES;
  }
  if ([decoder containsValueForKey: @"votesNo"])
  {
    __votesNo = [decoder decodeInt32ForKey: @"votesNo"];
    __votesNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"comments"])
  {
    __comments = [[decoder decodeObjectForKey: @"comments"] retain_stub];
    __comments_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewsCount"])
  {
    __reviewsCount = [decoder decodeInt32ForKey: @"reviewsCount"];
    __reviewsCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"myVote"])
  {
    __myVote = [decoder decodeBoolForKey: @"myVote"];
    __myVote_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__deleted_isset)
  {
    [encoder encodeBool: __deleted forKey: @"deleted"];
  }
  if (__deletedAt_isset)
  {
    [encoder encodeInt64: __deletedAt forKey: @"deletedAt"];
  }
  if (__entityType_isset)
  {
    [encoder encodeInt: __entityType forKey: @"entityType"];
  }
  if (__entityId_isset)
  {
    [encoder encodeObject: __entityId forKey: @"entityId"];
  }
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
  if (__country_isset)
  {
    [encoder encodeInt: __country forKey: @"country"];
  }
  if (__creatorId_isset)
  {
    [encoder encodeObject: __creatorId forKey: @"creatorId"];
  }
  if (__createdAt_isset)
  {
    [encoder encodeInt64: __createdAt forKey: @"createdAt"];
  }
  if (__updatedAt_isset)
  {
    [encoder encodeInt64: __updatedAt forKey: @"updatedAt"];
  }
  if (__commentsAllowed_isset)
  {
    [encoder encodeBool: __commentsAllowed forKey: @"commentsAllowed"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (___votesYes_isset)
  {
    [encoder encodeInt32: ___votesYes forKey: @"_votesYes"];
  }
  if (__votesYes_isset)
  {
    [encoder encodeInt64: __votesYes forKey: @"votesYes"];
  }
  if (__votesNo_isset)
  {
    [encoder encodeInt32: __votesNo forKey: @"votesNo"];
  }
  if (__comments_isset)
  {
    [encoder encodeObject: __comments forKey: @"comments"];
  }
  if (__reviewsCount_isset)
  {
    [encoder encodeInt32: __reviewsCount forKey: @"reviewsCount"];
  }
  if (__myVote_isset)
  {
    [encoder encodeBool: __myVote forKey: @"myVote"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __deleted_isset ? 2654435761 : 0;
  if (__deleted_isset)
  {
    hash = (hash * 31) ^ [@(__deleted) hash];
  }
  hash = (hash * 31) ^ __deletedAt_isset ? 2654435761 : 0;
  if (__deletedAt_isset)
  {
    hash = (hash * 31) ^ [@(__deletedAt) hash];
  }
  hash = (hash * 31) ^ __entityType_isset ? 2654435761 : 0;
  if (__entityType_isset)
  {
    hash = (hash * 31) ^ [@(__entityType) hash];
  }
  hash = (hash * 31) ^ __entityId_isset ? 2654435761 : 0;
  if (__entityId_isset)
  {
    hash = (hash * 31) ^ [__entityId hash];
  }
  hash = (hash * 31) ^ __categoryId_isset ? 2654435761 : 0;
  if (__categoryId_isset)
  {
    hash = (hash * 31) ^ [@(__categoryId) hash];
  }
  hash = (hash * 31) ^ __country_isset ? 2654435761 : 0;
  if (__country_isset)
  {
    hash = (hash * 31) ^ [@(__country) hash];
  }
  hash = (hash * 31) ^ __creatorId_isset ? 2654435761 : 0;
  if (__creatorId_isset)
  {
    hash = (hash * 31) ^ [__creatorId hash];
  }
  hash = (hash * 31) ^ __createdAt_isset ? 2654435761 : 0;
  if (__createdAt_isset)
  {
    hash = (hash * 31) ^ [@(__createdAt) hash];
  }
  hash = (hash * 31) ^ __updatedAt_isset ? 2654435761 : 0;
  if (__updatedAt_isset)
  {
    hash = (hash * 31) ^ [@(__updatedAt) hash];
  }
  hash = (hash * 31) ^ __commentsAllowed_isset ? 2654435761 : 0;
  if (__commentsAllowed_isset)
  {
    hash = (hash * 31) ^ [@(__commentsAllowed) hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ ___votesYes_isset ? 2654435761 : 0;
  if (___votesYes_isset)
  {
    hash = (hash * 31) ^ [@(___votesYes) hash];
  }
  hash = (hash * 31) ^ __votesYes_isset ? 2654435761 : 0;
  if (__votesYes_isset)
  {
    hash = (hash * 31) ^ [@(__votesYes) hash];
  }
  hash = (hash * 31) ^ __votesNo_isset ? 2654435761 : 0;
  if (__votesNo_isset)
  {
    hash = (hash * 31) ^ [@(__votesNo) hash];
  }
  hash = (hash * 31) ^ __comments_isset ? 2654435761 : 0;
  if (__comments_isset)
  {
    hash = (hash * 31) ^ [__comments hash];
  }
  hash = (hash * 31) ^ __reviewsCount_isset ? 2654435761 : 0;
  if (__reviewsCount_isset)
  {
    hash = (hash * 31) ^ [@(__reviewsCount) hash];
  }
  hash = (hash * 31) ^ __myVote_isset ? 2654435761 : 0;
  if (__myVote_isset)
  {
    hash = (hash * 31) ^ [@(__myVote) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THReview class]]) {
    return NO;
  }
  THReview *other = (THReview *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__deleted_isset != other->__deleted_isset) ||
      (__deleted_isset && (__deleted != other->__deleted))) {
    return NO;
  }
  if ((__deletedAt_isset != other->__deletedAt_isset) ||
      (__deletedAt_isset && (__deletedAt != other->__deletedAt))) {
    return NO;
  }
  if ((__entityType_isset != other->__entityType_isset) ||
      (__entityType_isset && (__entityType != other->__entityType))) {
    return NO;
  }
  if ((__entityId_isset != other->__entityId_isset) ||
      (__entityId_isset && ((__entityId || other->__entityId) && ![__entityId isEqual:other->__entityId]))) {
    return NO;
  }
  if ((__categoryId_isset != other->__categoryId_isset) ||
      (__categoryId_isset && (__categoryId != other->__categoryId))) {
    return NO;
  }
  if ((__country_isset != other->__country_isset) ||
      (__country_isset && (__country != other->__country))) {
    return NO;
  }
  if ((__creatorId_isset != other->__creatorId_isset) ||
      (__creatorId_isset && ((__creatorId || other->__creatorId) && ![__creatorId isEqual:other->__creatorId]))) {
    return NO;
  }
  if ((__createdAt_isset != other->__createdAt_isset) ||
      (__createdAt_isset && (__createdAt != other->__createdAt))) {
    return NO;
  }
  if ((__updatedAt_isset != other->__updatedAt_isset) ||
      (__updatedAt_isset && (__updatedAt != other->__updatedAt))) {
    return NO;
  }
  if ((__commentsAllowed_isset != other->__commentsAllowed_isset) ||
      (__commentsAllowed_isset && (__commentsAllowed != other->__commentsAllowed))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((___votesYes_isset != other->___votesYes_isset) ||
      (___votesYes_isset && (___votesYes != other->___votesYes))) {
    return NO;
  }
  if ((__votesYes_isset != other->__votesYes_isset) ||
      (__votesYes_isset && (__votesYes != other->__votesYes))) {
    return NO;
  }
  if ((__votesNo_isset != other->__votesNo_isset) ||
      (__votesNo_isset && (__votesNo != other->__votesNo))) {
    return NO;
  }
  if ((__comments_isset != other->__comments_isset) ||
      (__comments_isset && ((__comments || other->__comments) && ![__comments isEqual:other->__comments]))) {
    return NO;
  }
  if ((__reviewsCount_isset != other->__reviewsCount_isset) ||
      (__reviewsCount_isset && (__reviewsCount != other->__reviewsCount))) {
    return NO;
  }
  if ((__myVote_isset != other->__myVote_isset) ||
      (__myVote_isset && (__myVote != other->__myVote))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__entityId release_stub];
  [__creatorId release_stub];
  [__title release_stub];
  [__body release_stub];
  [__comments release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (BOOL) deleted {
  return __deleted;
}

- (void) setDeleted: (BOOL) deleted {
  __deleted = deleted;
  __deleted_isset = YES;
}

- (BOOL) deletedIsSet {
  return __deleted_isset;
}

- (void) unsetDeleted {
  __deleted_isset = NO;
}

- (int64_t) deletedAt {
  return __deletedAt;
}

- (void) setDeletedAt: (int64_t) deletedAt {
  __deletedAt = deletedAt;
  __deletedAt_isset = YES;
}

- (BOOL) deletedAtIsSet {
  return __deletedAt_isset;
}

- (void) unsetDeletedAt {
  __deletedAt_isset = NO;
}

- (int) entityType {
  return __entityType;
}

- (void) setEntityType: (int) entityType {
  __entityType = entityType;
  __entityType_isset = YES;
}

- (BOOL) entityTypeIsSet {
  return __entityType_isset;
}

- (void) unsetEntityType {
  __entityType_isset = NO;
}

- (NSString *) entityId {
  return [[__entityId retain_stub] autorelease_stub];
}

- (void) setEntityId: (NSString *) entityId {
  [entityId retain_stub];
  [__entityId release_stub];
  __entityId = entityId;
  __entityId_isset = YES;
}

- (BOOL) entityIdIsSet {
  return __entityId_isset;
}

- (void) unsetEntityId {
  [__entityId release_stub];
  __entityId = nil;
  __entityId_isset = NO;
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (int) country {
  return __country;
}

- (void) setCountry: (int) country {
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  __country_isset = NO;
}

- (NSString *) creatorId {
  return [[__creatorId retain_stub] autorelease_stub];
}

- (void) setCreatorId: (NSString *) creatorId {
  [creatorId retain_stub];
  [__creatorId release_stub];
  __creatorId = creatorId;
  __creatorId_isset = YES;
}

- (BOOL) creatorIdIsSet {
  return __creatorId_isset;
}

- (void) unsetCreatorId {
  [__creatorId release_stub];
  __creatorId = nil;
  __creatorId_isset = NO;
}

- (int64_t) createdAt {
  return __createdAt;
}

- (void) setCreatedAt: (int64_t) createdAt {
  __createdAt = createdAt;
  __createdAt_isset = YES;
}

- (BOOL) createdAtIsSet {
  return __createdAt_isset;
}

- (void) unsetCreatedAt {
  __createdAt_isset = NO;
}

- (int64_t) updatedAt {
  return __updatedAt;
}

- (void) setUpdatedAt: (int64_t) updatedAt {
  __updatedAt = updatedAt;
  __updatedAt_isset = YES;
}

- (BOOL) updatedAtIsSet {
  return __updatedAt_isset;
}

- (void) unsetUpdatedAt {
  __updatedAt_isset = NO;
}

- (BOOL) commentsAllowed {
  return __commentsAllowed;
}

- (void) setCommentsAllowed: (BOOL) commentsAllowed {
  __commentsAllowed = commentsAllowed;
  __commentsAllowed_isset = YES;
}

- (BOOL) commentsAllowedIsSet {
  return __commentsAllowed_isset;
}

- (void) unsetCommentsAllowed {
  __commentsAllowed_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (int32_t) _votesYes {
  return ___votesYes;
}

- (void) set_votesYes: (int32_t) _votesYes {
  ___votesYes = _votesYes;
  ___votesYes_isset = YES;
}

- (BOOL) _votesYesIsSet {
  return ___votesYes_isset;
}

- (void) unset_votesYes {
  ___votesYes_isset = NO;
}

- (int64_t) votesYes {
  return __votesYes;
}

- (void) setVotesYes: (int64_t) votesYes {
  __votesYes = votesYes;
  __votesYes_isset = YES;
}

- (BOOL) votesYesIsSet {
  return __votesYes_isset;
}

- (void) unsetVotesYes {
  __votesYes_isset = NO;
}

- (int32_t) votesNo {
  return __votesNo;
}

- (void) setVotesNo: (int32_t) votesNo {
  __votesNo = votesNo;
  __votesNo_isset = YES;
}

- (BOOL) votesNoIsSet {
  return __votesNo_isset;
}

- (void) unsetVotesNo {
  __votesNo_isset = NO;
}

- (NSMutableArray *) comments {
  return [[__comments retain_stub] autorelease_stub];
}

- (void) setComments: (NSMutableArray *) comments {
  [comments retain_stub];
  [__comments release_stub];
  __comments = comments;
  __comments_isset = YES;
}

- (BOOL) commentsIsSet {
  return __comments_isset;
}

- (void) unsetComments {
  [__comments release_stub];
  __comments = nil;
  __comments_isset = NO;
}

- (int32_t) reviewsCount {
  return __reviewsCount;
}

- (void) setReviewsCount: (int32_t) reviewsCount {
  __reviewsCount = reviewsCount;
  __reviewsCount_isset = YES;
}

- (BOOL) reviewsCountIsSet {
  return __reviewsCount_isset;
}

- (void) unsetReviewsCount {
  __reviewsCount_isset = NO;
}

- (BOOL) myVote {
  return __myVote;
}

- (void) setMyVote: (BOOL) myVote {
  __myVote = myVote;
  __myVote_isset = YES;
}

- (BOOL) myVoteIsSet {
  return __myVote_isset;
}

- (void) unsetMyVote {
  __myVote_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeletedAt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setEntityType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEntityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreatorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreatedAt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdatedAt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCommentsAllowed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_votesYes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setVotesYes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVotesNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            THComment *_elem2 = [[THComment alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setComments: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReviewsCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setMyVote: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Review"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__deleted_isset) {
    [outProtocol writeFieldBeginWithName: @"deleted" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __deleted];
    [outProtocol writeFieldEnd];
  }
  if (__deletedAt_isset) {
    [outProtocol writeFieldBeginWithName: @"deletedAt" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __deletedAt];
    [outProtocol writeFieldEnd];
  }
  if (__entityType_isset) {
    [outProtocol writeFieldBeginWithName: @"entityType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __entityType];
    [outProtocol writeFieldEnd];
  }
  if (__entityId_isset) {
    if (__entityId != nil) {
      [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __entityId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  if (__country_isset) {
    [outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __country];
    [outProtocol writeFieldEnd];
  }
  if (__creatorId_isset) {
    if (__creatorId != nil) {
      [outProtocol writeFieldBeginWithName: @"creatorId" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __creatorId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createdAt_isset) {
    [outProtocol writeFieldBeginWithName: @"createdAt" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __createdAt];
    [outProtocol writeFieldEnd];
  }
  if (__updatedAt_isset) {
    [outProtocol writeFieldBeginWithName: @"updatedAt" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __updatedAt];
    [outProtocol writeFieldEnd];
  }
  if (__commentsAllowed_isset) {
    [outProtocol writeFieldBeginWithName: @"commentsAllowed" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __commentsAllowed];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (___votesYes_isset) {
    [outProtocol writeFieldBeginWithName: @"_votesYes" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: ___votesYes];
    [outProtocol writeFieldEnd];
  }
  if (__votesYes_isset) {
    [outProtocol writeFieldBeginWithName: @"votesYes" type: TType_I64 fieldID: 21];
    [outProtocol writeI64: __votesYes];
    [outProtocol writeFieldEnd];
  }
  if (__votesNo_isset) {
    [outProtocol writeFieldBeginWithName: @"votesNo" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __votesNo];
    [outProtocol writeFieldEnd];
  }
  if (__comments_isset) {
    if (__comments != nil) {
      [outProtocol writeFieldBeginWithName: @"comments" type: TType_LIST fieldID: 18];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__comments count]];
        int idx4;
        for (idx4 = 0; idx4 < [(NSArray *)__comments count]; idx4++)
        {
          [[__comments objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewsCount_isset) {
    [outProtocol writeFieldBeginWithName: @"reviewsCount" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __reviewsCount];
    [outProtocol writeFieldEnd];
  }
  if (__myVote_isset) {
    [outProtocol writeFieldBeginWithName: @"myVote" type: TType_BOOL fieldID: 20];
    [outProtocol writeBool: __myVote];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THReview("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",deleted:"];
  [ms appendFormat: @"%i", __deleted];
  [ms appendString: @",deletedAt:"];
  [ms appendFormat: @"%qi", __deletedAt];
  [ms appendString: @",entityType:"];
  [ms appendFormat: @"%i", __entityType];
  [ms appendString: @",entityId:"];
  [ms appendFormat: @"\"%@\"", __entityId];
  [ms appendString: @",categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @",country:"];
  [ms appendFormat: @"%i", __country];
  [ms appendString: @",creatorId:"];
  [ms appendFormat: @"\"%@\"", __creatorId];
  [ms appendString: @",createdAt:"];
  [ms appendFormat: @"%qi", __createdAt];
  [ms appendString: @",updatedAt:"];
  [ms appendFormat: @"%qi", __updatedAt];
  [ms appendString: @",commentsAllowed:"];
  [ms appendFormat: @"%i", __commentsAllowed];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",_votesYes:"];
  [ms appendFormat: @"%i", ___votesYes];
  [ms appendString: @",votesYes:"];
  [ms appendFormat: @"%qi", __votesYes];
  [ms appendString: @",votesNo:"];
  [ms appendFormat: @"%i", __votesNo];
  [ms appendString: @",comments:"];
  [ms appendFormat: @"%@", __comments];
  [ms appendString: @",reviewsCount:"];
  [ms appendFormat: @"%i", __reviewsCount];
  [ms appendString: @",myVote:"];
  [ms appendFormat: @"%i", __myVote];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation THtypesConstants
+ (void) initialize {
}
@end

