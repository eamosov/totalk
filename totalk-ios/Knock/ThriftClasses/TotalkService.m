/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"
#import "TAsyncRegister.h"
#import "TMemoryBuffer.h"
#import "TBinaryProtocol.h"
#import "TExceptionRegister.h"

#import "types.h"
#import "exceptions.h"

#import "TotalkService.h"


@implementation THTotalkServiceConstants
+ (void) initialize {
}
@end

@interface THTotalkServicehello_args : NSObject <TBase, NSCoding> {
  NSString * __arg;

  BOOL __arg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=arg, setter=setArg:) NSString * arg;
#endif

- (id) init;
- (id) initWithArg: (NSString *) arg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) arg;
- (void) setArg: (NSString *) arg;
#endif
- (BOOL) argIsSet;

@end

@implementation THTotalkServicehello_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArg: (NSString *) arg
{
  self = [super init];
  __arg = [arg retain_stub];
  __arg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"arg"])
  {
    __arg = [[decoder decodeObjectForKey: @"arg"] retain_stub];
    __arg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__arg_isset)
  {
    [encoder encodeObject: __arg forKey: @"arg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __arg_isset ? 2654435761 : 0;
  if (__arg_isset)
  {
    hash = (hash * 31) ^ [__arg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicehello_args class]]) {
    return NO;
  }
  THTotalkServicehello_args *other = (THTotalkServicehello_args *)anObject;
  if ((__arg_isset != other->__arg_isset) ||
      (__arg_isset && ((__arg || other->__arg) && ![__arg isEqual:other->__arg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__arg release_stub];
  [super dealloc_stub];
}

- (NSString *) arg {
  return [[__arg retain_stub] autorelease_stub];
}

- (void) setArg: (NSString *) arg {
  [arg retain_stub];
  [__arg release_stub];
  __arg = arg;
  __arg_isset = YES;
}

- (BOOL) argIsSet {
  return __arg_isset;
}

- (void) unsetArg {
  [__arg release_stub];
  __arg = nil;
  __arg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"hello_args"];
  if (__arg_isset) {
    if (__arg != nil) {
      [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __arg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THhello_args("];
  [ms appendString: @"arg:"];
  [ms appendFormat: @"\"%@\"", __arg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceHello_result : NSObject <TBase, NSCoding> {
  NSString * __success;
  AuthenticationRequiredException * __authenticationRequiredException;

  BOOL __success_isset;
  BOOL __authenticationRequiredException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=authenticationRequiredException, setter=setAuthenticationRequiredException:) AuthenticationRequiredException * authenticationRequiredException;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success authenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthenticationRequiredException *) authenticationRequiredException;
- (void) setAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException;
#endif
- (BOOL) authenticationRequiredExceptionIsSet;

@end

@implementation THTotalkServiceHello_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success authenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __authenticationRequiredException = [authenticationRequiredException retain_stub];
  __authenticationRequiredException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"authenticationRequiredException"])
  {
    __authenticationRequiredException = [[decoder decodeObjectForKey: @"authenticationRequiredException"] retain_stub];
    __authenticationRequiredException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__authenticationRequiredException_isset)
  {
    [encoder encodeObject: __authenticationRequiredException forKey: @"authenticationRequiredException"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __authenticationRequiredException_isset ? 2654435761 : 0;
  if (__authenticationRequiredException_isset)
  {
    hash = (hash * 31) ^ [__authenticationRequiredException hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceHello_result class]]) {
    return NO;
  }
  THTotalkServiceHello_result *other = (THTotalkServiceHello_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__authenticationRequiredException_isset != other->__authenticationRequiredException_isset) ||
      (__authenticationRequiredException_isset && ((__authenticationRequiredException || other->__authenticationRequiredException) && ![__authenticationRequiredException isEqual:other->__authenticationRequiredException]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__authenticationRequiredException release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthenticationRequiredException *) authenticationRequiredException {
  return [[__authenticationRequiredException retain_stub] autorelease_stub];
}

- (void) setAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException {
  [authenticationRequiredException retain_stub];
  [__authenticationRequiredException release_stub];
  __authenticationRequiredException = authenticationRequiredException;
  __authenticationRequiredException_isset = YES;
}

- (BOOL) authenticationRequiredExceptionIsSet {
  return __authenticationRequiredException_isset;
}

- (void) unsetAuthenticationRequiredException {
  [__authenticationRequiredException release_stub];
  __authenticationRequiredException = nil;
  __authenticationRequiredException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationRequiredException *fieldValue = [[AuthenticationRequiredException alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthenticationRequiredException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Hello_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__authenticationRequiredException_isset) {
    if (__authenticationRequiredException != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationRequiredException" type: TType_STRUCT fieldID: 1];
      [__authenticationRequiredException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THHello_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",authenticationRequiredException:"];
  [ms appendFormat: @"%@", __authenticationRequiredException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceping_args : NSObject <TBase, NSCoding> {
  NSString * __arg;

  BOOL __arg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=arg, setter=setArg:) NSString * arg;
#endif

- (id) init;
- (id) initWithArg: (NSString *) arg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) arg;
- (void) setArg: (NSString *) arg;
#endif
- (BOOL) argIsSet;

@end

@implementation THTotalkServiceping_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArg: (NSString *) arg
{
  self = [super init];
  __arg = [arg retain_stub];
  __arg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"arg"])
  {
    __arg = [[decoder decodeObjectForKey: @"arg"] retain_stub];
    __arg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__arg_isset)
  {
    [encoder encodeObject: __arg forKey: @"arg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __arg_isset ? 2654435761 : 0;
  if (__arg_isset)
  {
    hash = (hash * 31) ^ [__arg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceping_args class]]) {
    return NO;
  }
  THTotalkServiceping_args *other = (THTotalkServiceping_args *)anObject;
  if ((__arg_isset != other->__arg_isset) ||
      (__arg_isset && ((__arg || other->__arg) && ![__arg isEqual:other->__arg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__arg release_stub];
  [super dealloc_stub];
}

- (NSString *) arg {
  return [[__arg retain_stub] autorelease_stub];
}

- (void) setArg: (NSString *) arg {
  [arg retain_stub];
  [__arg release_stub];
  __arg = arg;
  __arg_isset = YES;
}

- (BOOL) argIsSet {
  return __arg_isset;
}

- (void) unsetArg {
  [__arg release_stub];
  __arg = nil;
  __arg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (__arg_isset) {
    if (__arg != nil) {
      [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __arg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THping_args("];
  [ms appendString: @"arg:"];
  [ms appendFormat: @"\"%@\"", __arg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicePing_result : NSObject <TBase, NSCoding> {
  AuthenticationRequiredException * __authenticationRequiredException;

  BOOL __authenticationRequiredException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authenticationRequiredException, setter=setAuthenticationRequiredException:) AuthenticationRequiredException * authenticationRequiredException;
#endif

- (id) init;
- (id) initWithAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationRequiredException *) authenticationRequiredException;
- (void) setAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException;
#endif
- (BOOL) authenticationRequiredExceptionIsSet;

@end

@implementation THTotalkServicePing_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException
{
  self = [super init];
  __authenticationRequiredException = [authenticationRequiredException retain_stub];
  __authenticationRequiredException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authenticationRequiredException"])
  {
    __authenticationRequiredException = [[decoder decodeObjectForKey: @"authenticationRequiredException"] retain_stub];
    __authenticationRequiredException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authenticationRequiredException_isset)
  {
    [encoder encodeObject: __authenticationRequiredException forKey: @"authenticationRequiredException"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authenticationRequiredException_isset ? 2654435761 : 0;
  if (__authenticationRequiredException_isset)
  {
    hash = (hash * 31) ^ [__authenticationRequiredException hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicePing_result class]]) {
    return NO;
  }
  THTotalkServicePing_result *other = (THTotalkServicePing_result *)anObject;
  if ((__authenticationRequiredException_isset != other->__authenticationRequiredException_isset) ||
      (__authenticationRequiredException_isset && ((__authenticationRequiredException || other->__authenticationRequiredException) && ![__authenticationRequiredException isEqual:other->__authenticationRequiredException]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authenticationRequiredException release_stub];
  [super dealloc_stub];
}

- (AuthenticationRequiredException *) authenticationRequiredException {
  return [[__authenticationRequiredException retain_stub] autorelease_stub];
}

- (void) setAuthenticationRequiredException: (AuthenticationRequiredException *) authenticationRequiredException {
  [authenticationRequiredException retain_stub];
  [__authenticationRequiredException release_stub];
  __authenticationRequiredException = authenticationRequiredException;
  __authenticationRequiredException_isset = YES;
}

- (BOOL) authenticationRequiredExceptionIsSet {
  return __authenticationRequiredException_isset;
}

- (void) unsetAuthenticationRequiredException {
  [__authenticationRequiredException release_stub];
  __authenticationRequiredException = nil;
  __authenticationRequiredException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationRequiredException *fieldValue = [[AuthenticationRequiredException alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthenticationRequiredException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  if (__authenticationRequiredException_isset) {
    if (__authenticationRequiredException != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationRequiredException" type: TType_STRUCT fieldID: 1];
      [__authenticationRequiredException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THPing_result("];
  [ms appendString: @"authenticationRequiredException:"];
  [ms appendFormat: @"%@", __authenticationRequiredException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetReviewById_args : NSObject <TBase, NSCoding> {
  NSString * __id;

  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) NSString * id;
#endif

- (id) init;
- (id) initWithId: (NSString *) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) id;
- (void) setId: (NSString *) id;
#endif
- (BOOL) idIsSet;

@end

@implementation THTotalkServicegetReviewById_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetReviewById_args class]]) {
    return NO;
  }
  THTotalkServicegetReviewById_args *other = (THTotalkServicegetReviewById_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getReviewById_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetReviewById_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetReviewById_result : NSObject <TBase, NSCoding> {
  THReview * __success;
  NoReviewException * __noReviewException;

  BOOL __success_isset;
  BOOL __noReviewException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) THReview * success;
@property (nonatomic, retain, getter=noReviewException, setter=setNoReviewException:) NoReviewException * noReviewException;
#endif

- (id) init;
- (id) initWithSuccess: (THReview *) success noReviewException: (NoReviewException *) noReviewException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (THReview *) success;
- (void) setSuccess: (THReview *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (NoReviewException *) noReviewException;
- (void) setNoReviewException: (NoReviewException *) noReviewException;
#endif
- (BOOL) noReviewExceptionIsSet;

@end

@implementation THTotalkServiceGetReviewById_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (THReview *) success noReviewException: (NoReviewException *) noReviewException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __noReviewException = [noReviewException retain_stub];
  __noReviewException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"noReviewException"])
  {
    __noReviewException = [[decoder decodeObjectForKey: @"noReviewException"] retain_stub];
    __noReviewException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__noReviewException_isset)
  {
    [encoder encodeObject: __noReviewException forKey: @"noReviewException"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __noReviewException_isset ? 2654435761 : 0;
  if (__noReviewException_isset)
  {
    hash = (hash * 31) ^ [__noReviewException hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetReviewById_result class]]) {
    return NO;
  }
  THTotalkServiceGetReviewById_result *other = (THTotalkServiceGetReviewById_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__noReviewException_isset != other->__noReviewException_isset) ||
      (__noReviewException_isset && ((__noReviewException || other->__noReviewException) && ![__noReviewException isEqual:other->__noReviewException]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__noReviewException release_stub];
  [super dealloc_stub];
}

- (THReview *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (THReview *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (NoReviewException *) noReviewException {
  return [[__noReviewException retain_stub] autorelease_stub];
}

- (void) setNoReviewException: (NoReviewException *) noReviewException {
  [noReviewException retain_stub];
  [__noReviewException release_stub];
  __noReviewException = noReviewException;
  __noReviewException_isset = YES;
}

- (BOOL) noReviewExceptionIsSet {
  return __noReviewException_isset;
}

- (void) unsetNoReviewException {
  [__noReviewException release_stub];
  __noReviewException = nil;
  __noReviewException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          THReview *fieldValue = [[THReview alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          NoReviewException *fieldValue = [[NoReviewException alloc] init];
          [fieldValue read: inProtocol];
          [self setNoReviewException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReviewById_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__noReviewException_isset) {
    if (__noReviewException != nil) {
      [outProtocol writeFieldBeginWithName: @"noReviewException" type: TType_STRUCT fieldID: 1];
      [__noReviewException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetReviewById_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",noReviewException:"];
  [ms appendFormat: @"%@", __noReviewException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetByCreatedAt_args : NSObject <TBase, NSCoding> {
  int __country;
  int32_t __categoryId;
  int32_t __offset;
  int32_t __limit;

  BOOL __country_isset;
  BOOL __categoryId_isset;
  BOOL __offset_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=country, setter=setCountry:) int country;
@property (nonatomic, getter=categoryId, setter=setCategoryId:) int32_t categoryId;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
@property (nonatomic, getter=limit, setter=setLimit:) int32_t limit;
#endif

- (id) init;
- (id) initWithCountry: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) country;
- (void) setCountry: (int) country;
#endif
- (BOOL) countryIsSet;

#if !__has_feature(objc_arc)
- (int32_t) categoryId;
- (void) setCategoryId: (int32_t) categoryId;
#endif
- (BOOL) categoryIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

#if !__has_feature(objc_arc)
- (int32_t) limit;
- (void) setLimit: (int32_t) limit;
#endif
- (BOOL) limitIsSet;

@end

@implementation THTotalkServicegetByCreatedAt_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCountry: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit
{
  self = [super init];
  __country = country;
  __country_isset = YES;
  __categoryId = categoryId;
  __categoryId_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [decoder decodeIntForKey: @"country"];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__country_isset)
  {
    [encoder encodeInt: __country forKey: @"country"];
  }
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __country_isset ? 2654435761 : 0;
  if (__country_isset)
  {
    hash = (hash * 31) ^ [@(__country) hash];
  }
  hash = (hash * 31) ^ __categoryId_isset ? 2654435761 : 0;
  if (__categoryId_isset)
  {
    hash = (hash * 31) ^ [@(__categoryId) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetByCreatedAt_args class]]) {
    return NO;
  }
  THTotalkServicegetByCreatedAt_args *other = (THTotalkServicegetByCreatedAt_args *)anObject;
  if ((__country_isset != other->__country_isset) ||
      (__country_isset && (__country != other->__country))) {
    return NO;
  }
  if ((__categoryId_isset != other->__categoryId_isset) ||
      (__categoryId_isset && (__categoryId != other->__categoryId))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) country {
  return __country;
}

- (void) setCountry: (int) country {
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  __country_isset = NO;
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getByCreatedAt_args"];
  if (__country_isset) {
    [outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __country];
    [outProtocol writeFieldEnd];
  }
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetByCreatedAt_args("];
  [ms appendString: @"country:"];
  [ms appendFormat: @"%i", __country];
  [ms appendString: @",categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetByCreatedAt_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceGetByCreatedAt_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetByCreatedAt_result class]]) {
    return NO;
  }
  THTotalkServiceGetByCreatedAt_result *other = (THTotalkServiceGetByCreatedAt_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            THReview *_elem2 = [[THReview alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetByCreatedAt_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__success count]];
        int idx4;
        for (idx4 = 0; idx4 < [(NSArray *)__success count]; idx4++)
        {
          [[__success objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetByCreatedAt_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetByPopularity_args : NSObject <TBase, NSCoding> {
  int __country;
  int32_t __categoryId;
  int32_t __offset;
  int32_t __limit;
  int64_t __arg3;

  BOOL __country_isset;
  BOOL __categoryId_isset;
  BOOL __offset_isset;
  BOOL __limit_isset;
  BOOL __arg3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=country, setter=setCountry:) int country;
@property (nonatomic, getter=categoryId, setter=setCategoryId:) int32_t categoryId;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
@property (nonatomic, getter=limit, setter=setLimit:) int32_t limit;
@property (nonatomic, getter=arg3, setter=setArg3:) int64_t arg3;
#endif

- (id) init;
- (id) initWithCountry: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) country;
- (void) setCountry: (int) country;
#endif
- (BOOL) countryIsSet;

#if !__has_feature(objc_arc)
- (int32_t) categoryId;
- (void) setCategoryId: (int32_t) categoryId;
#endif
- (BOOL) categoryIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

#if !__has_feature(objc_arc)
- (int32_t) limit;
- (void) setLimit: (int32_t) limit;
#endif
- (BOOL) limitIsSet;

#if !__has_feature(objc_arc)
- (int64_t) arg3;
- (void) setArg3: (int64_t) arg3;
#endif
- (BOOL) arg3IsSet;

@end

@implementation THTotalkServicegetByPopularity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCountry: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3
{
  self = [super init];
  __country = country;
  __country_isset = YES;
  __categoryId = categoryId;
  __categoryId_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  __arg3 = arg3;
  __arg3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [decoder decodeIntForKey: @"country"];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg3"])
  {
    __arg3 = [decoder decodeInt64ForKey: @"arg3"];
    __arg3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__country_isset)
  {
    [encoder encodeInt: __country forKey: @"country"];
  }
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
  if (__arg3_isset)
  {
    [encoder encodeInt64: __arg3 forKey: @"arg3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __country_isset ? 2654435761 : 0;
  if (__country_isset)
  {
    hash = (hash * 31) ^ [@(__country) hash];
  }
  hash = (hash * 31) ^ __categoryId_isset ? 2654435761 : 0;
  if (__categoryId_isset)
  {
    hash = (hash * 31) ^ [@(__categoryId) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  hash = (hash * 31) ^ __arg3_isset ? 2654435761 : 0;
  if (__arg3_isset)
  {
    hash = (hash * 31) ^ [@(__arg3) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetByPopularity_args class]]) {
    return NO;
  }
  THTotalkServicegetByPopularity_args *other = (THTotalkServicegetByPopularity_args *)anObject;
  if ((__country_isset != other->__country_isset) ||
      (__country_isset && (__country != other->__country))) {
    return NO;
  }
  if ((__categoryId_isset != other->__categoryId_isset) ||
      (__categoryId_isset && (__categoryId != other->__categoryId))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  if ((__arg3_isset != other->__arg3_isset) ||
      (__arg3_isset && (__arg3 != other->__arg3))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) country {
  return __country;
}

- (void) setCountry: (int) country {
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  __country_isset = NO;
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (int64_t) arg3 {
  return __arg3;
}

- (void) setArg3: (int64_t) arg3 {
  __arg3 = arg3;
  __arg3_isset = YES;
}

- (BOOL) arg3IsSet {
  return __arg3_isset;
}

- (void) unsetArg3 {
  __arg3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArg3: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getByPopularity_args"];
  if (__country_isset) {
    [outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __country];
    [outProtocol writeFieldEnd];
  }
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  if (__arg3_isset) {
    [outProtocol writeFieldBeginWithName: @"arg3" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __arg3];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetByPopularity_args("];
  [ms appendString: @"country:"];
  [ms appendFormat: @"%i", __country];
  [ms appendString: @",categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @",arg3:"];
  [ms appendFormat: @"%qi", __arg3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetByPopularity_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceGetByPopularity_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetByPopularity_result class]]) {
    return NO;
  }
  THTotalkServiceGetByPopularity_result *other = (THTotalkServiceGetByPopularity_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            THReview *_elem7 = [[THReview alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetByPopularity_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__success count]];
        int idx9;
        for (idx9 = 0; idx9 < [(NSArray *)__success count]; idx9++)
        {
          [[__success objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetByPopularity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetSubscription_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  int32_t __categoryId;

  BOOL __userId_isset;
  BOOL __categoryId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, getter=categoryId, setter=setCategoryId:) int32_t categoryId;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId categoryId: (int32_t) categoryId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) categoryId;
- (void) setCategoryId: (int32_t) categoryId;
#endif
- (BOOL) categoryIdIsSet;

@end

@implementation THTotalkServicegetSubscription_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId categoryId: (int32_t) categoryId
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __categoryId = categoryId;
  __categoryId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __categoryId_isset ? 2654435761 : 0;
  if (__categoryId_isset)
  {
    hash = (hash * 31) ^ [@(__categoryId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetSubscription_args class]]) {
    return NO;
  }
  THTotalkServicegetSubscription_args *other = (THTotalkServicegetSubscription_args *)anObject;
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__categoryId_isset != other->__categoryId_isset) ||
      (__categoryId_isset && (__categoryId != other->__categoryId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userId release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSubscription_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetSubscription_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetSubscription_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceGetSubscription_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetSubscription_result class]]) {
    return NO;
  }
  THTotalkServiceGetSubscription_result *other = (THTotalkServiceGetSubscription_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            THReview *_elem12 = [[THReview alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSubscription_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__success count]];
        int idx14;
        for (idx14 = 0; idx14 < [(NSArray *)__success count]; idx14++)
        {
          [[__success objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetSubscription_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetComments_args : NSObject <TBase, NSCoding> {
  NSString * __reviewId;
  int32_t __offset;
  int32_t __limit;

  BOOL __reviewId_isset;
  BOOL __offset_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reviewId, setter=setReviewId:) NSString * reviewId;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
@property (nonatomic, getter=limit, setter=setLimit:) int32_t limit;
#endif

- (id) init;
- (id) initWithReviewId: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) reviewId;
- (void) setReviewId: (NSString *) reviewId;
#endif
- (BOOL) reviewIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

#if !__has_feature(objc_arc)
- (int32_t) limit;
- (void) setLimit: (int32_t) limit;
#endif
- (BOOL) limitIsSet;

@end

@implementation THTotalkServicegetComments_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReviewId: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit
{
  self = [super init];
  __reviewId = [reviewId retain_stub];
  __reviewId_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reviewId"])
  {
    __reviewId = [[decoder decodeObjectForKey: @"reviewId"] retain_stub];
    __reviewId_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reviewId_isset)
  {
    [encoder encodeObject: __reviewId forKey: @"reviewId"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __reviewId_isset ? 2654435761 : 0;
  if (__reviewId_isset)
  {
    hash = (hash * 31) ^ [__reviewId hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetComments_args class]]) {
    return NO;
  }
  THTotalkServicegetComments_args *other = (THTotalkServicegetComments_args *)anObject;
  if ((__reviewId_isset != other->__reviewId_isset) ||
      (__reviewId_isset && ((__reviewId || other->__reviewId) && ![__reviewId isEqual:other->__reviewId]))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__reviewId release_stub];
  [super dealloc_stub];
}

- (NSString *) reviewId {
  return [[__reviewId retain_stub] autorelease_stub];
}

- (void) setReviewId: (NSString *) reviewId {
  [reviewId retain_stub];
  [__reviewId release_stub];
  __reviewId = reviewId;
  __reviewId_isset = YES;
}

- (BOOL) reviewIdIsSet {
  return __reviewId_isset;
}

- (void) unsetReviewId {
  [__reviewId release_stub];
  __reviewId = nil;
  __reviewId_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getComments_args"];
  if (__reviewId_isset) {
    if (__reviewId != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __reviewId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetComments_args("];
  [ms appendString: @"reviewId:"];
  [ms appendFormat: @"\"%@\"", __reviewId];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetComments_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  NoReviewException * __noReviewException;

  BOOL __success_isset;
  BOOL __noReviewException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=noReviewException, setter=setNoReviewException:) NoReviewException * noReviewException;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success noReviewException: (NoReviewException *) noReviewException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (NoReviewException *) noReviewException;
- (void) setNoReviewException: (NoReviewException *) noReviewException;
#endif
- (BOOL) noReviewExceptionIsSet;

@end

@implementation THTotalkServiceGetComments_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success noReviewException: (NoReviewException *) noReviewException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __noReviewException = [noReviewException retain_stub];
  __noReviewException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"noReviewException"])
  {
    __noReviewException = [[decoder decodeObjectForKey: @"noReviewException"] retain_stub];
    __noReviewException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__noReviewException_isset)
  {
    [encoder encodeObject: __noReviewException forKey: @"noReviewException"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __noReviewException_isset ? 2654435761 : 0;
  if (__noReviewException_isset)
  {
    hash = (hash * 31) ^ [__noReviewException hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetComments_result class]]) {
    return NO;
  }
  THTotalkServiceGetComments_result *other = (THTotalkServiceGetComments_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__noReviewException_isset != other->__noReviewException_isset) ||
      (__noReviewException_isset && ((__noReviewException || other->__noReviewException) && ![__noReviewException isEqual:other->__noReviewException]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__noReviewException release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (NoReviewException *) noReviewException {
  return [[__noReviewException retain_stub] autorelease_stub];
}

- (void) setNoReviewException: (NoReviewException *) noReviewException {
  [noReviewException retain_stub];
  [__noReviewException release_stub];
  __noReviewException = noReviewException;
  __noReviewException_isset = YES;
}

- (BOOL) noReviewExceptionIsSet {
  return __noReviewException_isset;
}

- (void) unsetNoReviewException {
  [__noReviewException release_stub];
  __noReviewException = nil;
  __noReviewException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            THComment *_elem17 = [[THComment alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          NoReviewException *fieldValue = [[NoReviewException alloc] init];
          [fieldValue read: inProtocol];
          [self setNoReviewException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetComments_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__success count]];
        int idx19;
        for (idx19 = 0; idx19 < [(NSArray *)__success count]; idx19++)
        {
          [[__success objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__noReviewException_isset) {
    if (__noReviewException != nil) {
      [outProtocol writeFieldBeginWithName: @"noReviewException" type: TType_STRUCT fieldID: 1];
      [__noReviewException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetComments_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",noReviewException:"];
  [ms appendFormat: @"%@", __noReviewException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicegetByEntity_args : NSObject <TBase, NSCoding> {
  int __entityType;
  NSString * __entityId;
  int __reviewType;
  int32_t __offset;
  int32_t __limit;

  BOOL __entityType_isset;
  BOOL __entityId_isset;
  BOOL __reviewType_isset;
  BOOL __offset_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=entityType, setter=setEntityType:) int entityType;
@property (nonatomic, retain, getter=entityId, setter=setEntityId:) NSString * entityId;
@property (nonatomic, getter=reviewType, setter=setReviewType:) int reviewType;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
@property (nonatomic, getter=limit, setter=setLimit:) int32_t limit;
#endif

- (id) init;
- (id) initWithEntityType: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) entityType;
- (void) setEntityType: (int) entityType;
#endif
- (BOOL) entityTypeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) entityId;
- (void) setEntityId: (NSString *) entityId;
#endif
- (BOOL) entityIdIsSet;

#if !__has_feature(objc_arc)
- (int) reviewType;
- (void) setReviewType: (int) reviewType;
#endif
- (BOOL) reviewTypeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

#if !__has_feature(objc_arc)
- (int32_t) limit;
- (void) setLimit: (int32_t) limit;
#endif
- (BOOL) limitIsSet;

@end

@implementation THTotalkServicegetByEntity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEntityType: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit
{
  self = [super init];
  __entityType = entityType;
  __entityType_isset = YES;
  __entityId = [entityId retain_stub];
  __entityId_isset = YES;
  __reviewType = reviewType;
  __reviewType_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"entityType"])
  {
    __entityType = [decoder decodeIntForKey: @"entityType"];
    __entityType_isset = YES;
  }
  if ([decoder containsValueForKey: @"entityId"])
  {
    __entityId = [[decoder decodeObjectForKey: @"entityId"] retain_stub];
    __entityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewType"])
  {
    __reviewType = [decoder decodeIntForKey: @"reviewType"];
    __reviewType_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__entityType_isset)
  {
    [encoder encodeInt: __entityType forKey: @"entityType"];
  }
  if (__entityId_isset)
  {
    [encoder encodeObject: __entityId forKey: @"entityId"];
  }
  if (__reviewType_isset)
  {
    [encoder encodeInt: __reviewType forKey: @"reviewType"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __entityType_isset ? 2654435761 : 0;
  if (__entityType_isset)
  {
    hash = (hash * 31) ^ [@(__entityType) hash];
  }
  hash = (hash * 31) ^ __entityId_isset ? 2654435761 : 0;
  if (__entityId_isset)
  {
    hash = (hash * 31) ^ [__entityId hash];
  }
  hash = (hash * 31) ^ __reviewType_isset ? 2654435761 : 0;
  if (__reviewType_isset)
  {
    hash = (hash * 31) ^ [@(__reviewType) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicegetByEntity_args class]]) {
    return NO;
  }
  THTotalkServicegetByEntity_args *other = (THTotalkServicegetByEntity_args *)anObject;
  if ((__entityType_isset != other->__entityType_isset) ||
      (__entityType_isset && (__entityType != other->__entityType))) {
    return NO;
  }
  if ((__entityId_isset != other->__entityId_isset) ||
      (__entityId_isset && ((__entityId || other->__entityId) && ![__entityId isEqual:other->__entityId]))) {
    return NO;
  }
  if ((__reviewType_isset != other->__reviewType_isset) ||
      (__reviewType_isset && (__reviewType != other->__reviewType))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__entityId release_stub];
  [super dealloc_stub];
}

- (int) entityType {
  return __entityType;
}

- (void) setEntityType: (int) entityType {
  __entityType = entityType;
  __entityType_isset = YES;
}

- (BOOL) entityTypeIsSet {
  return __entityType_isset;
}

- (void) unsetEntityType {
  __entityType_isset = NO;
}

- (NSString *) entityId {
  return [[__entityId retain_stub] autorelease_stub];
}

- (void) setEntityId: (NSString *) entityId {
  [entityId retain_stub];
  [__entityId release_stub];
  __entityId = entityId;
  __entityId_isset = YES;
}

- (BOOL) entityIdIsSet {
  return __entityId_isset;
}

- (void) unsetEntityId {
  [__entityId release_stub];
  __entityId = nil;
  __entityId_isset = NO;
}

- (int) reviewType {
  return __reviewType;
}

- (void) setReviewType: (int) reviewType {
  __reviewType = reviewType;
  __reviewType_isset = YES;
}

- (BOOL) reviewTypeIsSet {
  return __reviewType_isset;
}

- (void) unsetReviewType {
  __reviewType_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setEntityType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEntityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setReviewType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getByEntity_args"];
  if (__entityType_isset) {
    [outProtocol writeFieldBeginWithName: @"entityType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __entityType];
    [outProtocol writeFieldEnd];
  }
  if (__entityId_isset) {
    if (__entityId != nil) {
      [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __entityId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewType_isset) {
    [outProtocol writeFieldBeginWithName: @"reviewType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __reviewType];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THgetByEntity_args("];
  [ms appendString: @"entityType:"];
  [ms appendFormat: @"%i", __entityType];
  [ms appendString: @",entityId:"];
  [ms appendFormat: @"\"%@\"", __entityId];
  [ms appendString: @",reviewType:"];
  [ms appendFormat: @"%i", __reviewType];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceGetByEntity_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceGetByEntity_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceGetByEntity_result class]]) {
    return NO;
  }
  THTotalkServiceGetByEntity_result *other = (THTotalkServiceGetByEntity_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            THReview *_elem22 = [[THReview alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetByEntity_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[(NSArray *)__success count]];
        int idx24;
        for (idx24 = 0; idx24 < [(NSArray *)__success count]; idx24++)
        {
          [[__success objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THGetByEntity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServicesetVote_args : NSObject <TBase, NSCoding> {
  NSString * __reviewId;
  BOOL __yes;

  BOOL __reviewId_isset;
  BOOL __yes_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reviewId, setter=setReviewId:) NSString * reviewId;
@property (nonatomic, getter=yes, setter=setYes:) BOOL yes;
#endif

- (id) init;
- (id) initWithReviewId: (NSString *) reviewId yes: (BOOL) yes;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) reviewId;
- (void) setReviewId: (NSString *) reviewId;
#endif
- (BOOL) reviewIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) yes;
- (void) setYes: (BOOL) yes;
#endif
- (BOOL) yesIsSet;

@end

@implementation THTotalkServicesetVote_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReviewId: (NSString *) reviewId yes: (BOOL) yes
{
  self = [super init];
  __reviewId = [reviewId retain_stub];
  __reviewId_isset = YES;
  __yes = yes;
  __yes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reviewId"])
  {
    __reviewId = [[decoder decodeObjectForKey: @"reviewId"] retain_stub];
    __reviewId_isset = YES;
  }
  if ([decoder containsValueForKey: @"yes"])
  {
    __yes = [decoder decodeBoolForKey: @"yes"];
    __yes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reviewId_isset)
  {
    [encoder encodeObject: __reviewId forKey: @"reviewId"];
  }
  if (__yes_isset)
  {
    [encoder encodeBool: __yes forKey: @"yes"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __reviewId_isset ? 2654435761 : 0;
  if (__reviewId_isset)
  {
    hash = (hash * 31) ^ [__reviewId hash];
  }
  hash = (hash * 31) ^ __yes_isset ? 2654435761 : 0;
  if (__yes_isset)
  {
    hash = (hash * 31) ^ [@(__yes) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServicesetVote_args class]]) {
    return NO;
  }
  THTotalkServicesetVote_args *other = (THTotalkServicesetVote_args *)anObject;
  if ((__reviewId_isset != other->__reviewId_isset) ||
      (__reviewId_isset && ((__reviewId || other->__reviewId) && ![__reviewId isEqual:other->__reviewId]))) {
    return NO;
  }
  if ((__yes_isset != other->__yes_isset) ||
      (__yes_isset && (__yes != other->__yes))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__reviewId release_stub];
  [super dealloc_stub];
}

- (NSString *) reviewId {
  return [[__reviewId retain_stub] autorelease_stub];
}

- (void) setReviewId: (NSString *) reviewId {
  [reviewId retain_stub];
  [__reviewId release_stub];
  __reviewId = reviewId;
  __reviewId_isset = YES;
}

- (BOOL) reviewIdIsSet {
  return __reviewId_isset;
}

- (void) unsetReviewId {
  [__reviewId release_stub];
  __reviewId = nil;
  __reviewId_isset = NO;
}

- (BOOL) yes {
  return __yes;
}

- (void) setYes: (BOOL) yes {
  __yes = yes;
  __yes_isset = YES;
}

- (BOOL) yesIsSet {
  return __yes_isset;
}

- (void) unsetYes {
  __yes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setYes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setVote_args"];
  if (__reviewId_isset) {
    if (__reviewId != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __reviewId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__yes_isset) {
    [outProtocol writeFieldBeginWithName: @"yes" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __yes];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THsetVote_args("];
  [ms appendString: @"reviewId:"];
  [ms appendFormat: @"\"%@\"", __reviewId];
  [ms appendString: @",yes:"];
  [ms appendFormat: @"%i", __yes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceSetVote_result : NSObject <TBase, NSCoding> {
  NoReviewException * __noReviewException;

  BOOL __noReviewException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=noReviewException, setter=setNoReviewException:) NoReviewException * noReviewException;
#endif

- (id) init;
- (id) initWithNoReviewException: (NoReviewException *) noReviewException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NoReviewException *) noReviewException;
- (void) setNoReviewException: (NoReviewException *) noReviewException;
#endif
- (BOOL) noReviewExceptionIsSet;

@end

@implementation THTotalkServiceSetVote_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNoReviewException: (NoReviewException *) noReviewException
{
  self = [super init];
  __noReviewException = [noReviewException retain_stub];
  __noReviewException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"noReviewException"])
  {
    __noReviewException = [[decoder decodeObjectForKey: @"noReviewException"] retain_stub];
    __noReviewException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__noReviewException_isset)
  {
    [encoder encodeObject: __noReviewException forKey: @"noReviewException"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __noReviewException_isset ? 2654435761 : 0;
  if (__noReviewException_isset)
  {
    hash = (hash * 31) ^ [__noReviewException hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceSetVote_result class]]) {
    return NO;
  }
  THTotalkServiceSetVote_result *other = (THTotalkServiceSetVote_result *)anObject;
  if ((__noReviewException_isset != other->__noReviewException_isset) ||
      (__noReviewException_isset && ((__noReviewException || other->__noReviewException) && ![__noReviewException isEqual:other->__noReviewException]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__noReviewException release_stub];
  [super dealloc_stub];
}

- (NoReviewException *) noReviewException {
  return [[__noReviewException retain_stub] autorelease_stub];
}

- (void) setNoReviewException: (NoReviewException *) noReviewException {
  [noReviewException retain_stub];
  [__noReviewException release_stub];
  __noReviewException = noReviewException;
  __noReviewException_isset = YES;
}

- (BOOL) noReviewExceptionIsSet {
  return __noReviewException_isset;
}

- (void) unsetNoReviewException {
  [__noReviewException release_stub];
  __noReviewException = nil;
  __noReviewException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NoReviewException *fieldValue = [[NoReviewException alloc] init];
          [fieldValue read: inProtocol];
          [self setNoReviewException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetVote_result"];

  if (__noReviewException_isset) {
    if (__noReviewException != nil) {
      [outProtocol writeFieldBeginWithName: @"noReviewException" type: TType_STRUCT fieldID: 1];
      [__noReviewException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THSetVote_result("];
  [ms appendString: @"noReviewException:"];
  [ms appendFormat: @"%@", __noReviewException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceaddReview_args : NSObject <TBase, NSCoding> {
  THReview * __review;

  BOOL __review_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=review, setter=setReview:) THReview * review;
#endif

- (id) init;
- (id) initWithReview: (THReview *) review;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (THReview *) review;
- (void) setReview: (THReview *) review;
#endif
- (BOOL) reviewIsSet;

@end

@implementation THTotalkServiceaddReview_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReview: (THReview *) review
{
  self = [super init];
  __review = [review retain_stub];
  __review_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"review"])
  {
    __review = [[decoder decodeObjectForKey: @"review"] retain_stub];
    __review_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__review_isset)
  {
    [encoder encodeObject: __review forKey: @"review"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __review_isset ? 2654435761 : 0;
  if (__review_isset)
  {
    hash = (hash * 31) ^ [__review hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceaddReview_args class]]) {
    return NO;
  }
  THTotalkServiceaddReview_args *other = (THTotalkServiceaddReview_args *)anObject;
  if ((__review_isset != other->__review_isset) ||
      (__review_isset && ((__review || other->__review) && ![__review isEqual:other->__review]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__review release_stub];
  [super dealloc_stub];
}

- (THReview *) review {
  return [[__review retain_stub] autorelease_stub];
}

- (void) setReview: (THReview *) review {
  [review retain_stub];
  [__review release_stub];
  __review = review;
  __review_isset = YES;
}

- (BOOL) reviewIsSet {
  return __review_isset;
}

- (void) unsetReview {
  [__review release_stub];
  __review = nil;
  __review_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          THReview *fieldValue = [[THReview alloc] init];
          [fieldValue read: inProtocol];
          [self setReview: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addReview_args"];
  if (__review_isset) {
    if (__review != nil) {
      [outProtocol writeFieldBeginWithName: @"review" type: TType_STRUCT fieldID: 1];
      [__review write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THaddReview_args("];
  [ms appendString: @"review:"];
  [ms appendFormat: @"%@", __review];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceAddReview_result : NSObject <TBase, NSCoding> {
  THReview * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) THReview * success;
#endif

- (id) init;
- (id) initWithSuccess: (THReview *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (THReview *) success;
- (void) setSuccess: (THReview *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceAddReview_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (THReview *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceAddReview_result class]]) {
    return NO;
  }
  THTotalkServiceAddReview_result *other = (THTotalkServiceAddReview_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (THReview *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (THReview *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          THReview *fieldValue = [[THReview alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddReview_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THAddReview_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceaddComment_args : NSObject <TBase, NSCoding> {
  THComment * __comment;

  BOOL __comment_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=comment, setter=setComment:) THComment * comment;
#endif

- (id) init;
- (id) initWithComment: (THComment *) comment;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (THComment *) comment;
- (void) setComment: (THComment *) comment;
#endif
- (BOOL) commentIsSet;

@end

@implementation THTotalkServiceaddComment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComment: (THComment *) comment
{
  self = [super init];
  __comment = [comment retain_stub];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __comment_isset ? 2654435761 : 0;
  if (__comment_isset)
  {
    hash = (hash * 31) ^ [__comment hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceaddComment_args class]]) {
    return NO;
  }
  THTotalkServiceaddComment_args *other = (THTotalkServiceaddComment_args *)anObject;
  if ((__comment_isset != other->__comment_isset) ||
      (__comment_isset && ((__comment || other->__comment) && ![__comment isEqual:other->__comment]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comment release_stub];
  [super dealloc_stub];
}

- (THComment *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (THComment *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          THComment *fieldValue = [[THComment alloc] init];
          [fieldValue read: inProtocol];
          [self setComment: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addComment_args"];
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
      [__comment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THaddComment_args("];
  [ms appendString: @"comment:"];
  [ms appendFormat: @"%@", __comment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface THTotalkServiceAddComment_result : NSObject <TBase, NSCoding> {
  THComment * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) THComment * success;
#endif

- (id) init;
- (id) initWithSuccess: (THComment *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (THComment *) success;
- (void) setSuccess: (THComment *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation THTotalkServiceAddComment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (THComment *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[THTotalkServiceAddComment_result class]]) {
    return NO;
  }
  THTotalkServiceAddComment_result *other = (THTotalkServiceAddComment_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (THComment *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (THComment *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          THComment *fieldValue = [[THComment alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddComment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"THAddComment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation THTotalkServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_hello: (NSString *) arg
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:hello" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"hello_args"];
  if (arg != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
    [outProtocol writeString: arg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSString *) recv_hello
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceHello_result * result = [[[THTotalkServiceHello_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result authenticationRequiredExceptionIsSet]) {
    @throw [result authenticationRequiredException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"hello failed: unknown result"];
}

- (NSString *) hello: (NSString *) arg
{
  [self send_hello : arg];
  [[outProtocol transport] flush];
  return [self recv_hello];
}

- (void) send_ping: (NSString *) arg
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (arg != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
    [outProtocol writeString: arg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_ping
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServicePing_result * result = [[[THTotalkServicePing_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result authenticationRequiredExceptionIsSet]) {
    @throw [result authenticationRequiredException];
  }
  return;
}

- (void) ping: (NSString *) arg
{
  [self send_ping : arg];
  [[outProtocol transport] flush];
  [self recv_ping];
}

- (void) send_getReviewById: (NSString *) id
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getReviewById" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getReviewById_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (THReview *) recv_getReviewById
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetReviewById_result * result = [[[THTotalkServiceGetReviewById_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result noReviewExceptionIsSet]) {
    @throw [result noReviewException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getReviewById failed: unknown result"];
}

- (THReview *) getReviewById: (NSString *) id
{
  [self send_getReviewById : id];
  [[outProtocol transport] flush];
  return [self recv_getReviewById];
}

- (void) send_getByCreatedAt: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getByCreatedAt" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getByCreatedAt_args"];
  [outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: country];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: categoryId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: limit];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getByCreatedAt
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetByCreatedAt_result * result = [[[THTotalkServiceGetByCreatedAt_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getByCreatedAt failed: unknown result"];
}

- (NSMutableArray *) getByCreatedAt: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit
{
  [self send_getByCreatedAt : country categoryId: categoryId offset: offset limit: limit];
  [[outProtocol transport] flush];
  return [self recv_getByCreatedAt];
}

- (void) send_getByPopularity: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getByPopularity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getByPopularity_args"];
  [outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: country];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: categoryId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: limit];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"arg3" type: TType_I64 fieldID: 5];
  [outProtocol writeI64: arg3];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getByPopularity
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetByPopularity_result * result = [[[THTotalkServiceGetByPopularity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getByPopularity failed: unknown result"];
}

- (NSMutableArray *) getByPopularity: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3
{
  [self send_getByPopularity : country categoryId: categoryId offset: offset limit: limit arg3: arg3];
  [[outProtocol transport] flush];
  return [self recv_getByPopularity];
}

- (void) send_getSubscription: (NSString *) userId categoryId: (int32_t) categoryId
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getSubscription" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSubscription_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: categoryId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getSubscription
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetSubscription_result * result = [[[THTotalkServiceGetSubscription_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSubscription failed: unknown result"];
}

- (NSMutableArray *) getSubscription: (NSString *) userId categoryId: (int32_t) categoryId
{
  [self send_getSubscription : userId categoryId: categoryId];
  [[outProtocol transport] flush];
  return [self recv_getSubscription];
}

- (void) send_getComments: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getComments" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getComments_args"];
  if (reviewId != nil)  {
    [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: reviewId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: limit];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getComments
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetComments_result * result = [[[THTotalkServiceGetComments_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result noReviewExceptionIsSet]) {
    @throw [result noReviewException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getComments failed: unknown result"];
}

- (NSMutableArray *) getComments: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit
{
  [self send_getComments : reviewId offset: offset limit: limit];
  [[outProtocol transport] flush];
  return [self recv_getComments];
}

- (void) send_getByEntity: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:getByEntity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getByEntity_args"];
  [outProtocol writeFieldBeginWithName: @"entityType" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: entityType];
  [outProtocol writeFieldEnd];
  if (entityId != nil)  {
    [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: entityId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"reviewType" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: reviewType];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: limit];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getByEntity
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceGetByEntity_result * result = [[[THTotalkServiceGetByEntity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getByEntity failed: unknown result"];
}

- (NSMutableArray *) getByEntity: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit
{
  [self send_getByEntity : entityType entityId: entityId reviewType: reviewType offset: offset limit: limit];
  [[outProtocol transport] flush];
  return [self recv_getByEntity];
}

- (void) send_setVote: (NSString *) reviewId yes: (BOOL) yes
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:setVote" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setVote_args"];
  if (reviewId != nil)  {
    [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: reviewId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"yes" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: yes];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_setVote
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceSetVote_result * result = [[[THTotalkServiceSetVote_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result noReviewExceptionIsSet]) {
    @throw [result noReviewException];
  }
  return;
}

- (void) setVote: (NSString *) reviewId yes: (BOOL) yes
{
  [self send_setVote : reviewId yes: yes];
  [[outProtocol transport] flush];
  [self recv_setVote];
}

- (void) send_addReview: (THReview *) review
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:addReview" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addReview_args"];
  if (review != nil)  {
    [outProtocol writeFieldBeginWithName: @"review" type: TType_STRUCT fieldID: 1];
    [review write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (THReview *) recv_addReview
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceAddReview_result * result = [[[THTotalkServiceAddReview_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"addReview failed: unknown result"];
}

- (THReview *) addReview: (THReview *) review
{
  [self send_addReview : review];
  [[outProtocol transport] flush];
  return [self recv_addReview];
}

- (void) send_addComment: (THComment *) comment
{
  [outProtocol writeMessageBeginWithName: @"TotalkService:addComment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addComment_args"];
  if (comment != nil)  {
    [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
    [comment write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (THComment *) recv_addComment
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  THTotalkServiceAddComment_result * result = [[[THTotalkServiceAddComment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"addComment failed: unknown result"];
}

- (THComment *) addComment: (THComment *) comment
{
  [self send_addComment : comment];
  [[outProtocol transport] flush];
  return [self recv_addComment];
}

@end

@implementation THTotalkServiceProcessor

- (id) initWithTotalkService: (id <THTotalkService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_hello_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:hello"];
}
{
  SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:ping"];
}
{
  SEL s = @selector(process_getReviewById_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getReviewById"];
}
{
  SEL s = @selector(process_getByCreatedAt_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getByCreatedAt"];
}
{
  SEL s = @selector(process_getByPopularity_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getByPopularity"];
}
{
  SEL s = @selector(process_getSubscription_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getSubscription"];
}
{
  SEL s = @selector(process_getComments_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getComments"];
}
{
  SEL s = @selector(process_getByEntity_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:getByEntity"];
}
{
  SEL s = @selector(process_setVote_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:setVote"];
}
{
  SEL s = @selector(process_addReview_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:addReview"];
}
{
  SEL s = @selector(process_addComment_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"TotalkService:addComment"];
}
return self;
}

- (id<THTotalkService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_hello_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicehello_args * args = [[THTotalkServicehello_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceHello_result * result = [[THTotalkServiceHello_result alloc] init];
[result setSuccess: [mService hello: [args arg]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:hello"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServiceping_args * args = [[THTotalkServiceping_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServicePing_result * result = [[THTotalkServicePing_result alloc] init];
[mService ping: [args arg]];
[outProtocol writeMessageBeginWithName: @"TotalkService:ping"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getReviewById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetReviewById_args * args = [[THTotalkServicegetReviewById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetReviewById_result * result = [[THTotalkServiceGetReviewById_result alloc] init];
[result setSuccess: [mService getReviewById: [args id]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getReviewById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getByCreatedAt_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetByCreatedAt_args * args = [[THTotalkServicegetByCreatedAt_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetByCreatedAt_result * result = [[THTotalkServiceGetByCreatedAt_result alloc] init];
[result setSuccess: [mService getByCreatedAt: [args country] categoryId: [args categoryId] offset: [args offset] limit: [args limit]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByCreatedAt"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getByPopularity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetByPopularity_args * args = [[THTotalkServicegetByPopularity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetByPopularity_result * result = [[THTotalkServiceGetByPopularity_result alloc] init];
[result setSuccess: [mService getByPopularity: [args country] categoryId: [args categoryId] offset: [args offset] limit: [args limit] arg3: [args arg3]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByPopularity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getSubscription_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetSubscription_args * args = [[THTotalkServicegetSubscription_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetSubscription_result * result = [[THTotalkServiceGetSubscription_result alloc] init];
[result setSuccess: [mService getSubscription: [args userId] categoryId: [args categoryId]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getSubscription"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getComments_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetComments_args * args = [[THTotalkServicegetComments_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetComments_result * result = [[THTotalkServiceGetComments_result alloc] init];
[result setSuccess: [mService getComments: [args reviewId] offset: [args offset] limit: [args limit]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getComments"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getByEntity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicegetByEntity_args * args = [[THTotalkServicegetByEntity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceGetByEntity_result * result = [[THTotalkServiceGetByEntity_result alloc] init];
[result setSuccess: [mService getByEntity: [args entityType] entityId: [args entityId] reviewType: [args reviewType] offset: [args offset] limit: [args limit]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByEntity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_setVote_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServicesetVote_args * args = [[THTotalkServicesetVote_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceSetVote_result * result = [[THTotalkServiceSetVote_result alloc] init];
[mService setVote: [args reviewId] yes: [args yes]];
[outProtocol writeMessageBeginWithName: @"TotalkService:setVote"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_addReview_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServiceaddReview_args * args = [[THTotalkServiceaddReview_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceAddReview_result * result = [[THTotalkServiceAddReview_result alloc] init];
[result setSuccess: [mService addReview: [args review]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:addReview"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_addComment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
THTotalkServiceaddComment_args * args = [[THTotalkServiceaddComment_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
THTotalkServiceAddComment_result * result = [[THTotalkServiceAddComment_result alloc] init];
[result setSuccess: [mService addComment: [args comment]]];
[outProtocol writeMessageBeginWithName: @"TotalkService:addComment"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@implementation THTotalkServiceAsyncClient
- (id)initWithOutProtocol:(id<TProtocol>)anOutProtocol inProtocolFactory:(id<TProtocolFactory>)anInProtocolFactory
{
self = [super init];
outProtocol = [anOutProtocol retain_stub];
inProtocolFactory = [anInProtocolFactory retain_stub];
return self;
}

- (void) dealloc
{
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_hello: (NSString *) arg success: (void (^)(NSString * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:hello" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"hello_args"];
if (arg != nil){
  [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
  [outProtocol writeString: arg];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSString * result = [self recv_hello:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSString *) recv_hello:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceHello_result * result = [[[THTotalkServiceHello_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result authenticationRequiredExceptionIsSet]) {
  @throw [result authenticationRequiredException];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"hello failed: unknown result"];
}

- (void) hello: (NSString *) arg success: (void (^)(NSString * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_hello : arg success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_ping: (NSString *) arg success: (void (^)(void)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:ping" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"ping_args"];
if (arg != nil){
  [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
  [outProtocol writeString: arg];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      [self recv_ping:protocol];
      if(success) success();
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (void) recv_ping:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServicePing_result * result = [[[THTotalkServicePing_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result authenticationRequiredExceptionIsSet]) {
  @throw [result authenticationRequiredException];
}
return;
}

- (void) ping: (NSString *) arg success: (void (^)(void)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_ping : arg success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getReviewById: (NSString *) id success: (void (^)(THReview * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getReviewById" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getReviewById_args"];
if (id != nil){
  [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
  [outProtocol writeString: id];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      THReview * result = [self recv_getReviewById:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (THReview *) recv_getReviewById:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetReviewById_result * result = [[[THTotalkServiceGetReviewById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result noReviewExceptionIsSet]) {
  @throw [result noReviewException];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getReviewById failed: unknown result"];
}

- (void) getReviewById: (NSString *) id success: (void (^)(THReview * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getReviewById : id success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getByCreatedAt: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByCreatedAt" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getByCreatedAt_args"];
[outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
[outProtocol writeI32: country];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: categoryId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
[outProtocol writeI32: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
[outProtocol writeI32: limit];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSMutableArray * result = [self recv_getByCreatedAt:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSMutableArray *) recv_getByCreatedAt:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetByCreatedAt_result * result = [[[THTotalkServiceGetByCreatedAt_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getByCreatedAt failed: unknown result"];
}

- (void) getByCreatedAt: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getByCreatedAt : country categoryId: categoryId offset: offset limit: limit success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getByPopularity: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3 success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByPopularity" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getByPopularity_args"];
[outProtocol writeFieldBeginWithName: @"country" type: TType_I32 fieldID: 1];
[outProtocol writeI32: country];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: categoryId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
[outProtocol writeI32: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 4];
[outProtocol writeI32: limit];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"arg3" type: TType_I64 fieldID: 5];
[outProtocol writeI64: arg3];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSMutableArray * result = [self recv_getByPopularity:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSMutableArray *) recv_getByPopularity:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetByPopularity_result * result = [[[THTotalkServiceGetByPopularity_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getByPopularity failed: unknown result"];
}

- (void) getByPopularity: (int) country categoryId: (int32_t) categoryId offset: (int32_t) offset limit: (int32_t) limit arg3: (int64_t) arg3 success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getByPopularity : country categoryId: categoryId offset: offset limit: limit arg3: arg3 success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getSubscription: (NSString *) userId categoryId: (int32_t) categoryId success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getSubscription" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getSubscription_args"];
if (userId != nil){
  [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
  [outProtocol writeString: userId];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: categoryId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSMutableArray * result = [self recv_getSubscription:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSMutableArray *) recv_getSubscription:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetSubscription_result * result = [[[THTotalkServiceGetSubscription_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getSubscription failed: unknown result"];
}

- (void) getSubscription: (NSString *) userId categoryId: (int32_t) categoryId success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getSubscription : userId categoryId: categoryId success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getComments: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getComments" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getComments_args"];
if (reviewId != nil){
  [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
  [outProtocol writeString: reviewId];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 2];
[outProtocol writeI32: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 3];
[outProtocol writeI32: limit];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSMutableArray * result = [self recv_getComments:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSMutableArray *) recv_getComments:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetComments_result * result = [[[THTotalkServiceGetComments_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result noReviewExceptionIsSet]) {
  @throw [result noReviewException];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getComments failed: unknown result"];
}

- (void) getComments: (NSString *) reviewId offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getComments : reviewId offset: offset limit: limit success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_getByEntity: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:getByEntity" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"getByEntity_args"];
[outProtocol writeFieldBeginWithName: @"entityType" type: TType_I32 fieldID: 1];
[outProtocol writeI32: entityType];
[outProtocol writeFieldEnd];
if (entityId != nil){
  [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 2];
  [outProtocol writeString: entityId];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"reviewType" type: TType_I32 fieldID: 3];
[outProtocol writeI32: reviewType];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 4];
[outProtocol writeI32: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 5];
[outProtocol writeI32: limit];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      NSMutableArray * result = [self recv_getByEntity:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (NSMutableArray *) recv_getByEntity:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceGetByEntity_result * result = [[[THTotalkServiceGetByEntity_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getByEntity failed: unknown result"];
}

- (void) getByEntity: (int) entityType entityId: (NSString *) entityId reviewType: (int) reviewType offset: (int32_t) offset limit: (int32_t) limit success: (void (^)(NSMutableArray * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_getByEntity : entityType entityId: entityId reviewType: reviewType offset: offset limit: limit success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_setVote: (NSString *) reviewId yes: (BOOL) yes success: (void (^)(void)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:setVote" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"setVote_args"];
if (reviewId != nil){
  [outProtocol writeFieldBeginWithName: @"reviewId" type: TType_STRING fieldID: 1];
  [outProtocol writeString: reviewId];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"yes" type: TType_BOOL fieldID: 2];
[outProtocol writeBool: yes];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      [self recv_setVote:protocol];
      if(success) success();
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (void) recv_setVote:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceSetVote_result * result = [[[THTotalkServiceSetVote_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result noReviewExceptionIsSet]) {
  @throw [result noReviewException];
}
return;
}

- (void) setVote: (NSString *) reviewId yes: (BOOL) yes success: (void (^)(void)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_setVote : reviewId yes: yes success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_addReview: (THReview *) review success: (void (^)(THReview * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:addReview" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"addReview_args"];
if (review != nil){
  [outProtocol writeFieldBeginWithName: @"review" type: TType_STRUCT fieldID: 1];
  [review write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      THReview * result = [self recv_addReview:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (THReview *) recv_addReview:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceAddReview_result * result = [[[THTotalkServiceAddReview_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addReview failed: unknown result"];
}

- (void) addReview: (THReview *) review success: (void (^)(THReview * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_addReview : review success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

- (void) send_addComment: (THComment *) comment success: (void (^)(THComment * result)) success error: (void (^)(NSException *exception)) error
{
int seqID = [[TAsyncRegister sharedRegister] getNextSeqID];
[outProtocol writeMessageBeginWithName: @"TotalkService:addComment" type: TMessageType_CALL sequenceID: seqID];
[outProtocol writeStructBeginWithName: @"addComment_args"];
if (comment != nil){
  [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
  [comment write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[TAsyncRegister sharedRegister] registerSeqID:seqID handler:^(NSData *data, NSException *exception)
{
  id <TProtocol> protocol = [inProtocolFactory newProtocolOnTransport:[[TMemoryBuffer alloc] initWithData:data]];
  if (exception)
  {
    if(error) error(exception);
  }
  else
  {
    @try {
      THComment * result = [self recv_addComment:protocol];
      if(success) success(result);
    }
    @catch (NSException *e) {
      [[TExceptionRegister sharedRegister] throwException:e];
      if(error) error(e);
    }
  }
}
];
[[outProtocol transport] flush:seqID];
}

- (THComment *) recv_addComment:(id <TProtocol>)inProtocol
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
THTotalkServiceAddComment_result * result = [[[THTotalkServiceAddComment_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addComment failed: unknown result"];
}

- (void) addComment: (THComment *) comment success: (void (^)(THComment * result)) success error: (void (^)(NSException *exception)) error
{
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
  @try {
    [self send_addComment : comment success: success error:error];
  }
  @catch (NSException *exception) {
    if(error) error(exception);
  }
});
}

@end

