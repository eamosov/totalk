/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tobox.totalk.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TotalkService {

  public interface Iface {

    public String hello(String arg) throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException;

    public void ping(String arg) throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException;

    public com.tobox.totalk.thrift.types.Review getReviewById(String id) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException;

    /**
     * Показать ленту отзывов по дате создания
     * 
     * @param country
     * @param categoryId
     * @param offset
     * @param limit
     */
    public List<com.tobox.totalk.thrift.types.Review> getByCreatedAt(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit) throws org.apache.thrift.TException;

    /**
     * Показать ленту отзывов по популярности
     * 
     * @param country
     * @param categoryId
     * @param offset
     * @param limit
     * @param arg3
     */
    public List<com.tobox.totalk.thrift.types.Review> getByPopularity(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3) throws org.apache.thrift.TException;

    /**
     * Показать ленту подписок пользователя userId
     * 
     * @param userId
     * @param categoryId
     */
    public List<com.tobox.totalk.thrift.types.Review> getSubscription(String userId, int categoryId) throws org.apache.thrift.TException;

    /**
     * Получить список комментариев к отзыву
     * 
     * @param reviewId
     * @param offset
     * @param limit
     */
    public List<com.tobox.totalk.thrift.types.Comment> getComments(String reviewId, int offset, int limit) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException;

    /**
     * Получить список отзывов о товаре
     * 
     * @param entityType
     * @param entityId
     * @param reviewType
     * @param offset
     * @param limit
     */
    public List<com.tobox.totalk.thrift.types.Review> getByEntity(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit) throws org.apache.thrift.TException;

    /**
     * Отзыв полезный: ДА/НЕТ ?
     * 
     * @param reviewId
     * @param yes
     */
    public void setVote(String reviewId, boolean yes) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException;

    /**
     * Добавить обзор
     * 
     * @param review
     */
    public com.tobox.totalk.thrift.types.Review addReview(com.tobox.totalk.thrift.types.Review review) throws org.apache.thrift.TException;

    /**
     * Добавить комментарий
     * 
     * @param comment
     */
    public com.tobox.totalk.thrift.types.Comment addComment(com.tobox.totalk.thrift.types.Comment comment) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void hello(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReviewById(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getByCreatedAt(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getByPopularity(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSubscription(String userId, int categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getComments(String reviewId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getByEntity(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setVote(String reviewId, boolean yes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addReview(com.tobox.totalk.thrift.types.Review review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addComment(com.tobox.totalk.thrift.types.Comment comment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String hello(String arg) throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException
    {
      send_hello(arg);
      return recv_hello();
    }

    public void send_hello(String arg) throws org.apache.thrift.TException
    {
      hello_args args = new hello_args();
      args.setArg(arg);
      sendBase("TotalkService:hello", args);
    }

    public String recv_hello() throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException
    {
      hello_result result = new hello_result();
      receiveBase(result, "hello");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authenticationRequiredException != null) {
        throw result.authenticationRequiredException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hello failed: unknown result");
    }

    public void ping(String arg) throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException
    {
      send_ping(arg);
      recv_ping();
    }

    public void send_ping(String arg) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setArg(arg);
      sendBase("TotalkService:ping", args);
    }

    public void recv_ping() throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.authenticationRequiredException != null) {
        throw result.authenticationRequiredException;
      }
      return;
    }

    public com.tobox.totalk.thrift.types.Review getReviewById(String id) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      send_getReviewById(id);
      return recv_getReviewById();
    }

    public void send_getReviewById(String id) throws org.apache.thrift.TException
    {
      getReviewById_args args = new getReviewById_args();
      args.setId(id);
      sendBase("TotalkService:getReviewById", args);
    }

    public com.tobox.totalk.thrift.types.Review recv_getReviewById() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      getReviewById_result result = new getReviewById_result();
      receiveBase(result, "getReviewById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.noReviewException != null) {
        throw result.noReviewException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReviewById failed: unknown result");
    }

    public List<com.tobox.totalk.thrift.types.Review> getByCreatedAt(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit) throws org.apache.thrift.TException
    {
      send_getByCreatedAt(country, categoryId, offset, limit);
      return recv_getByCreatedAt();
    }

    public void send_getByCreatedAt(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit) throws org.apache.thrift.TException
    {
      getByCreatedAt_args args = new getByCreatedAt_args();
      args.setCountry(country);
      args.setCategoryId(categoryId);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("TotalkService:getByCreatedAt", args);
    }

    public List<com.tobox.totalk.thrift.types.Review> recv_getByCreatedAt() throws org.apache.thrift.TException
    {
      getByCreatedAt_result result = new getByCreatedAt_result();
      receiveBase(result, "getByCreatedAt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByCreatedAt failed: unknown result");
    }

    public List<com.tobox.totalk.thrift.types.Review> getByPopularity(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3) throws org.apache.thrift.TException
    {
      send_getByPopularity(country, categoryId, offset, limit, arg3);
      return recv_getByPopularity();
    }

    public void send_getByPopularity(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3) throws org.apache.thrift.TException
    {
      getByPopularity_args args = new getByPopularity_args();
      args.setCountry(country);
      args.setCategoryId(categoryId);
      args.setOffset(offset);
      args.setLimit(limit);
      args.setArg3(arg3);
      sendBase("TotalkService:getByPopularity", args);
    }

    public List<com.tobox.totalk.thrift.types.Review> recv_getByPopularity() throws org.apache.thrift.TException
    {
      getByPopularity_result result = new getByPopularity_result();
      receiveBase(result, "getByPopularity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByPopularity failed: unknown result");
    }

    public List<com.tobox.totalk.thrift.types.Review> getSubscription(String userId, int categoryId) throws org.apache.thrift.TException
    {
      send_getSubscription(userId, categoryId);
      return recv_getSubscription();
    }

    public void send_getSubscription(String userId, int categoryId) throws org.apache.thrift.TException
    {
      getSubscription_args args = new getSubscription_args();
      args.setUserId(userId);
      args.setCategoryId(categoryId);
      sendBase("TotalkService:getSubscription", args);
    }

    public List<com.tobox.totalk.thrift.types.Review> recv_getSubscription() throws org.apache.thrift.TException
    {
      getSubscription_result result = new getSubscription_result();
      receiveBase(result, "getSubscription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubscription failed: unknown result");
    }

    public List<com.tobox.totalk.thrift.types.Comment> getComments(String reviewId, int offset, int limit) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      send_getComments(reviewId, offset, limit);
      return recv_getComments();
    }

    public void send_getComments(String reviewId, int offset, int limit) throws org.apache.thrift.TException
    {
      getComments_args args = new getComments_args();
      args.setReviewId(reviewId);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("TotalkService:getComments", args);
    }

    public List<com.tobox.totalk.thrift.types.Comment> recv_getComments() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      getComments_result result = new getComments_result();
      receiveBase(result, "getComments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.noReviewException != null) {
        throw result.noReviewException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComments failed: unknown result");
    }

    public List<com.tobox.totalk.thrift.types.Review> getByEntity(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit) throws org.apache.thrift.TException
    {
      send_getByEntity(entityType, entityId, reviewType, offset, limit);
      return recv_getByEntity();
    }

    public void send_getByEntity(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit) throws org.apache.thrift.TException
    {
      getByEntity_args args = new getByEntity_args();
      args.setEntityType(entityType);
      args.setEntityId(entityId);
      args.setReviewType(reviewType);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("TotalkService:getByEntity", args);
    }

    public List<com.tobox.totalk.thrift.types.Review> recv_getByEntity() throws org.apache.thrift.TException
    {
      getByEntity_result result = new getByEntity_result();
      receiveBase(result, "getByEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByEntity failed: unknown result");
    }

    public void setVote(String reviewId, boolean yes) throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      send_setVote(reviewId, yes);
      recv_setVote();
    }

    public void send_setVote(String reviewId, boolean yes) throws org.apache.thrift.TException
    {
      setVote_args args = new setVote_args();
      args.setReviewId(reviewId);
      args.setYes(yes);
      sendBase("TotalkService:setVote", args);
    }

    public void recv_setVote() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException
    {
      setVote_result result = new setVote_result();
      receiveBase(result, "setVote");
      if (result.noReviewException != null) {
        throw result.noReviewException;
      }
      return;
    }

    public com.tobox.totalk.thrift.types.Review addReview(com.tobox.totalk.thrift.types.Review review) throws org.apache.thrift.TException
    {
      send_addReview(review);
      return recv_addReview();
    }

    public void send_addReview(com.tobox.totalk.thrift.types.Review review) throws org.apache.thrift.TException
    {
      addReview_args args = new addReview_args();
      args.setReview(review);
      sendBase("TotalkService:addReview", args);
    }

    public com.tobox.totalk.thrift.types.Review recv_addReview() throws org.apache.thrift.TException
    {
      addReview_result result = new addReview_result();
      receiveBase(result, "addReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addReview failed: unknown result");
    }

    public com.tobox.totalk.thrift.types.Comment addComment(com.tobox.totalk.thrift.types.Comment comment) throws org.apache.thrift.TException
    {
      send_addComment(comment);
      return recv_addComment();
    }

    public void send_addComment(com.tobox.totalk.thrift.types.Comment comment) throws org.apache.thrift.TException
    {
      addComment_args args = new addComment_args();
      args.setComment(comment);
      sendBase("TotalkService:addComment", args);
    }

    public com.tobox.totalk.thrift.types.Comment recv_addComment() throws org.apache.thrift.TException
    {
      addComment_result result = new addComment_result();
      receiveBase(result, "addComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addComment failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hello(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hello_call method_call = new hello_call(arg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hello_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String arg;
      public hello_call(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg = arg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:hello", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hello_args args = new hello_args();
        args.setArg(arg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hello();
      }
    }

    public void ping(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(arg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String arg;
      public ping_call(String arg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg = arg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setArg(arg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void getReviewById(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReviewById_call method_call = new getReviewById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReviewById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getReviewById_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getReviewById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReviewById_args args = new getReviewById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tobox.totalk.thrift.types.Review getResult() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReviewById();
      }
    }

    public void getByCreatedAt(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getByCreatedAt_call method_call = new getByCreatedAt_call(country, categoryId, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getByCreatedAt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tobox.totalk.thrift.types.Country country;
      private int categoryId;
      private int offset;
      private int limit;
      public getByCreatedAt_call(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.country = country;
        this.categoryId = categoryId;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getByCreatedAt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getByCreatedAt_args args = new getByCreatedAt_args();
        args.setCountry(country);
        args.setCategoryId(categoryId);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.tobox.totalk.thrift.types.Review> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getByCreatedAt();
      }
    }

    public void getByPopularity(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getByPopularity_call method_call = new getByPopularity_call(country, categoryId, offset, limit, arg3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getByPopularity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tobox.totalk.thrift.types.Country country;
      private int categoryId;
      private int offset;
      private int limit;
      private long arg3;
      public getByPopularity_call(com.tobox.totalk.thrift.types.Country country, int categoryId, int offset, int limit, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.country = country;
        this.categoryId = categoryId;
        this.offset = offset;
        this.limit = limit;
        this.arg3 = arg3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getByPopularity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getByPopularity_args args = new getByPopularity_args();
        args.setCountry(country);
        args.setCategoryId(categoryId);
        args.setOffset(offset);
        args.setLimit(limit);
        args.setArg3(arg3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.tobox.totalk.thrift.types.Review> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getByPopularity();
      }
    }

    public void getSubscription(String userId, int categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubscription_call method_call = new getSubscription_call(userId, categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubscription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private int categoryId;
      public getSubscription_call(String userId, int categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getSubscription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubscription_args args = new getSubscription_args();
        args.setUserId(userId);
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.tobox.totalk.thrift.types.Review> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubscription();
      }
    }

    public void getComments(String reviewId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComments_call method_call = new getComments_call(reviewId, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reviewId;
      private int offset;
      private int limit;
      public getComments_call(String reviewId, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reviewId = reviewId;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getComments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComments_args args = new getComments_args();
        args.setReviewId(reviewId);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.tobox.totalk.thrift.types.Comment> getResult() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getComments();
      }
    }

    public void getByEntity(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getByEntity_call method_call = new getByEntity_call(entityType, entityId, reviewType, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getByEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tobox.totalk.thrift.types.EntityType entityType;
      private String entityId;
      private com.tobox.totalk.thrift.types.ReviewType reviewType;
      private int offset;
      private int limit;
      public getByEntity_call(com.tobox.totalk.thrift.types.EntityType entityType, String entityId, com.tobox.totalk.thrift.types.ReviewType reviewType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityType = entityType;
        this.entityId = entityId;
        this.reviewType = reviewType;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:getByEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getByEntity_args args = new getByEntity_args();
        args.setEntityType(entityType);
        args.setEntityId(entityId);
        args.setReviewType(reviewType);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.tobox.totalk.thrift.types.Review> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getByEntity();
      }
    }

    public void setVote(String reviewId, boolean yes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setVote_call method_call = new setVote_call(reviewId, yes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setVote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reviewId;
      private boolean yes;
      public setVote_call(String reviewId, boolean yes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reviewId = reviewId;
        this.yes = yes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:setVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setVote_args args = new setVote_args();
        args.setReviewId(reviewId);
        args.setYes(yes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.tobox.totalk.thrift.exceptions.NoReviewException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setVote();
      }
    }

    public void addReview(com.tobox.totalk.thrift.types.Review review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addReview_call method_call = new addReview_call(review, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addReview_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tobox.totalk.thrift.types.Review review;
      public addReview_call(com.tobox.totalk.thrift.types.Review review, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.review = review;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:addReview", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addReview_args args = new addReview_args();
        args.setReview(review);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tobox.totalk.thrift.types.Review getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addReview();
      }
    }

    public void addComment(com.tobox.totalk.thrift.types.Comment comment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addComment_call method_call = new addComment_call(comment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tobox.totalk.thrift.types.Comment comment;
      public addComment_call(com.tobox.totalk.thrift.types.Comment comment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.comment = comment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TotalkService:addComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addComment_args args = new addComment_args();
        args.setComment(comment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tobox.totalk.thrift.types.Comment getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addComment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("TotalkService:hello", new hello());
      processMap.put("TotalkService:ping", new ping());
      processMap.put("TotalkService:getReviewById", new getReviewById());
      processMap.put("TotalkService:getByCreatedAt", new getByCreatedAt());
      processMap.put("TotalkService:getByPopularity", new getByPopularity());
      processMap.put("TotalkService:getSubscription", new getSubscription());
      processMap.put("TotalkService:getComments", new getComments());
      processMap.put("TotalkService:getByEntity", new getByEntity());
      processMap.put("TotalkService:setVote", new setVote());
      processMap.put("TotalkService:addReview", new addReview());
      processMap.put("TotalkService:addComment", new addComment());
      return processMap;
    }

    public static class hello<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hello_args> {
      public hello() {
        super("TotalkService:hello");
      }

      public hello_args getEmptyArgsInstance() {
        return new hello_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hello_result getResult(I iface, hello_args args) throws org.apache.thrift.TException {
        hello_result result = new hello_result();
        try {
          result.success = iface.hello(args.arg);
        } catch (com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException) {
          result.authenticationRequiredException = authenticationRequiredException;
        }
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("TotalkService:ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          iface.ping(args.arg);
        } catch (com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException) {
          result.authenticationRequiredException = authenticationRequiredException;
        }
        return result;
      }
    }

    public static class getReviewById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReviewById_args> {
      public getReviewById() {
        super("TotalkService:getReviewById");
      }

      public getReviewById_args getEmptyArgsInstance() {
        return new getReviewById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReviewById_result getResult(I iface, getReviewById_args args) throws org.apache.thrift.TException {
        getReviewById_result result = new getReviewById_result();
        try {
          result.success = iface.getReviewById(args.id);
        } catch (com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
          result.noReviewException = noReviewException;
        }
        return result;
      }
    }

    public static class getByCreatedAt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByCreatedAt_args> {
      public getByCreatedAt() {
        super("TotalkService:getByCreatedAt");
      }

      public getByCreatedAt_args getEmptyArgsInstance() {
        return new getByCreatedAt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByCreatedAt_result getResult(I iface, getByCreatedAt_args args) throws org.apache.thrift.TException {
        getByCreatedAt_result result = new getByCreatedAt_result();
        result.success = iface.getByCreatedAt(args.country, args.categoryId, args.offset, args.limit);
        return result;
      }
    }

    public static class getByPopularity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByPopularity_args> {
      public getByPopularity() {
        super("TotalkService:getByPopularity");
      }

      public getByPopularity_args getEmptyArgsInstance() {
        return new getByPopularity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByPopularity_result getResult(I iface, getByPopularity_args args) throws org.apache.thrift.TException {
        getByPopularity_result result = new getByPopularity_result();
        result.success = iface.getByPopularity(args.country, args.categoryId, args.offset, args.limit, args.arg3);
        return result;
      }
    }

    public static class getSubscription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubscription_args> {
      public getSubscription() {
        super("TotalkService:getSubscription");
      }

      public getSubscription_args getEmptyArgsInstance() {
        return new getSubscription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubscription_result getResult(I iface, getSubscription_args args) throws org.apache.thrift.TException {
        getSubscription_result result = new getSubscription_result();
        result.success = iface.getSubscription(args.userId, args.categoryId);
        return result;
      }
    }

    public static class getComments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComments_args> {
      public getComments() {
        super("TotalkService:getComments");
      }

      public getComments_args getEmptyArgsInstance() {
        return new getComments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComments_result getResult(I iface, getComments_args args) throws org.apache.thrift.TException {
        getComments_result result = new getComments_result();
        try {
          result.success = iface.getComments(args.reviewId, args.offset, args.limit);
        } catch (com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
          result.noReviewException = noReviewException;
        }
        return result;
      }
    }

    public static class getByEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByEntity_args> {
      public getByEntity() {
        super("TotalkService:getByEntity");
      }

      public getByEntity_args getEmptyArgsInstance() {
        return new getByEntity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByEntity_result getResult(I iface, getByEntity_args args) throws org.apache.thrift.TException {
        getByEntity_result result = new getByEntity_result();
        result.success = iface.getByEntity(args.entityType, args.entityId, args.reviewType, args.offset, args.limit);
        return result;
      }
    }

    public static class setVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setVote_args> {
      public setVote() {
        super("TotalkService:setVote");
      }

      public setVote_args getEmptyArgsInstance() {
        return new setVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setVote_result getResult(I iface, setVote_args args) throws org.apache.thrift.TException {
        setVote_result result = new setVote_result();
        try {
          iface.setVote(args.reviewId, args.yes);
        } catch (com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
          result.noReviewException = noReviewException;
        }
        return result;
      }
    }

    public static class addReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addReview_args> {
      public addReview() {
        super("TotalkService:addReview");
      }

      public addReview_args getEmptyArgsInstance() {
        return new addReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addReview_result getResult(I iface, addReview_args args) throws org.apache.thrift.TException {
        addReview_result result = new addReview_result();
        result.success = iface.addReview(args.review);
        return result;
      }
    }

    public static class addComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addComment_args> {
      public addComment() {
        super("TotalkService:addComment");
      }

      public addComment_args getEmptyArgsInstance() {
        return new addComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addComment_result getResult(I iface, addComment_args args) throws org.apache.thrift.TException {
        addComment_result result = new addComment_result();
        result.success = iface.addComment(args.comment);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hello", new hello());
      processMap.put("ping", new ping());
      processMap.put("getReviewById", new getReviewById());
      processMap.put("getByCreatedAt", new getByCreatedAt());
      processMap.put("getByPopularity", new getByPopularity());
      processMap.put("getSubscription", new getSubscription());
      processMap.put("getComments", new getComments());
      processMap.put("getByEntity", new getByEntity());
      processMap.put("setVote", new setVote());
      processMap.put("addReview", new addReview());
      processMap.put("addComment", new addComment());
      return processMap;
    }

    public static class hello<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hello_args, String> {
      public hello() {
        super("hello");
      }

      public hello_args getEmptyArgsInstance() {
        return new hello_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            hello_result result = new hello_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hello_result result = new hello_result();
            if (e instanceof com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException) {
                        result.authenticationRequiredException = (com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException) e;
                        result.setAuthenticationRequiredExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hello_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.hello(args.arg,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            if (e instanceof com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException) {
                        result.authenticationRequiredException = (com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException) e;
                        result.setAuthenticationRequiredExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(args.arg,resultHandler);
      }
    }

    public static class getReviewById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReviewById_args, com.tobox.totalk.thrift.types.Review> {
      public getReviewById() {
        super("getReviewById");
      }

      public getReviewById_args getEmptyArgsInstance() {
        return new getReviewById_args();
      }

      public AsyncMethodCallback<com.tobox.totalk.thrift.types.Review> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tobox.totalk.thrift.types.Review>() { 
          public void onComplete(com.tobox.totalk.thrift.types.Review o) {
            getReviewById_result result = new getReviewById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReviewById_result result = new getReviewById_result();
            if (e instanceof com.tobox.totalk.thrift.exceptions.NoReviewException) {
                        result.noReviewException = (com.tobox.totalk.thrift.exceptions.NoReviewException) e;
                        result.setNoReviewExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReviewById_args args, org.apache.thrift.async.AsyncMethodCallback<com.tobox.totalk.thrift.types.Review> resultHandler) throws TException {
        iface.getReviewById(args.id,resultHandler);
      }
    }

    public static class getByCreatedAt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getByCreatedAt_args, List<com.tobox.totalk.thrift.types.Review>> {
      public getByCreatedAt() {
        super("getByCreatedAt");
      }

      public getByCreatedAt_args getEmptyArgsInstance() {
        return new getByCreatedAt_args();
      }

      public AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>>() { 
          public void onComplete(List<com.tobox.totalk.thrift.types.Review> o) {
            getByCreatedAt_result result = new getByCreatedAt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getByCreatedAt_result result = new getByCreatedAt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getByCreatedAt_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> resultHandler) throws TException {
        iface.getByCreatedAt(args.country, args.categoryId, args.offset, args.limit,resultHandler);
      }
    }

    public static class getByPopularity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getByPopularity_args, List<com.tobox.totalk.thrift.types.Review>> {
      public getByPopularity() {
        super("getByPopularity");
      }

      public getByPopularity_args getEmptyArgsInstance() {
        return new getByPopularity_args();
      }

      public AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>>() { 
          public void onComplete(List<com.tobox.totalk.thrift.types.Review> o) {
            getByPopularity_result result = new getByPopularity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getByPopularity_result result = new getByPopularity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getByPopularity_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> resultHandler) throws TException {
        iface.getByPopularity(args.country, args.categoryId, args.offset, args.limit, args.arg3,resultHandler);
      }
    }

    public static class getSubscription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubscription_args, List<com.tobox.totalk.thrift.types.Review>> {
      public getSubscription() {
        super("getSubscription");
      }

      public getSubscription_args getEmptyArgsInstance() {
        return new getSubscription_args();
      }

      public AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>>() { 
          public void onComplete(List<com.tobox.totalk.thrift.types.Review> o) {
            getSubscription_result result = new getSubscription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubscription_result result = new getSubscription_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubscription_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> resultHandler) throws TException {
        iface.getSubscription(args.userId, args.categoryId,resultHandler);
      }
    }

    public static class getComments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComments_args, List<com.tobox.totalk.thrift.types.Comment>> {
      public getComments() {
        super("getComments");
      }

      public getComments_args getEmptyArgsInstance() {
        return new getComments_args();
      }

      public AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Comment>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Comment>>() { 
          public void onComplete(List<com.tobox.totalk.thrift.types.Comment> o) {
            getComments_result result = new getComments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComments_result result = new getComments_result();
            if (e instanceof com.tobox.totalk.thrift.exceptions.NoReviewException) {
                        result.noReviewException = (com.tobox.totalk.thrift.exceptions.NoReviewException) e;
                        result.setNoReviewExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComments_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Comment>> resultHandler) throws TException {
        iface.getComments(args.reviewId, args.offset, args.limit,resultHandler);
      }
    }

    public static class getByEntity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getByEntity_args, List<com.tobox.totalk.thrift.types.Review>> {
      public getByEntity() {
        super("getByEntity");
      }

      public getByEntity_args getEmptyArgsInstance() {
        return new getByEntity_args();
      }

      public AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>>() { 
          public void onComplete(List<com.tobox.totalk.thrift.types.Review> o) {
            getByEntity_result result = new getByEntity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getByEntity_result result = new getByEntity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getByEntity_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.tobox.totalk.thrift.types.Review>> resultHandler) throws TException {
        iface.getByEntity(args.entityType, args.entityId, args.reviewType, args.offset, args.limit,resultHandler);
      }
    }

    public static class setVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setVote_args, Void> {
      public setVote() {
        super("setVote");
      }

      public setVote_args getEmptyArgsInstance() {
        return new setVote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setVote_result result = new setVote_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setVote_result result = new setVote_result();
            if (e instanceof com.tobox.totalk.thrift.exceptions.NoReviewException) {
                        result.noReviewException = (com.tobox.totalk.thrift.exceptions.NoReviewException) e;
                        result.setNoReviewExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setVote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setVote(args.reviewId, args.yes,resultHandler);
      }
    }

    public static class addReview<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addReview_args, com.tobox.totalk.thrift.types.Review> {
      public addReview() {
        super("addReview");
      }

      public addReview_args getEmptyArgsInstance() {
        return new addReview_args();
      }

      public AsyncMethodCallback<com.tobox.totalk.thrift.types.Review> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tobox.totalk.thrift.types.Review>() { 
          public void onComplete(com.tobox.totalk.thrift.types.Review o) {
            addReview_result result = new addReview_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addReview_result result = new addReview_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addReview_args args, org.apache.thrift.async.AsyncMethodCallback<com.tobox.totalk.thrift.types.Review> resultHandler) throws TException {
        iface.addReview(args.review,resultHandler);
      }
    }

    public static class addComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addComment_args, com.tobox.totalk.thrift.types.Comment> {
      public addComment() {
        super("addComment");
      }

      public addComment_args getEmptyArgsInstance() {
        return new addComment_args();
      }

      public AsyncMethodCallback<com.tobox.totalk.thrift.types.Comment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tobox.totalk.thrift.types.Comment>() { 
          public void onComplete(com.tobox.totalk.thrift.types.Comment o) {
            addComment_result result = new addComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addComment_result result = new addComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.tobox.totalk.thrift.types.Comment> resultHandler) throws TException {
        iface.addComment(args.comment,resultHandler);
      }
    }

  }

  public static class hello_args implements org.apache.thrift.TBase<hello_args, hello_args._Fields>, java.io.Serializable, Cloneable, Comparable<hello_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_args");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new hello_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new hello_argsTupleSchemeFactory();

    private String arg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_args.class, metaDataMap);
    }

    public hello_args() {
    }

    public hello_args(
      String arg)
    {
      this();
      this.arg = arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_args(hello_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(hello_args other) {
      if (other.isSetArg()) {
        this.arg = other.arg;
      }else{
        this.arg = null;
      }
    }

    public hello_args deepCopy() {
      final hello_args o = new hello_args();
      o.deepCopyFields(this);
      return o;
    }

    public hello_args newInstance() {
      return new hello_args();
    }

    @Override
    public void clear() {
      this.arg = null;
    }

    public String getArg() {
      return this.arg;
    }

    public void setArg(String arg) {
      this.arg = arg;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_args)
        return this.equals((hello_args)that);
      return false;
    }

    public boolean equals(hello_args that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_arg = true && (isSetArg());
      list.add(present_arg);
      if (present_arg)
        list.add(arg);

      return list.hashCode();
    }

    @Override
    public int compareTo(hello_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(other.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, other.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hello_args(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new hello_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new hello_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_argsStandardSchemeFactory implements SchemeFactory {
      public hello_argsStandardScheme getScheme() {
        return new hello_argsStandardScheme();
      }
    }

    private static class hello_argsStandardScheme extends StandardScheme<hello_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg = iprot.readString();
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          oprot.writeString(struct.arg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_argsTryloadSchemeFactory implements SchemeFactory {
      public hello_argsTryloadScheme getScheme() {
        return new hello_argsTryloadScheme();
      }
    }

    private static class hello_argsTryloadScheme extends StandardScheme<hello_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg = iprot.readString();
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _arg= struct.getArg();
        if ( _arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          oprot.writeString(_arg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_argsTupleSchemeFactory implements SchemeFactory {
      public hello_argsTupleScheme getScheme() {
        return new hello_argsTupleScheme();
      }
    }

    private static class hello_argsTupleScheme extends TupleScheme<hello_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg()) {
          oprot.writeString(struct.arg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arg = iprot.readString();
          struct.setArgIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hello_result implements org.apache.thrift.TBase<hello_result, hello_result._Fields>, java.io.Serializable, Cloneable, Comparable<hello_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticationRequiredException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new hello_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new hello_resultTupleSchemeFactory();

    private String success; // required
    private com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTHENTICATION_REQUIRED_EXCEPTION((short)1, "authenticationRequiredException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
            return AUTHENTICATION_REQUIRED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION_REQUIRED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authenticationRequiredException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_result.class, metaDataMap);
    }

    public hello_result() {
    }

    public hello_result(
      String success,
      com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException)
    {
      this();
      this.success = success;
      this.authenticationRequiredException = authenticationRequiredException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_result(hello_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(hello_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }else{
        this.success = null;
      }
      if (other.isSetAuthenticationRequiredException()) {
        this.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException(other.authenticationRequiredException);
      }else{
        this.authenticationRequiredException = null;
      }
    }

    public hello_result deepCopy() {
      final hello_result o = new hello_result();
      o.deepCopyFields(this);
      return o;
    }

    public hello_result newInstance() {
      return new hello_result();
    }

    @Override
    public void clear() {
      this.success = null;
      this.authenticationRequiredException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException getAuthenticationRequiredException() {
      return this.authenticationRequiredException;
    }

    public void setAuthenticationRequiredException(com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException) {
      this.authenticationRequiredException = authenticationRequiredException;
    }

    public void unsetAuthenticationRequiredException() {
      this.authenticationRequiredException = null;
    }

    /** Returns true if field authenticationRequiredException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthenticationRequiredException() {
      return this.authenticationRequiredException != null;
    }

    public void setAuthenticationRequiredExceptionIsSet(boolean value) {
      if (!value) {
        this.authenticationRequiredException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AUTHENTICATION_REQUIRED_EXCEPTION:
        if (value == null) {
          unsetAuthenticationRequiredException();
        } else {
          setAuthenticationRequiredException((com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTHENTICATION_REQUIRED_EXCEPTION:
        return getAuthenticationRequiredException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTHENTICATION_REQUIRED_EXCEPTION:
        return isSetAuthenticationRequiredException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_result)
        return this.equals((hello_result)that);
      return false;
    }

    public boolean equals(hello_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authenticationRequiredException = true && this.isSetAuthenticationRequiredException();
      boolean that_present_authenticationRequiredException = true && that.isSetAuthenticationRequiredException();
      if (this_present_authenticationRequiredException || that_present_authenticationRequiredException) {
        if (!(this_present_authenticationRequiredException && that_present_authenticationRequiredException))
          return false;
        if (!this.authenticationRequiredException.equals(that.authenticationRequiredException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authenticationRequiredException = true && (isSetAuthenticationRequiredException());
      list.add(present_authenticationRequiredException);
      if (present_authenticationRequiredException)
        list.add(authenticationRequiredException);

      return list.hashCode();
    }

    @Override
    public int compareTo(hello_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthenticationRequiredException()).compareTo(other.isSetAuthenticationRequiredException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationRequiredException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticationRequiredException, other.authenticationRequiredException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hello_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authenticationRequiredException:");
      if (this.authenticationRequiredException == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationRequiredException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new hello_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new hello_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_resultStandardSchemeFactory implements SchemeFactory {
      public hello_resultStandardScheme getScheme() {
        return new hello_resultStandardScheme();
      }
    }

    private static class hello_resultStandardScheme extends StandardScheme<hello_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
                struct.authenticationRequiredException.read(iprot);
                struct.setAuthenticationRequiredExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.authenticationRequiredException != null) {
          oprot.writeFieldBegin(AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC);
          struct.authenticationRequiredException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_resultTryloadSchemeFactory implements SchemeFactory {
      public hello_resultTryloadScheme getScheme() {
        return new hello_resultTryloadScheme();
      }
    }

    private static class hello_resultTryloadScheme extends StandardScheme<hello_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
                struct.authenticationRequiredException.read(iprot);
                struct.setAuthenticationRequiredExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(_success);
          oprot.writeFieldEnd();
        }
        final com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException _authenticationRequiredException= struct.getAuthenticationRequiredException();
        if ( _authenticationRequiredException != null) {
          oprot.writeFieldBegin(AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC);
          _authenticationRequiredException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_resultTupleSchemeFactory implements SchemeFactory {
      public hello_resultTupleScheme getScheme() {
        return new hello_resultTupleScheme();
      }
    }

    private static class hello_resultTupleScheme extends TupleScheme<hello_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthenticationRequiredException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAuthenticationRequiredException()) {
          struct.authenticationRequiredException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
          struct.authenticationRequiredException.read(iprot);
          struct.setAuthenticationRequiredExceptionIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();

    private String arg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String arg)
    {
      this();
      this.arg = arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(ping_args other) {
      if (other.isSetArg()) {
        this.arg = other.arg;
      }else{
        this.arg = null;
      }
    }

    public ping_args deepCopy() {
      final ping_args o = new ping_args();
      o.deepCopyFields(this);
      return o;
    }

    public ping_args newInstance() {
      return new ping_args();
    }

    @Override
    public void clear() {
      this.arg = null;
    }

    public String getArg() {
      return this.arg;
    }

    public void setArg(String arg) {
      this.arg = arg;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_arg = true && (isSetArg());
      list.add(present_arg);
      if (present_arg)
        list.add(arg);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(other.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, other.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new ping_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new ping_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg = iprot.readString();
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          oprot.writeString(struct.arg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTryloadSchemeFactory implements SchemeFactory {
      public ping_argsTryloadScheme getScheme() {
        return new ping_argsTryloadScheme();
      }
    }

    private static class ping_argsTryloadScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg = iprot.readString();
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _arg= struct.getArg();
        if ( _arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          oprot.writeString(_arg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg()) {
          oprot.writeString(struct.arg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arg = iprot.readString();
          struct.setArgIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticationRequiredException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    private com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION_REQUIRED_EXCEPTION((short)1, "authenticationRequiredException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
            return AUTHENTICATION_REQUIRED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_REQUIRED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authenticationRequiredException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException)
    {
      this();
      this.authenticationRequiredException = authenticationRequiredException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(ping_result other) {
      if (other.isSetAuthenticationRequiredException()) {
        this.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException(other.authenticationRequiredException);
      }else{
        this.authenticationRequiredException = null;
      }
    }

    public ping_result deepCopy() {
      final ping_result o = new ping_result();
      o.deepCopyFields(this);
      return o;
    }

    public ping_result newInstance() {
      return new ping_result();
    }

    @Override
    public void clear() {
      this.authenticationRequiredException = null;
    }

    public com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException getAuthenticationRequiredException() {
      return this.authenticationRequiredException;
    }

    public void setAuthenticationRequiredException(com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException authenticationRequiredException) {
      this.authenticationRequiredException = authenticationRequiredException;
    }

    public void unsetAuthenticationRequiredException() {
      this.authenticationRequiredException = null;
    }

    /** Returns true if field authenticationRequiredException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthenticationRequiredException() {
      return this.authenticationRequiredException != null;
    }

    public void setAuthenticationRequiredExceptionIsSet(boolean value) {
      if (!value) {
        this.authenticationRequiredException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_REQUIRED_EXCEPTION:
        if (value == null) {
          unsetAuthenticationRequiredException();
        } else {
          setAuthenticationRequiredException((com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_REQUIRED_EXCEPTION:
        return getAuthenticationRequiredException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_REQUIRED_EXCEPTION:
        return isSetAuthenticationRequiredException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_authenticationRequiredException = true && this.isSetAuthenticationRequiredException();
      boolean that_present_authenticationRequiredException = true && that.isSetAuthenticationRequiredException();
      if (this_present_authenticationRequiredException || that_present_authenticationRequiredException) {
        if (!(this_present_authenticationRequiredException && that_present_authenticationRequiredException))
          return false;
        if (!this.authenticationRequiredException.equals(that.authenticationRequiredException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authenticationRequiredException = true && (isSetAuthenticationRequiredException());
      list.add(present_authenticationRequiredException);
      if (present_authenticationRequiredException)
        list.add(authenticationRequiredException);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthenticationRequiredException()).compareTo(other.isSetAuthenticationRequiredException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationRequiredException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticationRequiredException, other.authenticationRequiredException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("authenticationRequiredException:");
      if (this.authenticationRequiredException == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationRequiredException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new ping_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new ping_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
                struct.authenticationRequiredException.read(iprot);
                struct.setAuthenticationRequiredExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authenticationRequiredException != null) {
          oprot.writeFieldBegin(AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC);
          struct.authenticationRequiredException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTryloadSchemeFactory implements SchemeFactory {
      public ping_resultTryloadScheme getScheme() {
        return new ping_resultTryloadScheme();
      }
    }

    private static class ping_resultTryloadScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION_REQUIRED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
                struct.authenticationRequiredException.read(iprot);
                struct.setAuthenticationRequiredExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException _authenticationRequiredException= struct.getAuthenticationRequiredException();
        if ( _authenticationRequiredException != null) {
          oprot.writeFieldBegin(AUTHENTICATION_REQUIRED_EXCEPTION_FIELD_DESC);
          _authenticationRequiredException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthenticationRequiredException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthenticationRequiredException()) {
          struct.authenticationRequiredException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authenticationRequiredException = new com.tobox.totalk.thrift.exceptions.AuthenticationRequiredException();
          struct.authenticationRequiredException.read(iprot);
          struct.setAuthenticationRequiredExceptionIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReviewById_args implements org.apache.thrift.TBase<getReviewById_args, getReviewById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReviewById_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReviewById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getReviewById_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getReviewById_argsTupleSchemeFactory();

    private String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReviewById_args.class, metaDataMap);
    }

    public getReviewById_args() {
    }

    public getReviewById_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReviewById_args(getReviewById_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getReviewById_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }else{
        this.id = null;
      }
    }

    public getReviewById_args deepCopy() {
      final getReviewById_args o = new getReviewById_args();
      o.deepCopyFields(this);
      return o;
    }

    public getReviewById_args newInstance() {
      return new getReviewById_args();
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReviewById_args)
        return this.equals((getReviewById_args)that);
      return false;
    }

    public boolean equals(getReviewById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReviewById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReviewById_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getReviewById_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getReviewById_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReviewById_argsStandardSchemeFactory implements SchemeFactory {
      public getReviewById_argsStandardScheme getScheme() {
        return new getReviewById_argsStandardScheme();
      }
    }

    private static class getReviewById_argsStandardScheme extends StandardScheme<getReviewById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewById_argsTryloadSchemeFactory implements SchemeFactory {
      public getReviewById_argsTryloadScheme getScheme() {
        return new getReviewById_argsTryloadScheme();
      }
    }

    private static class getReviewById_argsTryloadScheme extends StandardScheme<getReviewById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _id= struct.getId();
        if ( _id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewById_argsTupleSchemeFactory implements SchemeFactory {
      public getReviewById_argsTupleScheme getScheme() {
        return new getReviewById_argsTupleScheme();
      }
    }

    private static class getReviewById_argsTupleScheme extends TupleScheme<getReviewById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReviewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReviewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReviewById_result implements org.apache.thrift.TBase<getReviewById_result, getReviewById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReviewById_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReviewById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NO_REVIEW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("noReviewException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getReviewById_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getReviewById_resultTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Review success; // required
    private com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NO_REVIEW_EXCEPTION((short)1, "noReviewException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NO_REVIEW_EXCEPTION
            return NO_REVIEW_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class)));
      tmpMap.put(_Fields.NO_REVIEW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("noReviewException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.exceptions.NoReviewException.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReviewById_result.class, metaDataMap);
    }

    public getReviewById_result() {
    }

    public getReviewById_result(
      com.tobox.totalk.thrift.types.Review success,
      com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException)
    {
      this();
      this.success = success;
      this.noReviewException = noReviewException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReviewById_result(getReviewById_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getReviewById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tobox.totalk.thrift.types.Review(other.success);
      }else{
        this.success = null;
      }
      if (other.isSetNoReviewException()) {
        this.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException(other.noReviewException);
      }else{
        this.noReviewException = null;
      }
    }

    public getReviewById_result deepCopy() {
      final getReviewById_result o = new getReviewById_result();
      o.deepCopyFields(this);
      return o;
    }

    public getReviewById_result newInstance() {
      return new getReviewById_result();
    }

    @Override
    public void clear() {
      this.success = null;
      this.noReviewException = null;
    }

    public com.tobox.totalk.thrift.types.Review getSuccess() {
      return this.success;
    }

    public void setSuccess(com.tobox.totalk.thrift.types.Review success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tobox.totalk.thrift.exceptions.NoReviewException getNoReviewException() {
      return this.noReviewException;
    }

    public void setNoReviewException(com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
      this.noReviewException = noReviewException;
    }

    public void unsetNoReviewException() {
      this.noReviewException = null;
    }

    /** Returns true if field noReviewException is set (has been assigned a value) and false otherwise */
    public boolean isSetNoReviewException() {
      return this.noReviewException != null;
    }

    public void setNoReviewExceptionIsSet(boolean value) {
      if (!value) {
        this.noReviewException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tobox.totalk.thrift.types.Review)value);
        }
        break;

      case NO_REVIEW_EXCEPTION:
        if (value == null) {
          unsetNoReviewException();
        } else {
          setNoReviewException((com.tobox.totalk.thrift.exceptions.NoReviewException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NO_REVIEW_EXCEPTION:
        return getNoReviewException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NO_REVIEW_EXCEPTION:
        return isSetNoReviewException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReviewById_result)
        return this.equals((getReviewById_result)that);
      return false;
    }

    public boolean equals(getReviewById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_noReviewException = true && this.isSetNoReviewException();
      boolean that_present_noReviewException = true && that.isSetNoReviewException();
      if (this_present_noReviewException || that_present_noReviewException) {
        if (!(this_present_noReviewException && that_present_noReviewException))
          return false;
        if (!this.noReviewException.equals(that.noReviewException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_noReviewException = true && (isSetNoReviewException());
      list.add(present_noReviewException);
      if (present_noReviewException)
        list.add(noReviewException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReviewById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoReviewException()).compareTo(other.isSetNoReviewException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoReviewException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReviewException, other.noReviewException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReviewById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noReviewException:");
      if (this.noReviewException == null) {
        sb.append("null");
      } else {
        sb.append(this.noReviewException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getReviewById_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getReviewById_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReviewById_resultStandardSchemeFactory implements SchemeFactory {
      public getReviewById_resultStandardScheme getScheme() {
        return new getReviewById_resultStandardScheme();
      }
    }

    private static class getReviewById_resultStandardScheme extends StandardScheme<getReviewById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Review();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          struct.noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewById_resultTryloadSchemeFactory implements SchemeFactory {
      public getReviewById_resultTryloadScheme getScheme() {
        return new getReviewById_resultTryloadScheme();
      }
    }

    private static class getReviewById_resultTryloadScheme extends StandardScheme<getReviewById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Review();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.types.Review _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          _success.write(oprot);
          oprot.writeFieldEnd();
        }
        final com.tobox.totalk.thrift.exceptions.NoReviewException _noReviewException= struct.getNoReviewException();
        if ( _noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          _noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewById_resultTupleSchemeFactory implements SchemeFactory {
      public getReviewById_resultTupleScheme getScheme() {
        return new getReviewById_resultTupleScheme();
      }
    }

    private static class getReviewById_resultTupleScheme extends TupleScheme<getReviewById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReviewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNoReviewException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNoReviewException()) {
          struct.noReviewException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReviewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.tobox.totalk.thrift.types.Review();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
          struct.noReviewException.read(iprot);
          struct.setNoReviewExceptionIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByCreatedAt_args implements org.apache.thrift.TBase<getByCreatedAt_args, getByCreatedAt_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByCreatedAt_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByCreatedAt_args");

    private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByCreatedAt_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByCreatedAt_argsTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Country country; // required
    private int categoryId; // required
    private int offset; // required
    private int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.tobox.totalk.thrift.types.Country
       */
      COUNTRY((short)1, "country"),
      CATEGORY_ID((short)2, "categoryId"),
      OFFSET((short)3, "offset"),
      LIMIT((short)4, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTRY
            return COUNTRY;
          case 2: // CATEGORY_ID
            return CATEGORY_ID;
          case 3: // OFFSET
            return OFFSET;
          case 4: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.tobox.totalk.thrift.types.Country.class)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByCreatedAt_args.class, metaDataMap);
    }

    public getByCreatedAt_args() {
    }

    public getByCreatedAt_args(
      com.tobox.totalk.thrift.types.Country country,
      int categoryId,
      int offset,
      int limit)
    {
      this();
      this.country = country;
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByCreatedAt_args(getByCreatedAt_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByCreatedAt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCountry()) {
        this.country = other.country;
      }else{
        this.country = null;
      }
      this.categoryId = other.categoryId;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public getByCreatedAt_args deepCopy() {
      final getByCreatedAt_args o = new getByCreatedAt_args();
      o.deepCopyFields(this);
      return o;
    }

    public getByCreatedAt_args newInstance() {
      return new getByCreatedAt_args();
    }

    @Override
    public void clear() {
      this.country = null;
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.Country
     */
    public com.tobox.totalk.thrift.types.Country getCountry() {
      return this.country;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.Country
     */
    public void setCountry(com.tobox.totalk.thrift.types.Country country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public void setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public void setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          setCountry((com.tobox.totalk.thrift.types.Country)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTRY:
        return getCountry();

      case CATEGORY_ID:
        return getCategoryId();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTRY:
        return isSetCountry();
      case CATEGORY_ID:
        return isSetCategoryId();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByCreatedAt_args)
        return this.equals((getByCreatedAt_args)that);
      return false;
    }

    public boolean equals(getByCreatedAt_args that) {
      if (that == null)
        return false;

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_country = true && (isSetCountry());
      list.add(present_country);
      if (present_country)
        list.add(country.getValue());

      boolean present_categoryId = true;
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByCreatedAt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByCreatedAt_args(");
      boolean first = true;

      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByCreatedAt_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new getByCreatedAt_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByCreatedAt_argsStandardSchemeFactory implements SchemeFactory {
      public getByCreatedAt_argsStandardScheme getScheme() {
        return new getByCreatedAt_argsStandardScheme();
      }
    }

    private static class getByCreatedAt_argsStandardScheme extends StandardScheme<getByCreatedAt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
                struct.setCountryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.country != null) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeI32(struct.country.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByCreatedAt_argsTryloadSchemeFactory implements SchemeFactory {
      public getByCreatedAt_argsTryloadScheme getScheme() {
        return new getByCreatedAt_argsTryloadScheme();
      }
    }

    private static class getByCreatedAt_argsTryloadScheme extends StandardScheme<getByCreatedAt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
                struct.setCountryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.country != null) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeI32(struct.country.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.isSetCategoryId()) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          final int _categoryId= struct.getCategoryId();
          oprot.writeI32(_categoryId);
          oprot.writeFieldEnd();
        }
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          final int _offset= struct.getOffset();
          oprot.writeI32(_offset);
          oprot.writeFieldEnd();
        }
        if (struct.isSetLimit()) {
          oprot.writeFieldBegin(LIMIT_FIELD_DESC);
          final int _limit= struct.getLimit();
          oprot.writeI32(_limit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByCreatedAt_argsTupleSchemeFactory implements SchemeFactory {
      public getByCreatedAt_argsTupleScheme getScheme() {
        return new getByCreatedAt_argsTupleScheme();
      }
    }

    private static class getByCreatedAt_argsTupleScheme extends TupleScheme<getByCreatedAt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountry()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryId()) {
          optionals.set(1);
        }
        if (struct.isSetOffset()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCountry()) {
          oprot.writeI32(struct.country.getValue());
        }
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByCreatedAt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
          struct.setCountryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByCreatedAt_result implements org.apache.thrift.TBase<getByCreatedAt_result, getByCreatedAt_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByCreatedAt_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByCreatedAt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByCreatedAt_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByCreatedAt_resultTupleSchemeFactory();

    private List<com.tobox.totalk.thrift.types.Review> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByCreatedAt_result.class, metaDataMap);
    }

    public getByCreatedAt_result() {
    }

    public getByCreatedAt_result(
      List<com.tobox.totalk.thrift.types.Review> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByCreatedAt_result(getByCreatedAt_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByCreatedAt_result other) {
      if (other.isSetSuccess()) {
        List<com.tobox.totalk.thrift.types.Review> __this__success = new ArrayList<com.tobox.totalk.thrift.types.Review>(other.success.size());
        for (com.tobox.totalk.thrift.types.Review other_element : other.success) {
          __this__success.add(new com.tobox.totalk.thrift.types.Review(other_element));
        }
        this.success = __this__success;
      }else{
        this.success = null;
      }
    }

    public getByCreatedAt_result deepCopy() {
      final getByCreatedAt_result o = new getByCreatedAt_result();
      o.deepCopyFields(this);
      return o;
    }

    public getByCreatedAt_result newInstance() {
      return new getByCreatedAt_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tobox.totalk.thrift.types.Review> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tobox.totalk.thrift.types.Review elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.tobox.totalk.thrift.types.Review>();
      }
      this.success.add(elem);
    }

    public List<com.tobox.totalk.thrift.types.Review> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.tobox.totalk.thrift.types.Review> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.tobox.totalk.thrift.types.Review>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByCreatedAt_result)
        return this.equals((getByCreatedAt_result)that);
      return false;
    }

    public boolean equals(getByCreatedAt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByCreatedAt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByCreatedAt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByCreatedAt_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getByCreatedAt_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByCreatedAt_resultStandardSchemeFactory implements SchemeFactory {
      public getByCreatedAt_resultStandardScheme getScheme() {
        return new getByCreatedAt_resultStandardScheme();
      }
    }

    private static class getByCreatedAt_resultStandardScheme extends StandardScheme<getByCreatedAt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list0.size);
                  com.tobox.totalk.thrift.types.Review _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.tobox.totalk.thrift.types.Review();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByCreatedAt_resultTryloadSchemeFactory implements SchemeFactory {
      public getByCreatedAt_resultTryloadScheme getScheme() {
        return new getByCreatedAt_resultTryloadScheme();
      }
    }

    private static class getByCreatedAt_resultTryloadScheme extends StandardScheme<getByCreatedAt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list4.size);
                  com.tobox.totalk.thrift.types.Review _elem5;
                  for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                  {
                    _elem5 = new com.tobox.totalk.thrift.types.Review();
                    _elem5.read(iprot);
                    struct.success.add(_elem5);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final List<com.tobox.totalk.thrift.types.Review> _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter7 : _success)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByCreatedAt_resultTupleSchemeFactory implements SchemeFactory {
      public getByCreatedAt_resultTupleScheme getScheme() {
        return new getByCreatedAt_resultTupleScheme();
      }
    }

    private static class getByCreatedAt_resultTupleScheme extends TupleScheme<getByCreatedAt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tobox.totalk.thrift.types.Review _iter8 : struct.success)
            {
              _iter8.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByCreatedAt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list9 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list9.size);
            com.tobox.totalk.thrift.types.Review _elem10;
            for (int _i11 = 0; _i11 < _list9.size; ++_i11)
            {
              _elem10 = new com.tobox.totalk.thrift.types.Review();
              _elem10.read(iprot);
              struct.success.add(_elem10);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByPopularity_args implements org.apache.thrift.TBase<getByPopularity_args, getByPopularity_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByPopularity_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByPopularity_args");

    private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByPopularity_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByPopularity_argsTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Country country; // required
    private int categoryId; // required
    private int offset; // required
    private int limit; // required
    private long arg3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.tobox.totalk.thrift.types.Country
       */
      COUNTRY((short)1, "country"),
      CATEGORY_ID((short)2, "categoryId"),
      OFFSET((short)3, "offset"),
      LIMIT((short)4, "limit"),
      ARG3((short)5, "arg3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTRY
            return COUNTRY;
          case 2: // CATEGORY_ID
            return CATEGORY_ID;
          case 3: // OFFSET
            return OFFSET;
          case 4: // LIMIT
            return LIMIT;
          case 5: // ARG3
            return ARG3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private static final int __ARG3_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.tobox.totalk.thrift.types.Country.class)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByPopularity_args.class, metaDataMap);
    }

    public getByPopularity_args() {
    }

    public getByPopularity_args(
      com.tobox.totalk.thrift.types.Country country,
      int categoryId,
      int offset,
      int limit,
      long arg3)
    {
      this();
      this.country = country;
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByPopularity_args(getByPopularity_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByPopularity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCountry()) {
        this.country = other.country;
      }else{
        this.country = null;
      }
      this.categoryId = other.categoryId;
      this.offset = other.offset;
      this.limit = other.limit;
      this.arg3 = other.arg3;
    }

    public getByPopularity_args deepCopy() {
      final getByPopularity_args o = new getByPopularity_args();
      o.deepCopyFields(this);
      return o;
    }

    public getByPopularity_args newInstance() {
      return new getByPopularity_args();
    }

    @Override
    public void clear() {
      this.country = null;
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
      setArg3IsSet(false);
      this.arg3 = 0;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.Country
     */
    public com.tobox.totalk.thrift.types.Country getCountry() {
      return this.country;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.Country
     */
    public void setCountry(com.tobox.totalk.thrift.types.Country country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public void setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public void setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public long getArg3() {
      return this.arg3;
    }

    public void setArg3(long arg3) {
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    public void unsetArg3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg3() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    public void setArg3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG3_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          setCountry((com.tobox.totalk.thrift.types.Country)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case ARG3:
        if (value == null) {
          unsetArg3();
        } else {
          setArg3((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTRY:
        return getCountry();

      case CATEGORY_ID:
        return getCategoryId();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      case ARG3:
        return getArg3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTRY:
        return isSetCountry();
      case CATEGORY_ID:
        return isSetCategoryId();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      case ARG3:
        return isSetArg3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByPopularity_args)
        return this.equals((getByPopularity_args)that);
      return false;
    }

    public boolean equals(getByPopularity_args that) {
      if (that == null)
        return false;

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_arg3 = true;
      boolean that_present_arg3 = true;
      if (this_present_arg3 || that_present_arg3) {
        if (!(this_present_arg3 && that_present_arg3))
          return false;
        if (this.arg3 != that.arg3)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_country = true && (isSetCountry());
      list.add(present_country);
      if (present_country)
        list.add(country.getValue());

      boolean present_categoryId = true;
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      boolean present_arg3 = true;
      list.add(present_arg3);
      if (present_arg3)
        list.add(arg3);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByPopularity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByPopularity_args(");
      boolean first = true;

      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg3:");
      sb.append(this.arg3);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByPopularity_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new getByPopularity_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByPopularity_argsStandardSchemeFactory implements SchemeFactory {
      public getByPopularity_argsStandardScheme getScheme() {
        return new getByPopularity_argsStandardScheme();
      }
    }

    private static class getByPopularity_argsStandardScheme extends StandardScheme<getByPopularity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByPopularity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
                struct.setCountryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg3 = iprot.readI64();
                struct.setArg3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByPopularity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.country != null) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeI32(struct.country.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARG3_FIELD_DESC);
        oprot.writeI64(struct.arg3);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByPopularity_argsTryloadSchemeFactory implements SchemeFactory {
      public getByPopularity_argsTryloadScheme getScheme() {
        return new getByPopularity_argsTryloadScheme();
      }
    }

    private static class getByPopularity_argsTryloadScheme extends StandardScheme<getByPopularity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByPopularity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
                struct.setCountryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg3 = iprot.readI64();
                struct.setArg3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByPopularity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.country != null) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeI32(struct.country.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.isSetCategoryId()) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          final int _categoryId= struct.getCategoryId();
          oprot.writeI32(_categoryId);
          oprot.writeFieldEnd();
        }
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          final int _offset= struct.getOffset();
          oprot.writeI32(_offset);
          oprot.writeFieldEnd();
        }
        if (struct.isSetLimit()) {
          oprot.writeFieldBegin(LIMIT_FIELD_DESC);
          final int _limit= struct.getLimit();
          oprot.writeI32(_limit);
          oprot.writeFieldEnd();
        }
        if (struct.isSetArg3()) {
          oprot.writeFieldBegin(ARG3_FIELD_DESC);
          final long _arg3= struct.getArg3();
          oprot.writeI64(_arg3);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByPopularity_argsTupleSchemeFactory implements SchemeFactory {
      public getByPopularity_argsTupleScheme getScheme() {
        return new getByPopularity_argsTupleScheme();
      }
    }

    private static class getByPopularity_argsTupleScheme extends TupleScheme<getByPopularity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByPopularity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountry()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryId()) {
          optionals.set(1);
        }
        if (struct.isSetOffset()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        if (struct.isSetArg3()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCountry()) {
          oprot.writeI32(struct.country.getValue());
        }
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetArg3()) {
          oprot.writeI64(struct.arg3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByPopularity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
          struct.setCountryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(4)) {
          struct.arg3 = iprot.readI64();
          struct.setArg3IsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByPopularity_result implements org.apache.thrift.TBase<getByPopularity_result, getByPopularity_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByPopularity_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByPopularity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByPopularity_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByPopularity_resultTupleSchemeFactory();

    private List<com.tobox.totalk.thrift.types.Review> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByPopularity_result.class, metaDataMap);
    }

    public getByPopularity_result() {
    }

    public getByPopularity_result(
      List<com.tobox.totalk.thrift.types.Review> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByPopularity_result(getByPopularity_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByPopularity_result other) {
      if (other.isSetSuccess()) {
        List<com.tobox.totalk.thrift.types.Review> __this__success = new ArrayList<com.tobox.totalk.thrift.types.Review>(other.success.size());
        for (com.tobox.totalk.thrift.types.Review other_element : other.success) {
          __this__success.add(new com.tobox.totalk.thrift.types.Review(other_element));
        }
        this.success = __this__success;
      }else{
        this.success = null;
      }
    }

    public getByPopularity_result deepCopy() {
      final getByPopularity_result o = new getByPopularity_result();
      o.deepCopyFields(this);
      return o;
    }

    public getByPopularity_result newInstance() {
      return new getByPopularity_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tobox.totalk.thrift.types.Review> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tobox.totalk.thrift.types.Review elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.tobox.totalk.thrift.types.Review>();
      }
      this.success.add(elem);
    }

    public List<com.tobox.totalk.thrift.types.Review> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.tobox.totalk.thrift.types.Review> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.tobox.totalk.thrift.types.Review>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByPopularity_result)
        return this.equals((getByPopularity_result)that);
      return false;
    }

    public boolean equals(getByPopularity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByPopularity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByPopularity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByPopularity_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getByPopularity_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByPopularity_resultStandardSchemeFactory implements SchemeFactory {
      public getByPopularity_resultStandardScheme getScheme() {
        return new getByPopularity_resultStandardScheme();
      }
    }

    private static class getByPopularity_resultStandardScheme extends StandardScheme<getByPopularity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByPopularity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list12.size);
                  com.tobox.totalk.thrift.types.Review _elem13;
                  for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                  {
                    _elem13 = new com.tobox.totalk.thrift.types.Review();
                    _elem13.read(iprot);
                    struct.success.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByPopularity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter15 : struct.success)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByPopularity_resultTryloadSchemeFactory implements SchemeFactory {
      public getByPopularity_resultTryloadScheme getScheme() {
        return new getByPopularity_resultTryloadScheme();
      }
    }

    private static class getByPopularity_resultTryloadScheme extends StandardScheme<getByPopularity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByPopularity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list16.size);
                  com.tobox.totalk.thrift.types.Review _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.tobox.totalk.thrift.types.Review();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByPopularity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final List<com.tobox.totalk.thrift.types.Review> _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter19 : _success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByPopularity_resultTupleSchemeFactory implements SchemeFactory {
      public getByPopularity_resultTupleScheme getScheme() {
        return new getByPopularity_resultTupleScheme();
      }
    }

    private static class getByPopularity_resultTupleScheme extends TupleScheme<getByPopularity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByPopularity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tobox.totalk.thrift.types.Review _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByPopularity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list21.size);
            com.tobox.totalk.thrift.types.Review _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.tobox.totalk.thrift.types.Review();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscription_args implements org.apache.thrift.TBase<getSubscription_args, getSubscription_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscription_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscription_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscription_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscription_argsTupleSchemeFactory();

    private String userId; // required
    private int categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      CATEGORY_ID((short)2, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscription_args.class, metaDataMap);
    }

    public getSubscription_args() {
    }

    public getSubscription_args(
      String userId,
      int categoryId)
    {
      this();
      this.userId = userId;
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscription_args(getSubscription_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getSubscription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }else{
        this.userId = null;
      }
      this.categoryId = other.categoryId;
    }

    public getSubscription_args deepCopy() {
      final getSubscription_args o = new getSubscription_args();
      o.deepCopyFields(this);
      return o;
    }

    public getSubscription_args newInstance() {
      return new getSubscription_args();
    }

    @Override
    public void clear() {
      this.userId = null;
      setCategoryIdIsSet(false);
      this.categoryId = 0;
    }

    public String getUserId() {
      return this.userId;
    }

    public void setUserId(String userId) {
      this.userId = userId;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public void setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case CATEGORY_ID:
        return getCategoryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscription_args)
        return this.equals((getSubscription_args)that);
      return false;
    }

    public boolean equals(getSubscription_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_categoryId = true;
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubscription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscription_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getSubscription_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new getSubscription_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscription_argsStandardSchemeFactory implements SchemeFactory {
      public getSubscription_argsStandardScheme getScheme() {
        return new getSubscription_argsStandardScheme();
      }
    }

    private static class getSubscription_argsStandardScheme extends StandardScheme<getSubscription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscription_argsTryloadSchemeFactory implements SchemeFactory {
      public getSubscription_argsTryloadScheme getScheme() {
        return new getSubscription_argsTryloadScheme();
      }
    }

    private static class getSubscription_argsTryloadScheme extends StandardScheme<getSubscription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _userId= struct.getUserId();
        if ( _userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(_userId);
          oprot.writeFieldEnd();
        }
        if (struct.isSetCategoryId()) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          final int _categoryId= struct.getCategoryId();
          oprot.writeI32(_categoryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscription_argsTupleSchemeFactory implements SchemeFactory {
      public getSubscription_argsTupleScheme getScheme() {
        return new getSubscription_argsTupleScheme();
      }
    }

    private static class getSubscription_argsTupleScheme extends TupleScheme<getSubscription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscription_result implements org.apache.thrift.TBase<getSubscription_result, getSubscription_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscription_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscription_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscription_resultTupleSchemeFactory();

    private List<com.tobox.totalk.thrift.types.Review> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscription_result.class, metaDataMap);
    }

    public getSubscription_result() {
    }

    public getSubscription_result(
      List<com.tobox.totalk.thrift.types.Review> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscription_result(getSubscription_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getSubscription_result other) {
      if (other.isSetSuccess()) {
        List<com.tobox.totalk.thrift.types.Review> __this__success = new ArrayList<com.tobox.totalk.thrift.types.Review>(other.success.size());
        for (com.tobox.totalk.thrift.types.Review other_element : other.success) {
          __this__success.add(new com.tobox.totalk.thrift.types.Review(other_element));
        }
        this.success = __this__success;
      }else{
        this.success = null;
      }
    }

    public getSubscription_result deepCopy() {
      final getSubscription_result o = new getSubscription_result();
      o.deepCopyFields(this);
      return o;
    }

    public getSubscription_result newInstance() {
      return new getSubscription_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tobox.totalk.thrift.types.Review> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tobox.totalk.thrift.types.Review elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.tobox.totalk.thrift.types.Review>();
      }
      this.success.add(elem);
    }

    public List<com.tobox.totalk.thrift.types.Review> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.tobox.totalk.thrift.types.Review> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.tobox.totalk.thrift.types.Review>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscription_result)
        return this.equals((getSubscription_result)that);
      return false;
    }

    public boolean equals(getSubscription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubscription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getSubscription_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getSubscription_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscription_resultStandardSchemeFactory implements SchemeFactory {
      public getSubscription_resultStandardScheme getScheme() {
        return new getSubscription_resultStandardScheme();
      }
    }

    private static class getSubscription_resultStandardScheme extends StandardScheme<getSubscription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list24.size);
                  com.tobox.totalk.thrift.types.Review _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.tobox.totalk.thrift.types.Review();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscription_resultTryloadSchemeFactory implements SchemeFactory {
      public getSubscription_resultTryloadScheme getScheme() {
        return new getSubscription_resultTryloadScheme();
      }
    }

    private static class getSubscription_resultTryloadScheme extends StandardScheme<getSubscription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list28.size);
                  com.tobox.totalk.thrift.types.Review _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = new com.tobox.totalk.thrift.types.Review();
                    _elem29.read(iprot);
                    struct.success.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final List<com.tobox.totalk.thrift.types.Review> _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter31 : _success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscription_resultTupleSchemeFactory implements SchemeFactory {
      public getSubscription_resultTupleScheme getScheme() {
        return new getSubscription_resultTupleScheme();
      }
    }

    private static class getSubscription_resultTupleScheme extends TupleScheme<getSubscription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tobox.totalk.thrift.types.Review _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list33.size);
            com.tobox.totalk.thrift.types.Review _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = new com.tobox.totalk.thrift.types.Review();
              _elem34.read(iprot);
              struct.success.add(_elem34);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getComments_args implements org.apache.thrift.TBase<getComments_args, getComments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComments_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComments_args");

    private static final org.apache.thrift.protocol.TField REVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getComments_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getComments_argsTupleSchemeFactory();

    private String reviewId; // required
    private int offset; // required
    private int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REVIEW_ID((short)1, "reviewId"),
      OFFSET((short)2, "offset"),
      LIMIT((short)3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REVIEW_ID
            return REVIEW_ID;
          case 2: // OFFSET
            return OFFSET;
          case 3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("reviewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComments_args.class, metaDataMap);
    }

    public getComments_args() {
    }

    public getComments_args(
      String reviewId,
      int offset,
      int limit)
    {
      this();
      this.reviewId = reviewId;
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComments_args(getComments_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getComments_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReviewId()) {
        this.reviewId = other.reviewId;
      }else{
        this.reviewId = null;
      }
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public getComments_args deepCopy() {
      final getComments_args o = new getComments_args();
      o.deepCopyFields(this);
      return o;
    }

    public getComments_args newInstance() {
      return new getComments_args();
    }

    @Override
    public void clear() {
      this.reviewId = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public String getReviewId() {
      return this.reviewId;
    }

    public void setReviewId(String reviewId) {
      this.reviewId = reviewId;
    }

    public void unsetReviewId() {
      this.reviewId = null;
    }

    /** Returns true if field reviewId is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewId() {
      return this.reviewId != null;
    }

    public void setReviewIdIsSet(boolean value) {
      if (!value) {
        this.reviewId = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public void setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REVIEW_ID:
        if (value == null) {
          unsetReviewId();
        } else {
          setReviewId((String)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REVIEW_ID:
        return getReviewId();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REVIEW_ID:
        return isSetReviewId();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComments_args)
        return this.equals((getComments_args)that);
      return false;
    }

    public boolean equals(getComments_args that) {
      if (that == null)
        return false;

      boolean this_present_reviewId = true && this.isSetReviewId();
      boolean that_present_reviewId = true && that.isSetReviewId();
      if (this_present_reviewId || that_present_reviewId) {
        if (!(this_present_reviewId && that_present_reviewId))
          return false;
        if (!this.reviewId.equals(that.reviewId))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reviewId = true && (isSetReviewId());
      list.add(present_reviewId);
      if (present_reviewId)
        list.add(reviewId);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getComments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReviewId()).compareTo(other.isSetReviewId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewId, other.reviewId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComments_args(");
      boolean first = true;

      sb.append("reviewId:");
      if (this.reviewId == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getComments_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new getComments_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComments_argsStandardSchemeFactory implements SchemeFactory {
      public getComments_argsStandardScheme getScheme() {
        return new getComments_argsStandardScheme();
      }
    }

    private static class getComments_argsStandardScheme extends StandardScheme<getComments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewId = iprot.readString();
                struct.setReviewIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reviewId != null) {
          oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
          oprot.writeString(struct.reviewId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComments_argsTryloadSchemeFactory implements SchemeFactory {
      public getComments_argsTryloadScheme getScheme() {
        return new getComments_argsTryloadScheme();
      }
    }

    private static class getComments_argsTryloadScheme extends StandardScheme<getComments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewId = iprot.readString();
                struct.setReviewIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _reviewId= struct.getReviewId();
        if ( _reviewId != null) {
          oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
          oprot.writeString(_reviewId);
          oprot.writeFieldEnd();
        }
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          final int _offset= struct.getOffset();
          oprot.writeI32(_offset);
          oprot.writeFieldEnd();
        }
        if (struct.isSetLimit()) {
          oprot.writeFieldBegin(LIMIT_FIELD_DESC);
          final int _limit= struct.getLimit();
          oprot.writeI32(_limit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComments_argsTupleSchemeFactory implements SchemeFactory {
      public getComments_argsTupleScheme getScheme() {
        return new getComments_argsTupleScheme();
      }
    }

    private static class getComments_argsTupleScheme extends TupleScheme<getComments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReviewId()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReviewId()) {
          oprot.writeString(struct.reviewId);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reviewId = iprot.readString();
          struct.setReviewIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getComments_result implements org.apache.thrift.TBase<getComments_result, getComments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComments_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField NO_REVIEW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("noReviewException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getComments_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getComments_resultTupleSchemeFactory();

    private List<com.tobox.totalk.thrift.types.Comment> success; // required
    private com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NO_REVIEW_EXCEPTION((short)1, "noReviewException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NO_REVIEW_EXCEPTION
            return NO_REVIEW_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Comment.class))));
      tmpMap.put(_Fields.NO_REVIEW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("noReviewException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.exceptions.NoReviewException.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComments_result.class, metaDataMap);
    }

    public getComments_result() {
    }

    public getComments_result(
      List<com.tobox.totalk.thrift.types.Comment> success,
      com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException)
    {
      this();
      this.success = success;
      this.noReviewException = noReviewException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComments_result(getComments_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getComments_result other) {
      if (other.isSetSuccess()) {
        List<com.tobox.totalk.thrift.types.Comment> __this__success = new ArrayList<com.tobox.totalk.thrift.types.Comment>(other.success.size());
        for (com.tobox.totalk.thrift.types.Comment other_element : other.success) {
          __this__success.add(new com.tobox.totalk.thrift.types.Comment(other_element));
        }
        this.success = __this__success;
      }else{
        this.success = null;
      }
      if (other.isSetNoReviewException()) {
        this.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException(other.noReviewException);
      }else{
        this.noReviewException = null;
      }
    }

    public getComments_result deepCopy() {
      final getComments_result o = new getComments_result();
      o.deepCopyFields(this);
      return o;
    }

    public getComments_result newInstance() {
      return new getComments_result();
    }

    @Override
    public void clear() {
      this.success = null;
      this.noReviewException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tobox.totalk.thrift.types.Comment> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tobox.totalk.thrift.types.Comment elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.tobox.totalk.thrift.types.Comment>();
      }
      this.success.add(elem);
    }

    public List<com.tobox.totalk.thrift.types.Comment> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.tobox.totalk.thrift.types.Comment> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tobox.totalk.thrift.exceptions.NoReviewException getNoReviewException() {
      return this.noReviewException;
    }

    public void setNoReviewException(com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
      this.noReviewException = noReviewException;
    }

    public void unsetNoReviewException() {
      this.noReviewException = null;
    }

    /** Returns true if field noReviewException is set (has been assigned a value) and false otherwise */
    public boolean isSetNoReviewException() {
      return this.noReviewException != null;
    }

    public void setNoReviewExceptionIsSet(boolean value) {
      if (!value) {
        this.noReviewException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.tobox.totalk.thrift.types.Comment>)value);
        }
        break;

      case NO_REVIEW_EXCEPTION:
        if (value == null) {
          unsetNoReviewException();
        } else {
          setNoReviewException((com.tobox.totalk.thrift.exceptions.NoReviewException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NO_REVIEW_EXCEPTION:
        return getNoReviewException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NO_REVIEW_EXCEPTION:
        return isSetNoReviewException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComments_result)
        return this.equals((getComments_result)that);
      return false;
    }

    public boolean equals(getComments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_noReviewException = true && this.isSetNoReviewException();
      boolean that_present_noReviewException = true && that.isSetNoReviewException();
      if (this_present_noReviewException || that_present_noReviewException) {
        if (!(this_present_noReviewException && that_present_noReviewException))
          return false;
        if (!this.noReviewException.equals(that.noReviewException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_noReviewException = true && (isSetNoReviewException());
      list.add(present_noReviewException);
      if (present_noReviewException)
        list.add(noReviewException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getComments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoReviewException()).compareTo(other.isSetNoReviewException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoReviewException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReviewException, other.noReviewException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noReviewException:");
      if (this.noReviewException == null) {
        sb.append("null");
      } else {
        sb.append(this.noReviewException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getComments_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getComments_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComments_resultStandardSchemeFactory implements SchemeFactory {
      public getComments_resultStandardScheme getScheme() {
        return new getComments_resultStandardScheme();
      }
    }

    private static class getComments_resultStandardScheme extends StandardScheme<getComments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Comment>(_list36.size);
                  com.tobox.totalk.thrift.types.Comment _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new com.tobox.totalk.thrift.types.Comment();
                    _elem37.read(iprot);
                    struct.success.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tobox.totalk.thrift.types.Comment _iter39 : struct.success)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          struct.noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComments_resultTryloadSchemeFactory implements SchemeFactory {
      public getComments_resultTryloadScheme getScheme() {
        return new getComments_resultTryloadScheme();
      }
    }

    private static class getComments_resultTryloadScheme extends StandardScheme<getComments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Comment>(_list40.size);
                  com.tobox.totalk.thrift.types.Comment _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.tobox.totalk.thrift.types.Comment();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final List<com.tobox.totalk.thrift.types.Comment> _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _success.size()));
            for (com.tobox.totalk.thrift.types.Comment _iter43 : _success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        final com.tobox.totalk.thrift.exceptions.NoReviewException _noReviewException= struct.getNoReviewException();
        if ( _noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          _noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComments_resultTupleSchemeFactory implements SchemeFactory {
      public getComments_resultTupleScheme getScheme() {
        return new getComments_resultTupleScheme();
      }
    }

    private static class getComments_resultTupleScheme extends TupleScheme<getComments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNoReviewException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tobox.totalk.thrift.types.Comment _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetNoReviewException()) {
          struct.noReviewException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.tobox.totalk.thrift.types.Comment>(_list45.size);
            com.tobox.totalk.thrift.types.Comment _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.tobox.totalk.thrift.types.Comment();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
          struct.noReviewException.read(iprot);
          struct.setNoReviewExceptionIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByEntity_args implements org.apache.thrift.TBase<getByEntity_args, getByEntity_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByEntity_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByEntity_args");

    private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REVIEW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByEntity_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByEntity_argsTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.EntityType entityType; // required
    private String entityId; // required
    private com.tobox.totalk.thrift.types.ReviewType reviewType; // required
    private int offset; // required
    private int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.tobox.totalk.thrift.types.EntityType
       */
      ENTITY_TYPE((short)1, "entityType"),
      ENTITY_ID((short)2, "entityId"),
      /**
       * 
       * @see com.tobox.totalk.thrift.types.ReviewType
       */
      REVIEW_TYPE((short)3, "reviewType"),
      OFFSET((short)4, "offset"),
      LIMIT((short)5, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_TYPE
            return ENTITY_TYPE;
          case 2: // ENTITY_ID
            return ENTITY_ID;
          case 3: // REVIEW_TYPE
            return REVIEW_TYPE;
          case 4: // OFFSET
            return OFFSET;
          case 5: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.tobox.totalk.thrift.types.EntityType.class)));
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reviewType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.tobox.totalk.thrift.types.ReviewType.class)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByEntity_args.class, metaDataMap);
    }

    public getByEntity_args() {
    }

    public getByEntity_args(
      com.tobox.totalk.thrift.types.EntityType entityType,
      String entityId,
      com.tobox.totalk.thrift.types.ReviewType reviewType,
      int offset,
      int limit)
    {
      this();
      this.entityType = entityType;
      this.entityId = entityId;
      this.reviewType = reviewType;
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByEntity_args(getByEntity_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByEntity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntityType()) {
        this.entityType = other.entityType;
      }else{
        this.entityType = null;
      }
      if (other.isSetEntityId()) {
        this.entityId = other.entityId;
      }else{
        this.entityId = null;
      }
      if (other.isSetReviewType()) {
        this.reviewType = other.reviewType;
      }else{
        this.reviewType = null;
      }
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public getByEntity_args deepCopy() {
      final getByEntity_args o = new getByEntity_args();
      o.deepCopyFields(this);
      return o;
    }

    public getByEntity_args newInstance() {
      return new getByEntity_args();
    }

    @Override
    public void clear() {
      this.entityType = null;
      this.entityId = null;
      this.reviewType = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.EntityType
     */
    public com.tobox.totalk.thrift.types.EntityType getEntityType() {
      return this.entityType;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.EntityType
     */
    public void setEntityType(com.tobox.totalk.thrift.types.EntityType entityType) {
      this.entityType = entityType;
    }

    public void unsetEntityType() {
      this.entityType = null;
    }

    /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityType() {
      return this.entityType != null;
    }

    public void setEntityTypeIsSet(boolean value) {
      if (!value) {
        this.entityType = null;
      }
    }

    public String getEntityId() {
      return this.entityId;
    }

    public void setEntityId(String entityId) {
      this.entityId = entityId;
    }

    public void unsetEntityId() {
      this.entityId = null;
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return this.entityId != null;
    }

    public void setEntityIdIsSet(boolean value) {
      if (!value) {
        this.entityId = null;
      }
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.ReviewType
     */
    public com.tobox.totalk.thrift.types.ReviewType getReviewType() {
      return this.reviewType;
    }

    /**
     * 
     * @see com.tobox.totalk.thrift.types.ReviewType
     */
    public void setReviewType(com.tobox.totalk.thrift.types.ReviewType reviewType) {
      this.reviewType = reviewType;
    }

    public void unsetReviewType() {
      this.reviewType = null;
    }

    /** Returns true if field reviewType is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewType() {
      return this.reviewType != null;
    }

    public void setReviewTypeIsSet(boolean value) {
      if (!value) {
        this.reviewType = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public void setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_TYPE:
        if (value == null) {
          unsetEntityType();
        } else {
          setEntityType((com.tobox.totalk.thrift.types.EntityType)value);
        }
        break;

      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((String)value);
        }
        break;

      case REVIEW_TYPE:
        if (value == null) {
          unsetReviewType();
        } else {
          setReviewType((com.tobox.totalk.thrift.types.ReviewType)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_TYPE:
        return getEntityType();

      case ENTITY_ID:
        return getEntityId();

      case REVIEW_TYPE:
        return getReviewType();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_TYPE:
        return isSetEntityType();
      case ENTITY_ID:
        return isSetEntityId();
      case REVIEW_TYPE:
        return isSetReviewType();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByEntity_args)
        return this.equals((getByEntity_args)that);
      return false;
    }

    public boolean equals(getByEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_entityType = true && this.isSetEntityType();
      boolean that_present_entityType = true && that.isSetEntityType();
      if (this_present_entityType || that_present_entityType) {
        if (!(this_present_entityType && that_present_entityType))
          return false;
        if (!this.entityType.equals(that.entityType))
          return false;
      }

      boolean this_present_entityId = true && this.isSetEntityId();
      boolean that_present_entityId = true && that.isSetEntityId();
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (!this.entityId.equals(that.entityId))
          return false;
      }

      boolean this_present_reviewType = true && this.isSetReviewType();
      boolean that_present_reviewType = true && that.isSetReviewType();
      if (this_present_reviewType || that_present_reviewType) {
        if (!(this_present_reviewType && that_present_reviewType))
          return false;
        if (!this.reviewType.equals(that.reviewType))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entityType = true && (isSetEntityType());
      list.add(present_entityType);
      if (present_entityType)
        list.add(entityType.getValue());

      boolean present_entityId = true && (isSetEntityId());
      list.add(present_entityId);
      if (present_entityId)
        list.add(entityId);

      boolean present_reviewType = true && (isSetReviewType());
      list.add(present_reviewType);
      if (present_reviewType)
        list.add(reviewType.getValue());

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(other.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, other.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReviewType()).compareTo(other.isSetReviewType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewType, other.reviewType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByEntity_args(");
      boolean first = true;

      sb.append("entityType:");
      if (this.entityType == null) {
        sb.append("null");
      } else {
        sb.append(this.entityType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityId:");
      if (this.entityId == null) {
        sb.append("null");
      } else {
        sb.append(this.entityId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewType:");
      if (this.reviewType == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByEntity_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new getByEntity_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByEntity_argsStandardSchemeFactory implements SchemeFactory {
      public getByEntity_argsStandardScheme getScheme() {
        return new getByEntity_argsStandardScheme();
      }
    }

    private static class getByEntity_argsStandardScheme extends StandardScheme<getByEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
                struct.setEntityTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityId = iprot.readString();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REVIEW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reviewType = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
                struct.setReviewTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entityType != null) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.entityType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.entityId != null) {
          oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
          oprot.writeString(struct.entityId);
          oprot.writeFieldEnd();
        }
        if (struct.reviewType != null) {
          oprot.writeFieldBegin(REVIEW_TYPE_FIELD_DESC);
          oprot.writeI32(struct.reviewType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByEntity_argsTryloadSchemeFactory implements SchemeFactory {
      public getByEntity_argsTryloadScheme getScheme() {
        return new getByEntity_argsTryloadScheme();
      }
    }

    private static class getByEntity_argsTryloadScheme extends StandardScheme<getByEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
                struct.setEntityTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityId = iprot.readString();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REVIEW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reviewType = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
                struct.setReviewTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entityType != null) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.entityType.getValue());
          oprot.writeFieldEnd();
        }
        final String _entityId= struct.getEntityId();
        if ( _entityId != null) {
          oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
          oprot.writeString(_entityId);
          oprot.writeFieldEnd();
        }
        if (struct.reviewType != null) {
          oprot.writeFieldBegin(REVIEW_TYPE_FIELD_DESC);
          oprot.writeI32(struct.reviewType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          final int _offset= struct.getOffset();
          oprot.writeI32(_offset);
          oprot.writeFieldEnd();
        }
        if (struct.isSetLimit()) {
          oprot.writeFieldBegin(LIMIT_FIELD_DESC);
          final int _limit= struct.getLimit();
          oprot.writeI32(_limit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByEntity_argsTupleSchemeFactory implements SchemeFactory {
      public getByEntity_argsTupleScheme getScheme() {
        return new getByEntity_argsTupleScheme();
      }
    }

    private static class getByEntity_argsTupleScheme extends TupleScheme<getByEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityType()) {
          optionals.set(0);
        }
        if (struct.isSetEntityId()) {
          optionals.set(1);
        }
        if (struct.isSetReviewType()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        if (struct.isSetLimit()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetEntityType()) {
          oprot.writeI32(struct.entityType.getValue());
        }
        if (struct.isSetEntityId()) {
          oprot.writeString(struct.entityId);
        }
        if (struct.isSetReviewType()) {
          oprot.writeI32(struct.reviewType.getValue());
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
          struct.setEntityTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityId = iprot.readString();
          struct.setEntityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reviewType = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
          struct.setReviewTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(4)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getByEntity_result implements org.apache.thrift.TBase<getByEntity_result, getByEntity_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByEntity_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getByEntity_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getByEntity_resultTupleSchemeFactory();

    private List<com.tobox.totalk.thrift.types.Review> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByEntity_result.class, metaDataMap);
    }

    public getByEntity_result() {
    }

    public getByEntity_result(
      List<com.tobox.totalk.thrift.types.Review> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByEntity_result(getByEntity_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(getByEntity_result other) {
      if (other.isSetSuccess()) {
        List<com.tobox.totalk.thrift.types.Review> __this__success = new ArrayList<com.tobox.totalk.thrift.types.Review>(other.success.size());
        for (com.tobox.totalk.thrift.types.Review other_element : other.success) {
          __this__success.add(new com.tobox.totalk.thrift.types.Review(other_element));
        }
        this.success = __this__success;
      }else{
        this.success = null;
      }
    }

    public getByEntity_result deepCopy() {
      final getByEntity_result o = new getByEntity_result();
      o.deepCopyFields(this);
      return o;
    }

    public getByEntity_result newInstance() {
      return new getByEntity_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tobox.totalk.thrift.types.Review> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tobox.totalk.thrift.types.Review elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.tobox.totalk.thrift.types.Review>();
      }
      this.success.add(elem);
    }

    public List<com.tobox.totalk.thrift.types.Review> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.tobox.totalk.thrift.types.Review> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.tobox.totalk.thrift.types.Review>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByEntity_result)
        return this.equals((getByEntity_result)that);
      return false;
    }

    public boolean equals(getByEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByEntity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new getByEntity_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new getByEntity_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByEntity_resultStandardSchemeFactory implements SchemeFactory {
      public getByEntity_resultStandardScheme getScheme() {
        return new getByEntity_resultStandardScheme();
      }
    }

    private static class getByEntity_resultStandardScheme extends StandardScheme<getByEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list48.size);
                  com.tobox.totalk.thrift.types.Review _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.tobox.totalk.thrift.types.Review();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByEntity_resultTryloadSchemeFactory implements SchemeFactory {
      public getByEntity_resultTryloadScheme getScheme() {
        return new getByEntity_resultTryloadScheme();
      }
    }

    private static class getByEntity_resultTryloadScheme extends StandardScheme<getByEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list52.size);
                  com.tobox.totalk.thrift.types.Review _elem53;
                  for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                  {
                    _elem53 = new com.tobox.totalk.thrift.types.Review();
                    _elem53.read(iprot);
                    struct.success.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final List<com.tobox.totalk.thrift.types.Review> _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _success.size()));
            for (com.tobox.totalk.thrift.types.Review _iter55 : _success)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByEntity_resultTupleSchemeFactory implements SchemeFactory {
      public getByEntity_resultTupleScheme getScheme() {
        return new getByEntity_resultTupleScheme();
      }
    }

    private static class getByEntity_resultTupleScheme extends TupleScheme<getByEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tobox.totalk.thrift.types.Review _iter56 : struct.success)
            {
              _iter56.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.tobox.totalk.thrift.types.Review>(_list57.size);
            com.tobox.totalk.thrift.types.Review _elem58;
            for (int _i59 = 0; _i59 < _list57.size; ++_i59)
            {
              _elem58 = new com.tobox.totalk.thrift.types.Review();
              _elem58.read(iprot);
              struct.success.add(_elem58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setVote_args implements org.apache.thrift.TBase<setVote_args, setVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<setVote_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setVote_args");

    private static final org.apache.thrift.protocol.TField REVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField YES_FIELD_DESC = new org.apache.thrift.protocol.TField("yes", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new setVote_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new setVote_argsTupleSchemeFactory();

    private String reviewId; // required
    private boolean yes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REVIEW_ID((short)1, "reviewId"),
      YES((short)2, "yes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REVIEW_ID
            return REVIEW_ID;
          case 2: // YES
            return YES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("reviewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.YES, new org.apache.thrift.meta_data.FieldMetaData("yes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setVote_args.class, metaDataMap);
    }

    public setVote_args() {
    }

    public setVote_args(
      String reviewId,
      boolean yes)
    {
      this();
      this.reviewId = reviewId;
      this.yes = yes;
      setYesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setVote_args(setVote_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(setVote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReviewId()) {
        this.reviewId = other.reviewId;
      }else{
        this.reviewId = null;
      }
      this.yes = other.yes;
    }

    public setVote_args deepCopy() {
      final setVote_args o = new setVote_args();
      o.deepCopyFields(this);
      return o;
    }

    public setVote_args newInstance() {
      return new setVote_args();
    }

    @Override
    public void clear() {
      this.reviewId = null;
      setYesIsSet(false);
      this.yes = false;
    }

    public String getReviewId() {
      return this.reviewId;
    }

    public void setReviewId(String reviewId) {
      this.reviewId = reviewId;
    }

    public void unsetReviewId() {
      this.reviewId = null;
    }

    /** Returns true if field reviewId is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewId() {
      return this.reviewId != null;
    }

    public void setReviewIdIsSet(boolean value) {
      if (!value) {
        this.reviewId = null;
      }
    }

    public boolean isYes() {
      return this.yes;
    }

    public void setYes(boolean yes) {
      this.yes = yes;
      setYesIsSet(true);
    }

    public void unsetYes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YES_ISSET_ID);
    }

    /** Returns true if field yes is set (has been assigned a value) and false otherwise */
    public boolean isSetYes() {
      return EncodingUtils.testBit(__isset_bitfield, __YES_ISSET_ID);
    }

    public void setYesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REVIEW_ID:
        if (value == null) {
          unsetReviewId();
        } else {
          setReviewId((String)value);
        }
        break;

      case YES:
        if (value == null) {
          unsetYes();
        } else {
          setYes((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REVIEW_ID:
        return getReviewId();

      case YES:
        return isYes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REVIEW_ID:
        return isSetReviewId();
      case YES:
        return isSetYes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setVote_args)
        return this.equals((setVote_args)that);
      return false;
    }

    public boolean equals(setVote_args that) {
      if (that == null)
        return false;

      boolean this_present_reviewId = true && this.isSetReviewId();
      boolean that_present_reviewId = true && that.isSetReviewId();
      if (this_present_reviewId || that_present_reviewId) {
        if (!(this_present_reviewId && that_present_reviewId))
          return false;
        if (!this.reviewId.equals(that.reviewId))
          return false;
      }

      boolean this_present_yes = true;
      boolean that_present_yes = true;
      if (this_present_yes || that_present_yes) {
        if (!(this_present_yes && that_present_yes))
          return false;
        if (this.yes != that.yes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reviewId = true && (isSetReviewId());
      list.add(present_reviewId);
      if (present_reviewId)
        list.add(reviewId);

      boolean present_yes = true;
      list.add(present_yes);
      if (present_yes)
        list.add(yes);

      return list.hashCode();
    }

    @Override
    public int compareTo(setVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReviewId()).compareTo(other.isSetReviewId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewId, other.reviewId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYes()).compareTo(other.isSetYes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yes, other.yes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setVote_args(");
      boolean first = true;

      sb.append("reviewId:");
      if (this.reviewId == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("yes:");
      sb.append(this.yes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new setVote_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        new setVote_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setVote_argsStandardSchemeFactory implements SchemeFactory {
      public setVote_argsStandardScheme getScheme() {
        return new setVote_argsStandardScheme();
      }
    }

    private static class setVote_argsStandardScheme extends StandardScheme<setVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewId = iprot.readString();
                struct.setReviewIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // YES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.yes = iprot.readBool();
                struct.setYesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reviewId != null) {
          oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
          oprot.writeString(struct.reviewId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(YES_FIELD_DESC);
        oprot.writeBool(struct.yes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setVote_argsTryloadSchemeFactory implements SchemeFactory {
      public setVote_argsTryloadScheme getScheme() {
        return new setVote_argsTryloadScheme();
      }
    }

    private static class setVote_argsTryloadScheme extends StandardScheme<setVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewId = iprot.readString();
                struct.setReviewIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // YES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.yes = iprot.readBool();
                struct.setYesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final String _reviewId= struct.getReviewId();
        if ( _reviewId != null) {
          oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
          oprot.writeString(_reviewId);
          oprot.writeFieldEnd();
        }
        if (struct.isSetYes()) {
          oprot.writeFieldBegin(YES_FIELD_DESC);
          final boolean _yes= struct.isYes();
          oprot.writeBool(_yes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setVote_argsTupleSchemeFactory implements SchemeFactory {
      public setVote_argsTupleScheme getScheme() {
        return new setVote_argsTupleScheme();
      }
    }

    private static class setVote_argsTupleScheme extends TupleScheme<setVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReviewId()) {
          optionals.set(0);
        }
        if (struct.isSetYes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReviewId()) {
          oprot.writeString(struct.reviewId);
        }
        if (struct.isSetYes()) {
          oprot.writeBool(struct.yes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reviewId = iprot.readString();
          struct.setReviewIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.yes = iprot.readBool();
          struct.setYesIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setVote_result implements org.apache.thrift.TBase<setVote_result, setVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<setVote_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setVote_result");

    private static final org.apache.thrift.protocol.TField NO_REVIEW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("noReviewException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new setVote_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new setVote_resultTupleSchemeFactory();

    private com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NO_REVIEW_EXCEPTION((short)1, "noReviewException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NO_REVIEW_EXCEPTION
            return NO_REVIEW_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NO_REVIEW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("noReviewException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.exceptions.NoReviewException.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setVote_result.class, metaDataMap);
    }

    public setVote_result() {
    }

    public setVote_result(
      com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException)
    {
      this();
      this.noReviewException = noReviewException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setVote_result(setVote_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(setVote_result other) {
      if (other.isSetNoReviewException()) {
        this.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException(other.noReviewException);
      }else{
        this.noReviewException = null;
      }
    }

    public setVote_result deepCopy() {
      final setVote_result o = new setVote_result();
      o.deepCopyFields(this);
      return o;
    }

    public setVote_result newInstance() {
      return new setVote_result();
    }

    @Override
    public void clear() {
      this.noReviewException = null;
    }

    public com.tobox.totalk.thrift.exceptions.NoReviewException getNoReviewException() {
      return this.noReviewException;
    }

    public void setNoReviewException(com.tobox.totalk.thrift.exceptions.NoReviewException noReviewException) {
      this.noReviewException = noReviewException;
    }

    public void unsetNoReviewException() {
      this.noReviewException = null;
    }

    /** Returns true if field noReviewException is set (has been assigned a value) and false otherwise */
    public boolean isSetNoReviewException() {
      return this.noReviewException != null;
    }

    public void setNoReviewExceptionIsSet(boolean value) {
      if (!value) {
        this.noReviewException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NO_REVIEW_EXCEPTION:
        if (value == null) {
          unsetNoReviewException();
        } else {
          setNoReviewException((com.tobox.totalk.thrift.exceptions.NoReviewException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NO_REVIEW_EXCEPTION:
        return getNoReviewException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NO_REVIEW_EXCEPTION:
        return isSetNoReviewException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setVote_result)
        return this.equals((setVote_result)that);
      return false;
    }

    public boolean equals(setVote_result that) {
      if (that == null)
        return false;

      boolean this_present_noReviewException = true && this.isSetNoReviewException();
      boolean that_present_noReviewException = true && that.isSetNoReviewException();
      if (this_present_noReviewException || that_present_noReviewException) {
        if (!(this_present_noReviewException && that_present_noReviewException))
          return false;
        if (!this.noReviewException.equals(that.noReviewException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_noReviewException = true && (isSetNoReviewException());
      list.add(present_noReviewException);
      if (present_noReviewException)
        list.add(noReviewException);

      return list.hashCode();
    }

    @Override
    public int compareTo(setVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNoReviewException()).compareTo(other.isSetNoReviewException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoReviewException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReviewException, other.noReviewException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setVote_result(");
      boolean first = true;

      sb.append("noReviewException:");
      if (this.noReviewException == null) {
        sb.append("null");
      } else {
        sb.append(this.noReviewException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new setVote_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new setVote_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setVote_resultStandardSchemeFactory implements SchemeFactory {
      public setVote_resultStandardScheme getScheme() {
        return new setVote_resultStandardScheme();
      }
    }

    private static class setVote_resultStandardScheme extends StandardScheme<setVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          struct.noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setVote_resultTryloadSchemeFactory implements SchemeFactory {
      public setVote_resultTryloadScheme getScheme() {
        return new setVote_resultTryloadScheme();
      }
    }

    private static class setVote_resultTryloadScheme extends StandardScheme<setVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NO_REVIEW_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
                struct.noReviewException.read(iprot);
                struct.setNoReviewExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.exceptions.NoReviewException _noReviewException= struct.getNoReviewException();
        if ( _noReviewException != null) {
          oprot.writeFieldBegin(NO_REVIEW_EXCEPTION_FIELD_DESC);
          _noReviewException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setVote_resultTupleSchemeFactory implements SchemeFactory {
      public setVote_resultTupleScheme getScheme() {
        return new setVote_resultTupleScheme();
      }
    }

    private static class setVote_resultTupleScheme extends TupleScheme<setVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNoReviewException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNoReviewException()) {
          struct.noReviewException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.noReviewException = new com.tobox.totalk.thrift.exceptions.NoReviewException();
          struct.noReviewException.read(iprot);
          struct.setNoReviewExceptionIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addReview_args implements org.apache.thrift.TBase<addReview_args, addReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<addReview_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReview_args");

    private static final org.apache.thrift.protocol.TField REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("review", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new addReview_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new addReview_argsTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Review review; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REVIEW((short)1, "review");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REVIEW
            return REVIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REVIEW, new org.apache.thrift.meta_data.FieldMetaData("review", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReview_args.class, metaDataMap);
    }

    public addReview_args() {
    }

    public addReview_args(
      com.tobox.totalk.thrift.types.Review review)
    {
      this();
      this.review = review;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addReview_args(addReview_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(addReview_args other) {
      if (other.isSetReview()) {
        this.review = new com.tobox.totalk.thrift.types.Review(other.review);
      }else{
        this.review = null;
      }
    }

    public addReview_args deepCopy() {
      final addReview_args o = new addReview_args();
      o.deepCopyFields(this);
      return o;
    }

    public addReview_args newInstance() {
      return new addReview_args();
    }

    @Override
    public void clear() {
      this.review = null;
    }

    public com.tobox.totalk.thrift.types.Review getReview() {
      return this.review;
    }

    public void setReview(com.tobox.totalk.thrift.types.Review review) {
      this.review = review;
    }

    public void unsetReview() {
      this.review = null;
    }

    /** Returns true if field review is set (has been assigned a value) and false otherwise */
    public boolean isSetReview() {
      return this.review != null;
    }

    public void setReviewIsSet(boolean value) {
      if (!value) {
        this.review = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REVIEW:
        if (value == null) {
          unsetReview();
        } else {
          setReview((com.tobox.totalk.thrift.types.Review)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REVIEW:
        return getReview();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REVIEW:
        return isSetReview();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addReview_args)
        return this.equals((addReview_args)that);
      return false;
    }

    public boolean equals(addReview_args that) {
      if (that == null)
        return false;

      boolean this_present_review = true && this.isSetReview();
      boolean that_present_review = true && that.isSetReview();
      if (this_present_review || that_present_review) {
        if (!(this_present_review && that_present_review))
          return false;
        if (!this.review.equals(that.review))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_review = true && (isSetReview());
      list.add(present_review);
      if (present_review)
        list.add(review);

      return list.hashCode();
    }

    @Override
    public int compareTo(addReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReview()).compareTo(other.isSetReview());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReview()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.review, other.review);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addReview_args(");
      boolean first = true;

      sb.append("review:");
      if (this.review == null) {
        sb.append("null");
      } else {
        sb.append(this.review);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (review != null) {
        review.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new addReview_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new addReview_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addReview_argsStandardSchemeFactory implements SchemeFactory {
      public addReview_argsStandardScheme getScheme() {
        return new addReview_argsStandardScheme();
      }
    }

    private static class addReview_argsStandardScheme extends StandardScheme<addReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.review = new com.tobox.totalk.thrift.types.Review();
                struct.review.read(iprot);
                struct.setReviewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.review != null) {
          oprot.writeFieldBegin(REVIEW_FIELD_DESC);
          struct.review.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReview_argsTryloadSchemeFactory implements SchemeFactory {
      public addReview_argsTryloadScheme getScheme() {
        return new addReview_argsTryloadScheme();
      }
    }

    private static class addReview_argsTryloadScheme extends StandardScheme<addReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REVIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.review = new com.tobox.totalk.thrift.types.Review();
                struct.review.read(iprot);
                struct.setReviewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.types.Review _review= struct.getReview();
        if ( _review != null) {
          oprot.writeFieldBegin(REVIEW_FIELD_DESC);
          _review.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReview_argsTupleSchemeFactory implements SchemeFactory {
      public addReview_argsTupleScheme getScheme() {
        return new addReview_argsTupleScheme();
      }
    }

    private static class addReview_argsTupleScheme extends TupleScheme<addReview_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addReview_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReview()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReview()) {
          struct.review.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addReview_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.review = new com.tobox.totalk.thrift.types.Review();
          struct.review.read(iprot);
          struct.setReviewIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addReview_result implements org.apache.thrift.TBase<addReview_result, addReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<addReview_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new addReview_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new addReview_resultTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Review success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Review.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReview_result.class, metaDataMap);
    }

    public addReview_result() {
    }

    public addReview_result(
      com.tobox.totalk.thrift.types.Review success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addReview_result(addReview_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(addReview_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tobox.totalk.thrift.types.Review(other.success);
      }else{
        this.success = null;
      }
    }

    public addReview_result deepCopy() {
      final addReview_result o = new addReview_result();
      o.deepCopyFields(this);
      return o;
    }

    public addReview_result newInstance() {
      return new addReview_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.tobox.totalk.thrift.types.Review getSuccess() {
      return this.success;
    }

    public void setSuccess(com.tobox.totalk.thrift.types.Review success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tobox.totalk.thrift.types.Review)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addReview_result)
        return this.equals((addReview_result)that);
      return false;
    }

    public boolean equals(addReview_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addReview_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new addReview_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new addReview_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addReview_resultStandardSchemeFactory implements SchemeFactory {
      public addReview_resultStandardScheme getScheme() {
        return new addReview_resultStandardScheme();
      }
    }

    private static class addReview_resultStandardScheme extends StandardScheme<addReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Review();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReview_resultTryloadSchemeFactory implements SchemeFactory {
      public addReview_resultTryloadScheme getScheme() {
        return new addReview_resultTryloadScheme();
      }
    }

    private static class addReview_resultTryloadScheme extends StandardScheme<addReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Review();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.types.Review _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          _success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReview_resultTupleSchemeFactory implements SchemeFactory {
      public addReview_resultTupleScheme getScheme() {
        return new addReview_resultTupleScheme();
      }
    }

    private static class addReview_resultTupleScheme extends TupleScheme<addReview_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addReview_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addReview_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.tobox.totalk.thrift.types.Review();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addComment_args implements org.apache.thrift.TBase<addComment_args, addComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addComment_args>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComment_args");

    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new addComment_argsTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new addComment_argsTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Comment comment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMENT((short)1, "comment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMENT
            return COMMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Comment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComment_args.class, metaDataMap);
    }

    public addComment_args() {
    }

    public addComment_args(
      com.tobox.totalk.thrift.types.Comment comment)
    {
      this();
      this.comment = comment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComment_args(addComment_args other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(addComment_args other) {
      if (other.isSetComment()) {
        this.comment = new com.tobox.totalk.thrift.types.Comment(other.comment);
      }else{
        this.comment = null;
      }
    }

    public addComment_args deepCopy() {
      final addComment_args o = new addComment_args();
      o.deepCopyFields(this);
      return o;
    }

    public addComment_args newInstance() {
      return new addComment_args();
    }

    @Override
    public void clear() {
      this.comment = null;
    }

    public com.tobox.totalk.thrift.types.Comment getComment() {
      return this.comment;
    }

    public void setComment(com.tobox.totalk.thrift.types.Comment comment) {
      this.comment = comment;
    }

    public void unsetComment() {
      this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
      return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
      if (!value) {
        this.comment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          setComment((com.tobox.totalk.thrift.types.Comment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMENT:
        return getComment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMENT:
        return isSetComment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComment_args)
        return this.equals((addComment_args)that);
      return false;
    }

    public boolean equals(addComment_args that) {
      if (that == null)
        return false;

      boolean this_present_comment = true && this.isSetComment();
      boolean that_present_comment = true && that.isSetComment();
      if (this_present_comment || that_present_comment) {
        if (!(this_present_comment && that_present_comment))
          return false;
        if (!this.comment.equals(that.comment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_comment = true && (isSetComment());
      list.add(present_comment);
      if (present_comment)
        list.add(comment);

      return list.hashCode();
    }

    @Override
    public int compareTo(addComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComment_args(");
      boolean first = true;

      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (comment != null) {
        comment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new addComment_argsTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new addComment_argsTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComment_argsStandardSchemeFactory implements SchemeFactory {
      public addComment_argsStandardScheme getScheme() {
        return new addComment_argsStandardScheme();
      }
    }

    private static class addComment_argsStandardScheme extends StandardScheme<addComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.comment = new com.tobox.totalk.thrift.types.Comment();
                struct.comment.read(iprot);
                struct.setCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.comment != null) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          struct.comment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComment_argsTryloadSchemeFactory implements SchemeFactory {
      public addComment_argsTryloadScheme getScheme() {
        return new addComment_argsTryloadScheme();
      }
    }

    private static class addComment_argsTryloadScheme extends StandardScheme<addComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.comment = new com.tobox.totalk.thrift.types.Comment();
                struct.comment.read(iprot);
                struct.setCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.types.Comment _comment= struct.getComment();
        if ( _comment != null) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          _comment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComment_argsTupleSchemeFactory implements SchemeFactory {
      public addComment_argsTupleScheme getScheme() {
        return new addComment_argsTupleScheme();
      }
    }

    private static class addComment_argsTupleScheme extends TupleScheme<addComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComment()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetComment()) {
          struct.comment.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.comment = new com.tobox.totalk.thrift.types.Comment();
          struct.comment.read(iprot);
          struct.setCommentIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addComment_result implements org.apache.thrift.TBase<addComment_result, addComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addComment_result>   {
    private static final long   serialVersionUID        = 1L;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new addComment_resultTryloadSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new addComment_resultTupleSchemeFactory();

    private com.tobox.totalk.thrift.types.Comment success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tobox.totalk.thrift.types.Comment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComment_result.class, metaDataMap);
    }

    public addComment_result() {
    }

    public addComment_result(
      com.tobox.totalk.thrift.types.Comment success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComment_result(addComment_result other) {
      deepCopyFields(other);
    }

    public void deepCopyFields(addComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tobox.totalk.thrift.types.Comment(other.success);
      }else{
        this.success = null;
      }
    }

    public addComment_result deepCopy() {
      final addComment_result o = new addComment_result();
      o.deepCopyFields(this);
      return o;
    }

    public addComment_result newInstance() {
      return new addComment_result();
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.tobox.totalk.thrift.types.Comment getSuccess() {
      return this.success;
    }

    public void setSuccess(com.tobox.totalk.thrift.types.Comment success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tobox.totalk.thrift.types.Comment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComment_result)
        return this.equals((addComment_result)that);
      return false;
    }

    public boolean equals(addComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        new addComment_resultTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        new addComment_resultTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComment_resultStandardSchemeFactory implements SchemeFactory {
      public addComment_resultStandardScheme getScheme() {
        return new addComment_resultStandardScheme();
      }
    }

    private static class addComment_resultStandardScheme extends StandardScheme<addComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Comment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComment_resultTryloadSchemeFactory implements SchemeFactory {
      public addComment_resultTryloadScheme getScheme() {
        return new addComment_resultTryloadScheme();
      }
    }

    private static class addComment_resultTryloadScheme extends StandardScheme<addComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tobox.totalk.thrift.types.Comment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        final com.tobox.totalk.thrift.types.Comment _success= struct.success;
        if ( _success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          _success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComment_resultTupleSchemeFactory implements SchemeFactory {
      public addComment_resultTupleScheme getScheme() {
        return new addComment_resultTupleScheme();
      }
    }

    private static class addComment_resultTupleScheme extends TupleScheme<addComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.tobox.totalk.thrift.types.Comment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
