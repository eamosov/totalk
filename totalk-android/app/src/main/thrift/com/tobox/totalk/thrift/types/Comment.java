/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tobox.totalk.thrift.types;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Comment implements org.apache.thrift.TBase<Comment, Comment._Fields>, java.io.Serializable, Cloneable, Comparable<Comment> {
  private static final long   serialVersionUID        = 1L;
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Comment");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField DELETED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new CommentTryloadSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new CommentTupleSchemeFactory();

  private String id; // required
  private String reviewId; // required
  private boolean deleted; // required
  private long deletedAt; // required
  private String creatorId; // required
  private String createdAt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    REVIEW_ID((short)2, "reviewId"),
    DELETED((short)3, "deleted"),
    DELETED_AT((short)4, "deletedAt"),
    CREATOR_ID((short)5, "creatorId"),
    CREATED_AT((short)6, "createdAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REVIEW_ID
          return REVIEW_ID;
        case 3: // DELETED
          return DELETED;
        case 4: // DELETED_AT
          return DELETED_AT;
        case 5: // CREATOR_ID
          return CREATOR_ID;
        case 6: // CREATED_AT
          return CREATED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELETED_ISSET_ID = 0;
  private static final int __DELETEDAT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("reviewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED_AT, new org.apache.thrift.meta_data.FieldMetaData("deletedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Comment.class, metaDataMap);
  }

  public Comment() {
  }

  public Comment(
    String id,
    String reviewId,
    boolean deleted,
    long deletedAt,
    String creatorId,
    String createdAt)
  {
    this();
    this.id = id;
    this.reviewId = reviewId;
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.deletedAt = deletedAt;
    setDeletedAtIsSet(true);
    this.creatorId = creatorId;
    this.createdAt = createdAt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Comment(Comment other) {
    deepCopyFields(other);
  }

  public void deepCopyFields(Comment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }else{
      this.id = null;
    }
    if (other.isSetReviewId()) {
      this.reviewId = other.reviewId;
    }else{
      this.reviewId = null;
    }
    this.deleted = other.deleted;
    this.deletedAt = other.deletedAt;
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }else{
      this.creatorId = null;
    }
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }else{
      this.createdAt = null;
    }
  }

  public Comment deepCopy() {
    final Comment o = new Comment();
    o.deepCopyFields(this);
    return o;
  }

  public Comment newInstance() {
    return new Comment();
  }

  @Override
  public void clear() {
    this.id = null;
    this.reviewId = null;
    setDeletedIsSet(false);
    this.deleted = false;
    setDeletedAtIsSet(false);
    this.deletedAt = 0;
    this.creatorId = null;
    this.createdAt = null;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getReviewId() {
    return this.reviewId;
  }

  public void setReviewId(String reviewId) {
    this.reviewId = reviewId;
  }

  public void unsetReviewId() {
    this.reviewId = null;
  }

  /** Returns true if field reviewId is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewId() {
    return this.reviewId != null;
  }

  public void setReviewIdIsSet(boolean value) {
    if (!value) {
      this.reviewId = null;
    }
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public long getDeletedAt() {
    return this.deletedAt;
  }

  public void setDeletedAt(long deletedAt) {
    this.deletedAt = deletedAt;
    setDeletedAtIsSet(true);
  }

  public void unsetDeletedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETEDAT_ISSET_ID);
  }

  /** Returns true if field deletedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETEDAT_ISSET_ID);
  }

  public void setDeletedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETEDAT_ISSET_ID, value);
  }

  public String getCreatorId() {
    return this.creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case REVIEW_ID:
      if (value == null) {
        unsetReviewId();
      } else {
        setReviewId((String)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case DELETED_AT:
      if (value == null) {
        unsetDeletedAt();
      } else {
        setDeletedAt((Long)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case REVIEW_ID:
      return getReviewId();

    case DELETED:
      return isDeleted();

    case DELETED_AT:
      return getDeletedAt();

    case CREATOR_ID:
      return getCreatorId();

    case CREATED_AT:
      return getCreatedAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REVIEW_ID:
      return isSetReviewId();
    case DELETED:
      return isSetDeleted();
    case DELETED_AT:
      return isSetDeletedAt();
    case CREATOR_ID:
      return isSetCreatorId();
    case CREATED_AT:
      return isSetCreatedAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Comment)
      return this.equals((Comment)that);
    return false;
  }

  public boolean equals(Comment that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_reviewId = true && this.isSetReviewId();
    boolean that_present_reviewId = true && that.isSetReviewId();
    if (this_present_reviewId || that_present_reviewId) {
      if (!(this_present_reviewId && that_present_reviewId))
        return false;
      if (!this.reviewId.equals(that.reviewId))
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_deletedAt = true;
    boolean that_present_deletedAt = true;
    if (this_present_deletedAt || that_present_deletedAt) {
      if (!(this_present_deletedAt && that_present_deletedAt))
        return false;
      if (this.deletedAt != that.deletedAt)
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_reviewId = true && (isSetReviewId());
    list.add(present_reviewId);
    if (present_reviewId)
      list.add(reviewId);

    boolean present_deleted = true;
    list.add(present_deleted);
    if (present_deleted)
      list.add(deleted);

    boolean present_deletedAt = true;
    list.add(present_deletedAt);
    if (present_deletedAt)
      list.add(deletedAt);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_createdAt = true && (isSetCreatedAt());
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    return list.hashCode();
  }

  @Override
  public int compareTo(Comment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewId()).compareTo(other.isSetReviewId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewId, other.reviewId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeletedAt()).compareTo(other.isSetDeletedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedAt, other.deletedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Comment(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewId:");
    if (this.reviewId == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deletedAt:");
    sb.append(this.deletedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    if (this.creatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      new CommentTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      new CommentTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentStandardSchemeFactory implements SchemeFactory {
    public CommentStandardScheme getScheme() {
      return new CommentStandardScheme();
    }
  }

  private static class CommentStandardScheme extends StandardScheme<Comment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Comment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REVIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewId = iprot.readString();
              struct.setReviewIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletedAt = iprot.readI64();
              struct.setDeletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Comment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.reviewId != null) {
        oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
        oprot.writeString(struct.reviewId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeBool(struct.deleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_AT_FIELD_DESC);
      oprot.writeI64(struct.deletedAt);
      oprot.writeFieldEnd();
      if (struct.creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentTryloadSchemeFactory implements SchemeFactory {
    public CommentTryloadScheme getScheme() {
      return new CommentTryloadScheme();
    }
  }

  private static class CommentTryloadScheme extends StandardScheme<Comment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Comment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REVIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewId = iprot.readString();
              struct.setReviewIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletedAt = iprot.readI64();
              struct.setDeletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Comment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      final String _id= struct.getId();
      if ( _id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(_id);
        oprot.writeFieldEnd();
      }
      final String _reviewId= struct.getReviewId();
      if ( _reviewId != null) {
        oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
        oprot.writeString(_reviewId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        final boolean _deleted= struct.isDeleted();
        oprot.writeBool(_deleted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeletedAt()) {
        oprot.writeFieldBegin(DELETED_AT_FIELD_DESC);
        final long _deletedAt= struct.getDeletedAt();
        oprot.writeI64(_deletedAt);
        oprot.writeFieldEnd();
      }
      final String _creatorId= struct.getCreatorId();
      if ( _creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(_creatorId);
        oprot.writeFieldEnd();
      }
      final String _createdAt= struct.getCreatedAt();
      if ( _createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(_createdAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentTupleSchemeFactory implements SchemeFactory {
    public CommentTupleScheme getScheme() {
      return new CommentTupleScheme();
    }
  }

  private static class CommentTupleScheme extends TupleScheme<Comment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReviewId()) {
        optionals.set(1);
      }
      if (struct.isSetDeleted()) {
        optionals.set(2);
      }
      if (struct.isSetDeletedAt()) {
        optionals.set(3);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(4);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetReviewId()) {
        oprot.writeString(struct.reviewId);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetDeletedAt()) {
        oprot.writeI64(struct.deletedAt);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeString(struct.creatorId);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reviewId = iprot.readString();
        struct.setReviewIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deletedAt = iprot.readI64();
        struct.setDeletedAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creatorId = iprot.readString();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

