/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tobox.totalk.thrift.types;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Review implements org.apache.thrift.TBase<Review, Review._Fields>, java.io.Serializable, Cloneable, Comparable<Review> {
  private static final long   serialVersionUID        = 1L;
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Review");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField DELETED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField COMMENTS_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("commentsAllowed", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField _VOTES_YES_FIELD_DESC = new org.apache.thrift.protocol.TField("_votesYes", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VOTES_YES_FIELD_DESC = new org.apache.thrift.protocol.TField("votesYes", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField VOTES_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("votesNo", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField REVIEWS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewsCount", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField MY_VOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("myVote", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ReviewTryloadSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ReviewTupleSchemeFactory();

  private String id; // required
  private ReviewType type; // required
  private boolean deleted; // required
  private long deletedAt; // required
  private EntityType entityType; // required
  private String entityId; // required
  private int categoryId; // required
  private Country country; // required
  private String creatorId; // required
  private long createdAt; // required
  private long updatedAt; // required
  private boolean commentsAllowed; // required
  private String title; // required
  private String body; // required
  private int _votesYes; // required
  private long votesYes; // required
  private int votesNo; // required
  private List<Comment> comments; // required
  private int reviewsCount; // required
  private boolean myVote; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see ReviewType
     */
    TYPE((short)2, "type"),
    DELETED((short)3, "deleted"),
    DELETED_AT((short)4, "deletedAt"),
    /**
     * 
     * @see EntityType
     */
    ENTITY_TYPE((short)5, "entityType"),
    ENTITY_ID((short)6, "entityId"),
    CATEGORY_ID((short)7, "categoryId"),
    /**
     * 
     * @see Country
     */
    COUNTRY((short)8, "country"),
    CREATOR_ID((short)9, "creatorId"),
    CREATED_AT((short)10, "createdAt"),
    UPDATED_AT((short)11, "updatedAt"),
    COMMENTS_ALLOWED((short)12, "commentsAllowed"),
    TITLE((short)13, "title"),
    BODY((short)14, "body"),
    _VOTES_YES((short)16, "_votesYes"),
    VOTES_YES((short)21, "votesYes"),
    VOTES_NO((short)17, "votesNo"),
    COMMENTS((short)18, "comments"),
    REVIEWS_COUNT((short)19, "reviewsCount"),
    MY_VOTE((short)20, "myVote");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // DELETED
          return DELETED;
        case 4: // DELETED_AT
          return DELETED_AT;
        case 5: // ENTITY_TYPE
          return ENTITY_TYPE;
        case 6: // ENTITY_ID
          return ENTITY_ID;
        case 7: // CATEGORY_ID
          return CATEGORY_ID;
        case 8: // COUNTRY
          return COUNTRY;
        case 9: // CREATOR_ID
          return CREATOR_ID;
        case 10: // CREATED_AT
          return CREATED_AT;
        case 11: // UPDATED_AT
          return UPDATED_AT;
        case 12: // COMMENTS_ALLOWED
          return COMMENTS_ALLOWED;
        case 13: // TITLE
          return TITLE;
        case 14: // BODY
          return BODY;
        case 16: // _VOTES_YES
          return _VOTES_YES;
        case 21: // VOTES_YES
          return VOTES_YES;
        case 17: // VOTES_NO
          return VOTES_NO;
        case 18: // COMMENTS
          return COMMENTS;
        case 19: // REVIEWS_COUNT
          return REVIEWS_COUNT;
        case 20: // MY_VOTE
          return MY_VOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELETED_ISSET_ID = 0;
  private static final int __DELETEDAT_ISSET_ID = 1;
  private static final int __CATEGORYID_ISSET_ID = 2;
  private static final int __CREATEDAT_ISSET_ID = 3;
  private static final int __UPDATEDAT_ISSET_ID = 4;
  private static final int __COMMENTSALLOWED_ISSET_ID = 5;
  private static final int ___VOTESYES_ISSET_ID = 6;
  private static final int __VOTESYES_ISSET_ID = 7;
  private static final int __VOTESNO_ISSET_ID = 8;
  private static final int __REVIEWSCOUNT_ISSET_ID = 9;
  private static final int __MYVOTE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReviewType.class)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED_AT, new org.apache.thrift.meta_data.FieldMetaData("deletedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntityType.class)));
    tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Country.class)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENTS_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("commentsAllowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._VOTES_YES, new org.apache.thrift.meta_data.FieldMetaData("_votesYes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOTES_YES, new org.apache.thrift.meta_data.FieldMetaData("votesYes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOTES_NO, new org.apache.thrift.meta_data.FieldMetaData("votesNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Comment.class))));
    tmpMap.put(_Fields.REVIEWS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("reviewsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MY_VOTE, new org.apache.thrift.meta_data.FieldMetaData("myVote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Review.class, metaDataMap);
  }

  public Review() {
  }

  public Review(
    String id,
    ReviewType type,
    boolean deleted,
    long deletedAt,
    EntityType entityType,
    String entityId,
    int categoryId,
    Country country,
    String creatorId,
    long createdAt,
    long updatedAt,
    boolean commentsAllowed,
    String title,
    String body,
    int _votesYes,
    long votesYes,
    int votesNo,
    List<Comment> comments,
    int reviewsCount,
    boolean myVote)
  {
    this();
    this.id = id;
    this.type = type;
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.deletedAt = deletedAt;
    setDeletedAtIsSet(true);
    this.entityType = entityType;
    this.entityId = entityId;
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.country = country;
    this.creatorId = creatorId;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.commentsAllowed = commentsAllowed;
    setCommentsAllowedIsSet(true);
    this.title = title;
    this.body = body;
    this._votesYes = _votesYes;
    set_votesYesIsSet(true);
    this.votesYes = votesYes;
    setVotesYesIsSet(true);
    this.votesNo = votesNo;
    setVotesNoIsSet(true);
    this.comments = comments;
    this.reviewsCount = reviewsCount;
    setReviewsCountIsSet(true);
    this.myVote = myVote;
    setMyVoteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Review(Review other) {
    deepCopyFields(other);
  }

  public void deepCopyFields(Review other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }else{
      this.id = null;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }else{
      this.type = null;
    }
    this.deleted = other.deleted;
    this.deletedAt = other.deletedAt;
    if (other.isSetEntityType()) {
      this.entityType = other.entityType;
    }else{
      this.entityType = null;
    }
    if (other.isSetEntityId()) {
      this.entityId = other.entityId;
    }else{
      this.entityId = null;
    }
    this.categoryId = other.categoryId;
    if (other.isSetCountry()) {
      this.country = other.country;
    }else{
      this.country = null;
    }
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }else{
      this.creatorId = null;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    this.commentsAllowed = other.commentsAllowed;
    if (other.isSetTitle()) {
      this.title = other.title;
    }else{
      this.title = null;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }else{
      this.body = null;
    }
    this._votesYes = other._votesYes;
    this.votesYes = other.votesYes;
    this.votesNo = other.votesNo;
    if (other.isSetComments()) {
      List<Comment> __this__comments = new ArrayList<Comment>(other.comments.size());
      for (Comment other_element : other.comments) {
        __this__comments.add(new Comment(other_element));
      }
      this.comments = __this__comments;
    }else{
      this.comments = null;
    }
    this.reviewsCount = other.reviewsCount;
    this.myVote = other.myVote;
  }

  public Review deepCopy() {
    final Review o = new Review();
    o.deepCopyFields(this);
    return o;
  }

  public Review newInstance() {
    return new Review();
  }

  @Override
  public void clear() {
    this.id = null;
    this.type = null;
    setDeletedIsSet(false);
    this.deleted = false;
    setDeletedAtIsSet(false);
    this.deletedAt = 0;
    this.entityType = null;
    this.entityId = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.country = null;
    this.creatorId = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setCommentsAllowedIsSet(false);
    this.commentsAllowed = false;
    this.title = null;
    this.body = null;
    set_votesYesIsSet(false);
    this._votesYes = 0;
    setVotesYesIsSet(false);
    this.votesYes = 0;
    setVotesNoIsSet(false);
    this.votesNo = 0;
    this.comments = null;
    setReviewsCountIsSet(false);
    this.reviewsCount = 0;
    setMyVoteIsSet(false);
    this.myVote = false;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see ReviewType
   */
  public ReviewType getType() {
    return this.type;
  }

  /**
   * 
   * @see ReviewType
   */
  public void setType(ReviewType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public long getDeletedAt() {
    return this.deletedAt;
  }

  public void setDeletedAt(long deletedAt) {
    this.deletedAt = deletedAt;
    setDeletedAtIsSet(true);
  }

  public void unsetDeletedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETEDAT_ISSET_ID);
  }

  /** Returns true if field deletedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETEDAT_ISSET_ID);
  }

  public void setDeletedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETEDAT_ISSET_ID, value);
  }

  /**
   * 
   * @see EntityType
   */
  public EntityType getEntityType() {
    return this.entityType;
  }

  /**
   * 
   * @see EntityType
   */
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }

  public void unsetEntityType() {
    this.entityType = null;
  }

  /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityType() {
    return this.entityType != null;
  }

  public void setEntityTypeIsSet(boolean value) {
    if (!value) {
      this.entityType = null;
    }
  }

  public String getEntityId() {
    return this.entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }

  public void unsetEntityId() {
    this.entityId = null;
  }

  /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityId() {
    return this.entityId != null;
  }

  public void setEntityIdIsSet(boolean value) {
    if (!value) {
      this.entityId = null;
    }
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public void setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  /**
   * 
   * @see Country
   */
  public Country getCountry() {
    return this.country;
  }

  /**
   * 
   * @see Country
   */
  public void setCountry(Country country) {
    this.country = country;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getCreatorId() {
    return this.creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public boolean isCommentsAllowed() {
    return this.commentsAllowed;
  }

  public void setCommentsAllowed(boolean commentsAllowed) {
    this.commentsAllowed = commentsAllowed;
    setCommentsAllowedIsSet(true);
  }

  public void unsetCommentsAllowed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTSALLOWED_ISSET_ID);
  }

  /** Returns true if field commentsAllowed is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentsAllowed() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTSALLOWED_ISSET_ID);
  }

  public void setCommentsAllowedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTSALLOWED_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int get_votesYes() {
    return this._votesYes;
  }

  public void set_votesYes(int _votesYes) {
    this._votesYes = _votesYes;
    set_votesYesIsSet(true);
  }

  public void unset_votesYes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___VOTESYES_ISSET_ID);
  }

  /** Returns true if field _votesYes is set (has been assigned a value) and false otherwise */
  public boolean isSet_votesYes() {
    return EncodingUtils.testBit(__isset_bitfield, ___VOTESYES_ISSET_ID);
  }

  public void set_votesYesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___VOTESYES_ISSET_ID, value);
  }

  public long getVotesYes() {
    return this.votesYes;
  }

  public void setVotesYes(long votesYes) {
    this.votesYes = votesYes;
    setVotesYesIsSet(true);
  }

  public void unsetVotesYes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTESYES_ISSET_ID);
  }

  /** Returns true if field votesYes is set (has been assigned a value) and false otherwise */
  public boolean isSetVotesYes() {
    return EncodingUtils.testBit(__isset_bitfield, __VOTESYES_ISSET_ID);
  }

  public void setVotesYesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTESYES_ISSET_ID, value);
  }

  public int getVotesNo() {
    return this.votesNo;
  }

  public void setVotesNo(int votesNo) {
    this.votesNo = votesNo;
    setVotesNoIsSet(true);
  }

  public void unsetVotesNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTESNO_ISSET_ID);
  }

  /** Returns true if field votesNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVotesNo() {
    return EncodingUtils.testBit(__isset_bitfield, __VOTESNO_ISSET_ID);
  }

  public void setVotesNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTESNO_ISSET_ID, value);
  }

  public int getCommentsSize() {
    return (this.comments == null) ? 0 : this.comments.size();
  }

  public java.util.Iterator<Comment> getCommentsIterator() {
    return (this.getComments() == null) ? null : this.getComments().iterator();
  }

  public void addToComments(Comment elem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comment>();
    }
    this.comments.add(elem);
  }

  public List<Comment> getComments() {
    return this.comments;
  }

  public void setComments(List<Comment> comments) {
    this.comments = comments;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public int getReviewsCount() {
    return this.reviewsCount;
  }

  public void setReviewsCount(int reviewsCount) {
    this.reviewsCount = reviewsCount;
    setReviewsCountIsSet(true);
  }

  public void unsetReviewsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSCOUNT_ISSET_ID);
  }

  /** Returns true if field reviewsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSCOUNT_ISSET_ID);
  }

  public void setReviewsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSCOUNT_ISSET_ID, value);
  }

  public boolean isMyVote() {
    return this.myVote;
  }

  public void setMyVote(boolean myVote) {
    this.myVote = myVote;
    setMyVoteIsSet(true);
  }

  public void unsetMyVote() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYVOTE_ISSET_ID);
  }

  /** Returns true if field myVote is set (has been assigned a value) and false otherwise */
  public boolean isSetMyVote() {
    return EncodingUtils.testBit(__isset_bitfield, __MYVOTE_ISSET_ID);
  }

  public void setMyVoteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYVOTE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ReviewType)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case DELETED_AT:
      if (value == null) {
        unsetDeletedAt();
      } else {
        setDeletedAt((Long)value);
      }
      break;

    case ENTITY_TYPE:
      if (value == null) {
        unsetEntityType();
      } else {
        setEntityType((EntityType)value);
      }
      break;

    case ENTITY_ID:
      if (value == null) {
        unsetEntityId();
      } else {
        setEntityId((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((Country)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case COMMENTS_ALLOWED:
      if (value == null) {
        unsetCommentsAllowed();
      } else {
        setCommentsAllowed((Boolean)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case _VOTES_YES:
      if (value == null) {
        unset_votesYes();
      } else {
        set_votesYes((Integer)value);
      }
      break;

    case VOTES_YES:
      if (value == null) {
        unsetVotesYes();
      } else {
        setVotesYes((Long)value);
      }
      break;

    case VOTES_NO:
      if (value == null) {
        unsetVotesNo();
      } else {
        setVotesNo((Integer)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((List<Comment>)value);
      }
      break;

    case REVIEWS_COUNT:
      if (value == null) {
        unsetReviewsCount();
      } else {
        setReviewsCount((Integer)value);
      }
      break;

    case MY_VOTE:
      if (value == null) {
        unsetMyVote();
      } else {
        setMyVote((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return getType();

    case DELETED:
      return isDeleted();

    case DELETED_AT:
      return getDeletedAt();

    case ENTITY_TYPE:
      return getEntityType();

    case ENTITY_ID:
      return getEntityId();

    case CATEGORY_ID:
      return getCategoryId();

    case COUNTRY:
      return getCountry();

    case CREATOR_ID:
      return getCreatorId();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case COMMENTS_ALLOWED:
      return isCommentsAllowed();

    case TITLE:
      return getTitle();

    case BODY:
      return getBody();

    case _VOTES_YES:
      return get_votesYes();

    case VOTES_YES:
      return getVotesYes();

    case VOTES_NO:
      return getVotesNo();

    case COMMENTS:
      return getComments();

    case REVIEWS_COUNT:
      return getReviewsCount();

    case MY_VOTE:
      return isMyVote();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case DELETED:
      return isSetDeleted();
    case DELETED_AT:
      return isSetDeletedAt();
    case ENTITY_TYPE:
      return isSetEntityType();
    case ENTITY_ID:
      return isSetEntityId();
    case CATEGORY_ID:
      return isSetCategoryId();
    case COUNTRY:
      return isSetCountry();
    case CREATOR_ID:
      return isSetCreatorId();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case COMMENTS_ALLOWED:
      return isSetCommentsAllowed();
    case TITLE:
      return isSetTitle();
    case BODY:
      return isSetBody();
    case _VOTES_YES:
      return isSet_votesYes();
    case VOTES_YES:
      return isSetVotesYes();
    case VOTES_NO:
      return isSetVotesNo();
    case COMMENTS:
      return isSetComments();
    case REVIEWS_COUNT:
      return isSetReviewsCount();
    case MY_VOTE:
      return isSetMyVote();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Review)
      return this.equals((Review)that);
    return false;
  }

  public boolean equals(Review that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_deletedAt = true;
    boolean that_present_deletedAt = true;
    if (this_present_deletedAt || that_present_deletedAt) {
      if (!(this_present_deletedAt && that_present_deletedAt))
        return false;
      if (this.deletedAt != that.deletedAt)
        return false;
    }

    boolean this_present_entityType = true && this.isSetEntityType();
    boolean that_present_entityType = true && that.isSetEntityType();
    if (this_present_entityType || that_present_entityType) {
      if (!(this_present_entityType && that_present_entityType))
        return false;
      if (!this.entityType.equals(that.entityType))
        return false;
    }

    boolean this_present_entityId = true && this.isSetEntityId();
    boolean that_present_entityId = true && that.isSetEntityId();
    if (this_present_entityId || that_present_entityId) {
      if (!(this_present_entityId && that_present_entityId))
        return false;
      if (!this.entityId.equals(that.entityId))
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_commentsAllowed = true;
    boolean that_present_commentsAllowed = true;
    if (this_present_commentsAllowed || that_present_commentsAllowed) {
      if (!(this_present_commentsAllowed && that_present_commentsAllowed))
        return false;
      if (this.commentsAllowed != that.commentsAllowed)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present__votesYes = true;
    boolean that_present__votesYes = true;
    if (this_present__votesYes || that_present__votesYes) {
      if (!(this_present__votesYes && that_present__votesYes))
        return false;
      if (this._votesYes != that._votesYes)
        return false;
    }

    boolean this_present_votesYes = true;
    boolean that_present_votesYes = true;
    if (this_present_votesYes || that_present_votesYes) {
      if (!(this_present_votesYes && that_present_votesYes))
        return false;
      if (this.votesYes != that.votesYes)
        return false;
    }

    boolean this_present_votesNo = true;
    boolean that_present_votesNo = true;
    if (this_present_votesNo || that_present_votesNo) {
      if (!(this_present_votesNo && that_present_votesNo))
        return false;
      if (this.votesNo != that.votesNo)
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_reviewsCount = true;
    boolean that_present_reviewsCount = true;
    if (this_present_reviewsCount || that_present_reviewsCount) {
      if (!(this_present_reviewsCount && that_present_reviewsCount))
        return false;
      if (this.reviewsCount != that.reviewsCount)
        return false;
    }

    boolean this_present_myVote = true;
    boolean that_present_myVote = true;
    if (this_present_myVote || that_present_myVote) {
      if (!(this_present_myVote && that_present_myVote))
        return false;
      if (this.myVote != that.myVote)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_deleted = true;
    list.add(present_deleted);
    if (present_deleted)
      list.add(deleted);

    boolean present_deletedAt = true;
    list.add(present_deletedAt);
    if (present_deletedAt)
      list.add(deletedAt);

    boolean present_entityType = true && (isSetEntityType());
    list.add(present_entityType);
    if (present_entityType)
      list.add(entityType.getValue());

    boolean present_entityId = true && (isSetEntityId());
    list.add(present_entityId);
    if (present_entityId)
      list.add(entityId);

    boolean present_categoryId = true;
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_country = true && (isSetCountry());
    list.add(present_country);
    if (present_country)
      list.add(country.getValue());

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_commentsAllowed = true;
    list.add(present_commentsAllowed);
    if (present_commentsAllowed)
      list.add(commentsAllowed);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_body = true && (isSetBody());
    list.add(present_body);
    if (present_body)
      list.add(body);

    boolean present__votesYes = true;
    list.add(present__votesYes);
    if (present__votesYes)
      list.add(_votesYes);

    boolean present_votesYes = true;
    list.add(present_votesYes);
    if (present_votesYes)
      list.add(votesYes);

    boolean present_votesNo = true;
    list.add(present_votesNo);
    if (present_votesNo)
      list.add(votesNo);

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    boolean present_reviewsCount = true;
    list.add(present_reviewsCount);
    if (present_reviewsCount)
      list.add(reviewsCount);

    boolean present_myVote = true;
    list.add(present_myVote);
    if (present_myVote)
      list.add(myVote);

    return list.hashCode();
  }

  @Override
  public int compareTo(Review other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeletedAt()).compareTo(other.isSetDeletedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedAt, other.deletedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(other.isSetEntityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, other.entityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentsAllowed()).compareTo(other.isSetCommentsAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentsAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentsAllowed, other.commentsAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_votesYes()).compareTo(other.isSet_votesYes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_votesYes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._votesYes, other._votesYes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVotesYes()).compareTo(other.isSetVotesYes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVotesYes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.votesYes, other.votesYes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVotesNo()).compareTo(other.isSetVotesNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVotesNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.votesNo, other.votesNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewsCount()).compareTo(other.isSetReviewsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewsCount, other.reviewsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyVote()).compareTo(other.isSetMyVote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyVote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myVote, other.myVote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Review(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deletedAt:");
    sb.append(this.deletedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entityType:");
    if (this.entityType == null) {
      sb.append("null");
    } else {
      sb.append(this.entityType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entityId:");
    if (this.entityId == null) {
      sb.append("null");
    } else {
      sb.append(this.entityId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    if (this.creatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentsAllowed:");
    sb.append(this.commentsAllowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_votesYes:");
    sb.append(this._votesYes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("votesYes:");
    sb.append(this.votesYes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("votesNo:");
    sb.append(this.votesNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewsCount:");
    sb.append(this.reviewsCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myVote:");
    sb.append(this.myVote);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      new ReviewTupleScheme().write(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)), this);
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      new ReviewTupleScheme().read(new org.apache.thrift.protocol.TTupleProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)), this);
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReviewStandardSchemeFactory implements SchemeFactory {
    public ReviewStandardScheme getScheme() {
      return new ReviewStandardScheme();
    }
  }

  private static class ReviewStandardScheme extends StandardScheme<Review> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Review struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletedAt = iprot.readI64();
              struct.setDeletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENTITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
              struct.setEntityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entityId = iprot.readString();
              struct.setEntityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMENTS_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.commentsAllowed = iprot.readBool();
              struct.setCommentsAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _VOTES_YES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._votesYes = iprot.readI32();
              struct.set_votesYesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // VOTES_YES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.votesYes = iprot.readI64();
              struct.setVotesYesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VOTES_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.votesNo = iprot.readI32();
              struct.setVotesNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.comments = new ArrayList<Comment>(_list0.size);
                Comment _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Comment();
                  _elem1.read(iprot);
                  struct.comments.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REVIEWS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewsCount = iprot.readI32();
              struct.setReviewsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MY_VOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.myVote = iprot.readBool();
              struct.setMyVoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Review struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeBool(struct.deleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_AT_FIELD_DESC);
      oprot.writeI64(struct.deletedAt);
      oprot.writeFieldEnd();
      if (struct.entityType != null) {
        oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.entityType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.entityId != null) {
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeString(struct.entityId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeI32(struct.country.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.creatorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENTS_ALLOWED_FIELD_DESC);
      oprot.writeBool(struct.commentsAllowed);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_VOTES_YES_FIELD_DESC);
      oprot.writeI32(struct._votesYes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOTES_NO_FIELD_DESC);
      oprot.writeI32(struct.votesNo);
      oprot.writeFieldEnd();
      if (struct.comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.comments.size()));
          for (Comment _iter3 : struct.comments)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVIEWS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.reviewsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MY_VOTE_FIELD_DESC);
      oprot.writeBool(struct.myVote);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOTES_YES_FIELD_DESC);
      oprot.writeI64(struct.votesYes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewTryloadSchemeFactory implements SchemeFactory {
    public ReviewTryloadScheme getScheme() {
      return new ReviewTryloadScheme();
    }
  }

  private static class ReviewTryloadScheme extends StandardScheme<Review> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Review struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletedAt = iprot.readI64();
              struct.setDeletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENTITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
              struct.setEntityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entityId = iprot.readString();
              struct.setEntityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMENTS_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.commentsAllowed = iprot.readBool();
              struct.setCommentsAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _VOTES_YES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._votesYes = iprot.readI32();
              struct.set_votesYesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // VOTES_YES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.votesYes = iprot.readI64();
              struct.setVotesYesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VOTES_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.votesNo = iprot.readI32();
              struct.setVotesNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.comments = new ArrayList<Comment>(_list4.size);
                Comment _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new Comment();
                  _elem5.read(iprot);
                  struct.comments.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REVIEWS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewsCount = iprot.readI32();
              struct.setReviewsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MY_VOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.myVote = iprot.readBool();
              struct.setMyVoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Review struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      final String _id= struct.getId();
      if ( _id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(_id);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        final boolean _deleted= struct.isDeleted();
        oprot.writeBool(_deleted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeletedAt()) {
        oprot.writeFieldBegin(DELETED_AT_FIELD_DESC);
        final long _deletedAt= struct.getDeletedAt();
        oprot.writeI64(_deletedAt);
        oprot.writeFieldEnd();
      }
      if (struct.entityType != null) {
        oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.entityType.getValue());
        oprot.writeFieldEnd();
      }
      final String _entityId= struct.getEntityId();
      if ( _entityId != null) {
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeString(_entityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCategoryId()) {
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        final int _categoryId= struct.getCategoryId();
        oprot.writeI32(_categoryId);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeI32(struct.country.getValue());
        oprot.writeFieldEnd();
      }
      final String _creatorId= struct.getCreatorId();
      if ( _creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(_creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        final long _createdAt= struct.getCreatedAt();
        oprot.writeI64(_createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        final long _updatedAt= struct.getUpdatedAt();
        oprot.writeI64(_updatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommentsAllowed()) {
        oprot.writeFieldBegin(COMMENTS_ALLOWED_FIELD_DESC);
        final boolean _commentsAllowed= struct.isCommentsAllowed();
        oprot.writeBool(_commentsAllowed);
        oprot.writeFieldEnd();
      }
      final String _title= struct.getTitle();
      if ( _title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(_title);
        oprot.writeFieldEnd();
      }
      final String _body= struct.getBody();
      if ( _body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(_body);
        oprot.writeFieldEnd();
      }
      if (struct.isSet_votesYes()) {
        oprot.writeFieldBegin(_VOTES_YES_FIELD_DESC);
        final int __votesYes= struct.get_votesYes();
        oprot.writeI32(__votesYes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVotesNo()) {
        oprot.writeFieldBegin(VOTES_NO_FIELD_DESC);
        final int _votesNo= struct.getVotesNo();
        oprot.writeI32(_votesNo);
        oprot.writeFieldEnd();
      }
      final List<Comment> _comments= struct.getComments();
      if ( _comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _comments.size()));
          for (Comment _iter7 : _comments)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetReviewsCount()) {
        oprot.writeFieldBegin(REVIEWS_COUNT_FIELD_DESC);
        final int _reviewsCount= struct.getReviewsCount();
        oprot.writeI32(_reviewsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMyVote()) {
        oprot.writeFieldBegin(MY_VOTE_FIELD_DESC);
        final boolean _myVote= struct.isMyVote();
        oprot.writeBool(_myVote);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVotesYes()) {
        oprot.writeFieldBegin(VOTES_YES_FIELD_DESC);
        final long _votesYes= struct.getVotesYes();
        oprot.writeI64(_votesYes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewTupleSchemeFactory implements SchemeFactory {
    public ReviewTupleScheme getScheme() {
      return new ReviewTupleScheme();
    }
  }

  private static class ReviewTupleScheme extends TupleScheme<Review> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Review struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetDeleted()) {
        optionals.set(2);
      }
      if (struct.isSetDeletedAt()) {
        optionals.set(3);
      }
      if (struct.isSetEntityType()) {
        optionals.set(4);
      }
      if (struct.isSetEntityId()) {
        optionals.set(5);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(6);
      }
      if (struct.isSetCountry()) {
        optionals.set(7);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(8);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(9);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(10);
      }
      if (struct.isSetCommentsAllowed()) {
        optionals.set(11);
      }
      if (struct.isSetTitle()) {
        optionals.set(12);
      }
      if (struct.isSetBody()) {
        optionals.set(13);
      }
      if (struct.isSet_votesYes()) {
        optionals.set(14);
      }
      if (struct.isSetVotesYes()) {
        optionals.set(15);
      }
      if (struct.isSetVotesNo()) {
        optionals.set(16);
      }
      if (struct.isSetComments()) {
        optionals.set(17);
      }
      if (struct.isSetReviewsCount()) {
        optionals.set(18);
      }
      if (struct.isSetMyVote()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetDeletedAt()) {
        oprot.writeI64(struct.deletedAt);
      }
      if (struct.isSetEntityType()) {
        oprot.writeI32(struct.entityType.getValue());
      }
      if (struct.isSetEntityId()) {
        oprot.writeString(struct.entityId);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetCountry()) {
        oprot.writeI32(struct.country.getValue());
      }
      if (struct.isSetCreatorId()) {
        oprot.writeString(struct.creatorId);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeI64(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeI64(struct.updatedAt);
      }
      if (struct.isSetCommentsAllowed()) {
        oprot.writeBool(struct.commentsAllowed);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSet_votesYes()) {
        oprot.writeI32(struct._votesYes);
      }
      if (struct.isSetVotesYes()) {
        oprot.writeI64(struct.votesYes);
      }
      if (struct.isSetVotesNo()) {
        oprot.writeI32(struct.votesNo);
      }
      if (struct.isSetComments()) {
        {
          oprot.writeI32(struct.comments.size());
          for (Comment _iter8 : struct.comments)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetReviewsCount()) {
        oprot.writeI32(struct.reviewsCount);
      }
      if (struct.isSetMyVote()) {
        oprot.writeBool(struct.myVote);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Review struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = com.tobox.totalk.thrift.types.ReviewType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deletedAt = iprot.readI64();
        struct.setDeletedAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.entityType = com.tobox.totalk.thrift.types.EntityType.findByValue(iprot.readI32());
        struct.setEntityTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.entityId = iprot.readString();
        struct.setEntityIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.country = com.tobox.totalk.thrift.types.Country.findByValue(iprot.readI32());
        struct.setCountryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.creatorId = iprot.readString();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createdAt = iprot.readI64();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updatedAt = iprot.readI64();
        struct.setUpdatedAtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commentsAllowed = iprot.readBool();
        struct.setCommentsAllowedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(14)) {
        struct._votesYes = iprot.readI32();
        struct.set_votesYesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.votesYes = iprot.readI64();
        struct.setVotesYesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.votesNo = iprot.readI32();
        struct.setVotesNoIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list9 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.comments = new ArrayList<Comment>(_list9.size);
          Comment _elem10;
          for (int _i11 = 0; _i11 < _list9.size; ++_i11)
          {
            _elem10 = new Comment();
            _elem10.read(iprot);
            struct.comments.add(_elem10);
          }
        }
        struct.setCommentsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.reviewsCount = iprot.readI32();
        struct.setReviewsCountIsSet(true);
      }
      if (incoming.get(19)) {
        struct.myVote = iprot.readBool();
        struct.setMyVoteIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

